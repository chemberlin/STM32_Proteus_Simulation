
ST7735R_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002930  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800531c  0800531c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  0800531c  0800531c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800531c  0800531c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08005324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000030  08005354  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08005354  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068e2  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001563  00000000  00000000  0002693b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  00027ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  000285a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001654e  00000000  00000000  00028bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ac3  00000000  00000000  0003f13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eea9  00000000  00000000  00046c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c5aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b2c  00000000  00000000  000c5afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	080029d4 	.word	0x080029d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	080029d4 	.word	0x080029d4

0800014c <HAL_Init>:
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f92b 	bl	80003b8 <HAL_NVIC_SetPriorityGrouping>
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>
 8000168:	f002 fb42 	bl	80027f0 <HAL_MspInit>
 800016c:	2300      	movs	r3, #0
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f935 	bl	8000406 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f90b 	bl	80003ce <HAL_NVIC_SetPriority>
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
 80001c2:	2301      	movs	r3, #1
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000004c 	.word	0x2000004c

080001fc <HAL_GetTick>:
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000004c 	.word	0x2000004c

08000210 <HAL_Delay>:
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <__NVIC_SetPriorityGrouping>:
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 0307 	and.w	r3, r3, #7
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000274:	4013      	ands	r3, r2
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	021a      	lsls	r2, r3, #8
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	4313      	orrs	r3, r2
 8000280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <__NVIC_SetPriorityGrouping+0x44>)
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	60d3      	str	r3, [r2, #12]
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <__NVIC_GetPriorityGrouping>:
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <__NVIC_GetPriorityGrouping+0x18>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	f003 0307 	and.w	r3, r3, #7
 80002ae:	4618      	mov	r0, r3
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <__NVIC_SetPriority>:
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	db0a      	blt.n	80002e6 <__NVIC_SetPriority+0x2a>
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	490c      	ldr	r1, [pc, #48]	; (8000308 <__NVIC_SetPriority+0x4c>)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	0112      	lsls	r2, r2, #4
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	440b      	add	r3, r1
 80002e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80002e4:	e00a      	b.n	80002fc <__NVIC_SetPriority+0x40>
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4908      	ldr	r1, [pc, #32]	; (800030c <__NVIC_SetPriority+0x50>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	f003 030f 	and.w	r3, r3, #15
 80002f2:	3b04      	subs	r3, #4
 80002f4:	0112      	lsls	r2, r2, #4
 80002f6:	b2d2      	uxtb	r2, r2
 80002f8:	440b      	add	r3, r1
 80002fa:	761a      	strb	r2, [r3, #24]
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000e100 	.word	0xe000e100
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <NVIC_EncodePriority>:
 8000310:	b480      	push	{r7}
 8000312:	b089      	sub	sp, #36	; 0x24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	61fb      	str	r3, [r7, #28]
 8000324:	69fb      	ldr	r3, [r7, #28]
 8000326:	f1c3 0307 	rsb	r3, r3, #7
 800032a:	2b04      	cmp	r3, #4
 800032c:	bf28      	it	cs
 800032e:	2304      	movcs	r3, #4
 8000330:	61bb      	str	r3, [r7, #24]
 8000332:	69fb      	ldr	r3, [r7, #28]
 8000334:	3304      	adds	r3, #4
 8000336:	2b06      	cmp	r3, #6
 8000338:	d902      	bls.n	8000340 <NVIC_EncodePriority+0x30>
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	3b03      	subs	r3, #3
 800033e:	e000      	b.n	8000342 <NVIC_EncodePriority+0x32>
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	f04f 32ff 	mov.w	r2, #4294967295
 8000348:	69bb      	ldr	r3, [r7, #24]
 800034a:	fa02 f303 	lsl.w	r3, r2, r3
 800034e:	43da      	mvns	r2, r3
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	401a      	ands	r2, r3
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	409a      	lsls	r2, r3
 8000358:	f04f 31ff 	mov.w	r1, #4294967295
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43d9      	mvns	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	400b      	ands	r3, r1
 8000368:	4313      	orrs	r3, r2
 800036a:	4618      	mov	r0, r3
 800036c:	3724      	adds	r7, #36	; 0x24
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SysTick_Config>:
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000384:	d301      	bcc.n	800038a <SysTick_Config+0x16>
 8000386:	2301      	movs	r3, #1
 8000388:	e00f      	b.n	80003aa <SysTick_Config+0x36>
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <SysTick_Config+0x40>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	6053      	str	r3, [r2, #4]
 8000392:	210f      	movs	r1, #15
 8000394:	f04f 30ff 	mov.w	r0, #4294967295
 8000398:	f7ff ff90 	bl	80002bc <__NVIC_SetPriority>
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <SysTick_Config+0x40>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SysTick_Config+0x40>)
 80003a4:	2207      	movs	r2, #7
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	2300      	movs	r3, #0
 80003aa:	4618      	mov	r0, r3
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010

080003b8 <HAL_NVIC_SetPriorityGrouping>:
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f7ff ff49 	bl	8000258 <__NVIC_SetPriorityGrouping>
 80003c6:	bf00      	nop
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}

080003ce <HAL_NVIC_SetPriority>:
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b086      	sub	sp, #24
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	4603      	mov	r3, r0
 80003d6:	60b9      	str	r1, [r7, #8]
 80003d8:	607a      	str	r2, [r7, #4]
 80003da:	73fb      	strb	r3, [r7, #15]
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	f7ff ff5e 	bl	80002a0 <__NVIC_GetPriorityGrouping>
 80003e4:	6178      	str	r0, [r7, #20]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	6978      	ldr	r0, [r7, #20]
 80003ec:	f7ff ff90 	bl	8000310 <NVIC_EncodePriority>
 80003f0:	4602      	mov	r2, r0
 80003f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f6:	4611      	mov	r1, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff5f 	bl	80002bc <__NVIC_SetPriority>
 80003fe:	bf00      	nop
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <HAL_SYSTICK_Config>:
 8000406:	b580      	push	{r7, lr}
 8000408:	b082      	sub	sp, #8
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6878      	ldr	r0, [r7, #4]
 8000410:	f7ff ffb0 	bl	8000374 <SysTick_Config>
 8000414:	4603      	mov	r3, r0
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <HAL_GPIO_Init>:
 8000420:	b480      	push	{r7}
 8000422:	b08b      	sub	sp, #44	; 0x2c
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	2300      	movs	r3, #0
 800042c:	627b      	str	r3, [r7, #36]	; 0x24
 800042e:	2300      	movs	r3, #0
 8000430:	623b      	str	r3, [r7, #32]
 8000432:	e161      	b.n	80006f8 <HAL_GPIO_Init+0x2d8>
 8000434:	2201      	movs	r2, #1
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	fa02 f303 	lsl.w	r3, r2, r3
 800043c:	61fb      	str	r3, [r7, #28]
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	69fa      	ldr	r2, [r7, #28]
 8000444:	4013      	ands	r3, r2
 8000446:	61bb      	str	r3, [r7, #24]
 8000448:	69ba      	ldr	r2, [r7, #24]
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	429a      	cmp	r2, r3
 800044e:	f040 8150 	bne.w	80006f2 <HAL_GPIO_Init+0x2d2>
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	685b      	ldr	r3, [r3, #4]
 8000456:	4a97      	ldr	r2, [pc, #604]	; (80006b4 <HAL_GPIO_Init+0x294>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d05e      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 800045c:	4a95      	ldr	r2, [pc, #596]	; (80006b4 <HAL_GPIO_Init+0x294>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d875      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000462:	4a95      	ldr	r2, [pc, #596]	; (80006b8 <HAL_GPIO_Init+0x298>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d058      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000468:	4a93      	ldr	r2, [pc, #588]	; (80006b8 <HAL_GPIO_Init+0x298>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d86f      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800046e:	4a93      	ldr	r2, [pc, #588]	; (80006bc <HAL_GPIO_Init+0x29c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d052      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000474:	4a91      	ldr	r2, [pc, #580]	; (80006bc <HAL_GPIO_Init+0x29c>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d869      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800047a:	4a91      	ldr	r2, [pc, #580]	; (80006c0 <HAL_GPIO_Init+0x2a0>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d04c      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 8000480:	4a8f      	ldr	r2, [pc, #572]	; (80006c0 <HAL_GPIO_Init+0x2a0>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d863      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000486:	4a8f      	ldr	r2, [pc, #572]	; (80006c4 <HAL_GPIO_Init+0x2a4>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d046      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 800048c:	4a8d      	ldr	r2, [pc, #564]	; (80006c4 <HAL_GPIO_Init+0x2a4>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d85d      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 8000492:	2b12      	cmp	r3, #18
 8000494:	d82a      	bhi.n	80004ec <HAL_GPIO_Init+0xcc>
 8000496:	2b12      	cmp	r3, #18
 8000498:	d859      	bhi.n	800054e <HAL_GPIO_Init+0x12e>
 800049a:	a201      	add	r2, pc, #4	; (adr r2, 80004a0 <HAL_GPIO_Init+0x80>)
 800049c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a0:	0800051b 	.word	0x0800051b
 80004a4:	080004f5 	.word	0x080004f5
 80004a8:	08000507 	.word	0x08000507
 80004ac:	08000549 	.word	0x08000549
 80004b0:	0800054f 	.word	0x0800054f
 80004b4:	0800054f 	.word	0x0800054f
 80004b8:	0800054f 	.word	0x0800054f
 80004bc:	0800054f 	.word	0x0800054f
 80004c0:	0800054f 	.word	0x0800054f
 80004c4:	0800054f 	.word	0x0800054f
 80004c8:	0800054f 	.word	0x0800054f
 80004cc:	0800054f 	.word	0x0800054f
 80004d0:	0800054f 	.word	0x0800054f
 80004d4:	0800054f 	.word	0x0800054f
 80004d8:	0800054f 	.word	0x0800054f
 80004dc:	0800054f 	.word	0x0800054f
 80004e0:	0800054f 	.word	0x0800054f
 80004e4:	080004fd 	.word	0x080004fd
 80004e8:	08000511 	.word	0x08000511
 80004ec:	4a76      	ldr	r2, [pc, #472]	; (80006c8 <HAL_GPIO_Init+0x2a8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d013      	beq.n	800051a <HAL_GPIO_Init+0xfa>
 80004f2:	e02c      	b.n	800054e <HAL_GPIO_Init+0x12e>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	623b      	str	r3, [r7, #32]
 80004fa:	e029      	b.n	8000550 <HAL_GPIO_Init+0x130>
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	3304      	adds	r3, #4
 8000502:	623b      	str	r3, [r7, #32]
 8000504:	e024      	b.n	8000550 <HAL_GPIO_Init+0x130>
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	3308      	adds	r3, #8
 800050c:	623b      	str	r3, [r7, #32]
 800050e:	e01f      	b.n	8000550 <HAL_GPIO_Init+0x130>
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	330c      	adds	r3, #12
 8000516:	623b      	str	r3, [r7, #32]
 8000518:	e01a      	b.n	8000550 <HAL_GPIO_Init+0x130>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <HAL_GPIO_Init+0x108>
 8000522:	2304      	movs	r3, #4
 8000524:	623b      	str	r3, [r7, #32]
 8000526:	e013      	b.n	8000550 <HAL_GPIO_Init+0x130>
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d105      	bne.n	800053c <HAL_GPIO_Init+0x11c>
 8000530:	2308      	movs	r3, #8
 8000532:	623b      	str	r3, [r7, #32]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	69fa      	ldr	r2, [r7, #28]
 8000538:	611a      	str	r2, [r3, #16]
 800053a:	e009      	b.n	8000550 <HAL_GPIO_Init+0x130>
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	615a      	str	r2, [r3, #20]
 8000546:	e003      	b.n	8000550 <HAL_GPIO_Init+0x130>
 8000548:	2300      	movs	r3, #0
 800054a:	623b      	str	r3, [r7, #32]
 800054c:	e000      	b.n	8000550 <HAL_GPIO_Init+0x130>
 800054e:	bf00      	nop
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	2bff      	cmp	r3, #255	; 0xff
 8000554:	d801      	bhi.n	800055a <HAL_GPIO_Init+0x13a>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	e001      	b.n	800055e <HAL_GPIO_Init+0x13e>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3304      	adds	r3, #4
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	2bff      	cmp	r3, #255	; 0xff
 8000564:	d802      	bhi.n	800056c <HAL_GPIO_Init+0x14c>
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	e002      	b.n	8000572 <HAL_GPIO_Init+0x152>
 800056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056e:	3b08      	subs	r3, #8
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	210f      	movs	r1, #15
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	fa01 f303 	lsl.w	r3, r1, r3
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	6a39      	ldr	r1, [r7, #32]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	431a      	orrs	r2, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059a:	2b00      	cmp	r3, #0
 800059c:	f000 80a9 	beq.w	80006f2 <HAL_GPIO_Init+0x2d2>
 80005a0:	4b4a      	ldr	r3, [pc, #296]	; (80006cc <HAL_GPIO_Init+0x2ac>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a49      	ldr	r2, [pc, #292]	; (80006cc <HAL_GPIO_Init+0x2ac>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b47      	ldr	r3, [pc, #284]	; (80006cc <HAL_GPIO_Init+0x2ac>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	4a45      	ldr	r2, [pc, #276]	; (80006d0 <HAL_GPIO_Init+0x2b0>)
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	089b      	lsrs	r3, r3, #2
 80005be:	3302      	adds	r3, #2
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	220f      	movs	r2, #15
 80005d0:	fa02 f303 	lsl.w	r3, r2, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	4013      	ands	r3, r2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a3d      	ldr	r2, [pc, #244]	; (80006d4 <HAL_GPIO_Init+0x2b4>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00d      	beq.n	8000600 <HAL_GPIO_Init+0x1e0>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <HAL_GPIO_Init+0x2b8>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <HAL_GPIO_Init+0x1dc>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a3b      	ldr	r2, [pc, #236]	; (80006dc <HAL_GPIO_Init+0x2bc>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <HAL_GPIO_Init+0x1d8>
 80005f4:	2302      	movs	r3, #2
 80005f6:	e004      	b.n	8000602 <HAL_GPIO_Init+0x1e2>
 80005f8:	2303      	movs	r3, #3
 80005fa:	e002      	b.n	8000602 <HAL_GPIO_Init+0x1e2>
 80005fc:	2301      	movs	r3, #1
 80005fe:	e000      	b.n	8000602 <HAL_GPIO_Init+0x1e2>
 8000600:	2300      	movs	r3, #0
 8000602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000604:	f002 0203 	and.w	r2, r2, #3
 8000608:	0092      	lsls	r2, r2, #2
 800060a:	4093      	lsls	r3, r2
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4313      	orrs	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	492f      	ldr	r1, [pc, #188]	; (80006d0 <HAL_GPIO_Init+0x2b0>)
 8000614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	3302      	adds	r3, #2
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000628:	2b00      	cmp	r3, #0
 800062a:	d006      	beq.n	800063a <HAL_GPIO_Init+0x21a>
 800062c:	4b2c      	ldr	r3, [pc, #176]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	492b      	ldr	r1, [pc, #172]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	4313      	orrs	r3, r2
 8000636:	600b      	str	r3, [r1, #0]
 8000638:	e006      	b.n	8000648 <HAL_GPIO_Init+0x228>
 800063a:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	43db      	mvns	r3, r3
 8000642:	4927      	ldr	r1, [pc, #156]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000644:	4013      	ands	r3, r2
 8000646:	600b      	str	r3, [r1, #0]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <HAL_GPIO_Init+0x242>
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	4921      	ldr	r1, [pc, #132]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	4313      	orrs	r3, r2
 800065e:	604b      	str	r3, [r1, #4]
 8000660:	e006      	b.n	8000670 <HAL_GPIO_Init+0x250>
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000664:	685a      	ldr	r2, [r3, #4]
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	43db      	mvns	r3, r3
 800066a:	491d      	ldr	r1, [pc, #116]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800066c:	4013      	ands	r3, r2
 800066e:	604b      	str	r3, [r1, #4]
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <HAL_GPIO_Init+0x26a>
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	4917      	ldr	r1, [pc, #92]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	4313      	orrs	r3, r2
 8000686:	608b      	str	r3, [r1, #8]
 8000688:	e006      	b.n	8000698 <HAL_GPIO_Init+0x278>
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	69bb      	ldr	r3, [r7, #24]
 8000690:	43db      	mvns	r3, r3
 8000692:	4913      	ldr	r1, [pc, #76]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 8000694:	4013      	ands	r3, r2
 8000696:	608b      	str	r3, [r1, #8]
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d01f      	beq.n	80006e4 <HAL_GPIO_Init+0x2c4>
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	490d      	ldr	r1, [pc, #52]	; (80006e0 <HAL_GPIO_Init+0x2c0>)
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	60cb      	str	r3, [r1, #12]
 80006b0:	e01f      	b.n	80006f2 <HAL_GPIO_Init+0x2d2>
 80006b2:	bf00      	nop
 80006b4:	10320000 	.word	0x10320000
 80006b8:	10310000 	.word	0x10310000
 80006bc:	10220000 	.word	0x10220000
 80006c0:	10210000 	.word	0x10210000
 80006c4:	10120000 	.word	0x10120000
 80006c8:	10110000 	.word	0x10110000
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010000 	.word	0x40010000
 80006d4:	40010800 	.word	0x40010800
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	40011000 	.word	0x40011000
 80006e0:	40010400 	.word	0x40010400
 80006e4:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_GPIO_Init+0x2f4>)
 80006e6:	68da      	ldr	r2, [r3, #12]
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4909      	ldr	r1, [pc, #36]	; (8000714 <HAL_GPIO_Init+0x2f4>)
 80006ee:	4013      	ands	r3, r2
 80006f0:	60cb      	str	r3, [r1, #12]
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	3301      	adds	r3, #1
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	f47f ae96 	bne.w	8000434 <HAL_GPIO_Init+0x14>
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	372c      	adds	r7, #44	; 0x2c
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40010400 	.word	0x40010400

08000718 <HAL_GPIO_WritePin>:
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	807b      	strh	r3, [r7, #2]
 8000724:	4613      	mov	r3, r2
 8000726:	707b      	strb	r3, [r7, #1]
 8000728:	787b      	ldrb	r3, [r7, #1]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <HAL_GPIO_WritePin+0x1e>
 800072e:	887a      	ldrh	r2, [r7, #2]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	e003      	b.n	800073e <HAL_GPIO_WritePin+0x26>
 8000736:	887b      	ldrh	r3, [r7, #2]
 8000738:	041a      	lsls	r2, r3, #16
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	611a      	str	r2, [r3, #16]
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_RCC_OscConfig>:
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d101      	bne.n	800075a <HAL_RCC_OscConfig+0x12>
 8000756:	2301      	movs	r3, #1
 8000758:	e272      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	2b00      	cmp	r3, #0
 8000764:	f000 8087 	beq.w	8000876 <HAL_RCC_OscConfig+0x12e>
 8000768:	4b92      	ldr	r3, [pc, #584]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f003 030c 	and.w	r3, r3, #12
 8000770:	2b04      	cmp	r3, #4
 8000772:	d00c      	beq.n	800078e <HAL_RCC_OscConfig+0x46>
 8000774:	4b8f      	ldr	r3, [pc, #572]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 030c 	and.w	r3, r3, #12
 800077c:	2b08      	cmp	r3, #8
 800077e:	d112      	bne.n	80007a6 <HAL_RCC_OscConfig+0x5e>
 8000780:	4b8c      	ldr	r3, [pc, #560]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800078c:	d10b      	bne.n	80007a6 <HAL_RCC_OscConfig+0x5e>
 800078e:	4b89      	ldr	r3, [pc, #548]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d06c      	beq.n	8000874 <HAL_RCC_OscConfig+0x12c>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d168      	bne.n	8000874 <HAL_RCC_OscConfig+0x12c>
 80007a2:	2301      	movs	r3, #1
 80007a4:	e24c      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ae:	d106      	bne.n	80007be <HAL_RCC_OscConfig+0x76>
 80007b0:	4b80      	ldr	r3, [pc, #512]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a7f      	ldr	r2, [pc, #508]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	e02e      	b.n	800081c <HAL_RCC_OscConfig+0xd4>
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10c      	bne.n	80007e0 <HAL_RCC_OscConfig+0x98>
 80007c6:	4b7b      	ldr	r3, [pc, #492]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a7a      	ldr	r2, [pc, #488]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	4b78      	ldr	r3, [pc, #480]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a77      	ldr	r2, [pc, #476]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e01d      	b.n	800081c <HAL_RCC_OscConfig+0xd4>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80007e8:	d10c      	bne.n	8000804 <HAL_RCC_OscConfig+0xbc>
 80007ea:	4b72      	ldr	r3, [pc, #456]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a71      	ldr	r2, [pc, #452]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f4:	6013      	str	r3, [r2, #0]
 80007f6:	4b6f      	ldr	r3, [pc, #444]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a6e      	ldr	r2, [pc, #440]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80007fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	e00b      	b.n	800081c <HAL_RCC_OscConfig+0xd4>
 8000804:	4b6b      	ldr	r3, [pc, #428]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a6a      	ldr	r2, [pc, #424]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 800080a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b68      	ldr	r3, [pc, #416]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a67      	ldr	r2, [pc, #412]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d013      	beq.n	800084c <HAL_RCC_OscConfig+0x104>
 8000824:	f7ff fcea 	bl	80001fc <HAL_GetTick>
 8000828:	6138      	str	r0, [r7, #16]
 800082a:	e008      	b.n	800083e <HAL_RCC_OscConfig+0xf6>
 800082c:	f7ff fce6 	bl	80001fc <HAL_GetTick>
 8000830:	4602      	mov	r2, r0
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	2b64      	cmp	r3, #100	; 0x64
 8000838:	d901      	bls.n	800083e <HAL_RCC_OscConfig+0xf6>
 800083a:	2303      	movs	r3, #3
 800083c:	e200      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 800083e:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d0f0      	beq.n	800082c <HAL_RCC_OscConfig+0xe4>
 800084a:	e014      	b.n	8000876 <HAL_RCC_OscConfig+0x12e>
 800084c:	f7ff fcd6 	bl	80001fc <HAL_GetTick>
 8000850:	6138      	str	r0, [r7, #16]
 8000852:	e008      	b.n	8000866 <HAL_RCC_OscConfig+0x11e>
 8000854:	f7ff fcd2 	bl	80001fc <HAL_GetTick>
 8000858:	4602      	mov	r2, r0
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b64      	cmp	r3, #100	; 0x64
 8000860:	d901      	bls.n	8000866 <HAL_RCC_OscConfig+0x11e>
 8000862:	2303      	movs	r3, #3
 8000864:	e1ec      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000866:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f0      	bne.n	8000854 <HAL_RCC_OscConfig+0x10c>
 8000872:	e000      	b.n	8000876 <HAL_RCC_OscConfig+0x12e>
 8000874:	bf00      	nop
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d063      	beq.n	800094a <HAL_RCC_OscConfig+0x202>
 8000882:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f003 030c 	and.w	r3, r3, #12
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00b      	beq.n	80008a6 <HAL_RCC_OscConfig+0x15e>
 800088e:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 030c 	and.w	r3, r3, #12
 8000896:	2b08      	cmp	r3, #8
 8000898:	d11c      	bne.n	80008d4 <HAL_RCC_OscConfig+0x18c>
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d116      	bne.n	80008d4 <HAL_RCC_OscConfig+0x18c>
 80008a6:	4b43      	ldr	r3, [pc, #268]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d005      	beq.n	80008be <HAL_RCC_OscConfig+0x176>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d001      	beq.n	80008be <HAL_RCC_OscConfig+0x176>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e1c0      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4939      	ldr	r1, [pc, #228]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80008ce:	4313      	orrs	r3, r2
 80008d0:	600b      	str	r3, [r1, #0]
 80008d2:	e03a      	b.n	800094a <HAL_RCC_OscConfig+0x202>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d020      	beq.n	800091e <HAL_RCC_OscConfig+0x1d6>
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <HAL_RCC_OscConfig+0x270>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	f7ff fc8b 	bl	80001fc <HAL_GetTick>
 80008e6:	6138      	str	r0, [r7, #16]
 80008e8:	e008      	b.n	80008fc <HAL_RCC_OscConfig+0x1b4>
 80008ea:	f7ff fc87 	bl	80001fc <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d901      	bls.n	80008fc <HAL_RCC_OscConfig+0x1b4>
 80008f8:	2303      	movs	r3, #3
 80008fa:	e1a1      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f0      	beq.n	80008ea <HAL_RCC_OscConfig+0x1a2>
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	4927      	ldr	r1, [pc, #156]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000918:	4313      	orrs	r3, r2
 800091a:	600b      	str	r3, [r1, #0]
 800091c:	e015      	b.n	800094a <HAL_RCC_OscConfig+0x202>
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_RCC_OscConfig+0x270>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	f7ff fc6a 	bl	80001fc <HAL_GetTick>
 8000928:	6138      	str	r0, [r7, #16]
 800092a:	e008      	b.n	800093e <HAL_RCC_OscConfig+0x1f6>
 800092c:	f7ff fc66 	bl	80001fc <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	2b02      	cmp	r3, #2
 8000938:	d901      	bls.n	800093e <HAL_RCC_OscConfig+0x1f6>
 800093a:	2303      	movs	r3, #3
 800093c:	e180      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1f0      	bne.n	800092c <HAL_RCC_OscConfig+0x1e4>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	2b00      	cmp	r3, #0
 8000954:	d03a      	beq.n	80009cc <HAL_RCC_OscConfig+0x284>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d019      	beq.n	8000992 <HAL_RCC_OscConfig+0x24a>
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_RCC_OscConfig+0x274>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	f7ff fc4a 	bl	80001fc <HAL_GetTick>
 8000968:	6138      	str	r0, [r7, #16]
 800096a:	e008      	b.n	800097e <HAL_RCC_OscConfig+0x236>
 800096c:	f7ff fc46 	bl	80001fc <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d901      	bls.n	800097e <HAL_RCC_OscConfig+0x236>
 800097a:	2303      	movs	r3, #3
 800097c:	e160      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_RCC_OscConfig+0x26c>)
 8000980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f0      	beq.n	800096c <HAL_RCC_OscConfig+0x224>
 800098a:	2001      	movs	r0, #1
 800098c:	f000 faa6 	bl	8000edc <RCC_Delay>
 8000990:	e01c      	b.n	80009cc <HAL_RCC_OscConfig+0x284>
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <HAL_RCC_OscConfig+0x274>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	f7ff fc30 	bl	80001fc <HAL_GetTick>
 800099c:	6138      	str	r0, [r7, #16]
 800099e:	e00f      	b.n	80009c0 <HAL_RCC_OscConfig+0x278>
 80009a0:	f7ff fc2c 	bl	80001fc <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d908      	bls.n	80009c0 <HAL_RCC_OscConfig+0x278>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e146      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	42420000 	.word	0x42420000
 80009bc:	42420480 	.word	0x42420480
 80009c0:	4b92      	ldr	r3, [pc, #584]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1e9      	bne.n	80009a0 <HAL_RCC_OscConfig+0x258>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80a6 	beq.w	8000b26 <HAL_RCC_OscConfig+0x3de>
 80009da:	2300      	movs	r3, #0
 80009dc:	75fb      	strb	r3, [r7, #23]
 80009de:	4b8b      	ldr	r3, [pc, #556]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10d      	bne.n	8000a06 <HAL_RCC_OscConfig+0x2be>
 80009ea:	4b88      	ldr	r3, [pc, #544]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a87      	ldr	r2, [pc, #540]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b85      	ldr	r3, [pc, #532]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	2301      	movs	r3, #1
 8000a04:	75fb      	strb	r3, [r7, #23]
 8000a06:	4b82      	ldr	r3, [pc, #520]	; (8000c10 <HAL_RCC_OscConfig+0x4c8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d118      	bne.n	8000a44 <HAL_RCC_OscConfig+0x2fc>
 8000a12:	4b7f      	ldr	r3, [pc, #508]	; (8000c10 <HAL_RCC_OscConfig+0x4c8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a7e      	ldr	r2, [pc, #504]	; (8000c10 <HAL_RCC_OscConfig+0x4c8>)
 8000a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	f7ff fbed 	bl	80001fc <HAL_GetTick>
 8000a22:	6138      	str	r0, [r7, #16]
 8000a24:	e008      	b.n	8000a38 <HAL_RCC_OscConfig+0x2f0>
 8000a26:	f7ff fbe9 	bl	80001fc <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	2b64      	cmp	r3, #100	; 0x64
 8000a32:	d901      	bls.n	8000a38 <HAL_RCC_OscConfig+0x2f0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e103      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000a38:	4b75      	ldr	r3, [pc, #468]	; (8000c10 <HAL_RCC_OscConfig+0x4c8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f0      	beq.n	8000a26 <HAL_RCC_OscConfig+0x2de>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d106      	bne.n	8000a5a <HAL_RCC_OscConfig+0x312>
 8000a4c:	4b6f      	ldr	r3, [pc, #444]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a6e      	ldr	r2, [pc, #440]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	6213      	str	r3, [r2, #32]
 8000a58:	e02d      	b.n	8000ab6 <HAL_RCC_OscConfig+0x36e>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10c      	bne.n	8000a7c <HAL_RCC_OscConfig+0x334>
 8000a62:	4b6a      	ldr	r3, [pc, #424]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a69      	ldr	r2, [pc, #420]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a68:	f023 0301 	bic.w	r3, r3, #1
 8000a6c:	6213      	str	r3, [r2, #32]
 8000a6e:	4b67      	ldr	r3, [pc, #412]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4a66      	ldr	r2, [pc, #408]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a74:	f023 0304 	bic.w	r3, r3, #4
 8000a78:	6213      	str	r3, [r2, #32]
 8000a7a:	e01c      	b.n	8000ab6 <HAL_RCC_OscConfig+0x36e>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	2b05      	cmp	r3, #5
 8000a82:	d10c      	bne.n	8000a9e <HAL_RCC_OscConfig+0x356>
 8000a84:	4b61      	ldr	r3, [pc, #388]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	4a60      	ldr	r2, [pc, #384]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6213      	str	r3, [r2, #32]
 8000a90:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	4a5d      	ldr	r2, [pc, #372]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6213      	str	r3, [r2, #32]
 8000a9c:	e00b      	b.n	8000ab6 <HAL_RCC_OscConfig+0x36e>
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a5a      	ldr	r2, [pc, #360]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000aa4:	f023 0301 	bic.w	r3, r3, #1
 8000aa8:	6213      	str	r3, [r2, #32]
 8000aaa:	4b58      	ldr	r3, [pc, #352]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a57      	ldr	r2, [pc, #348]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000ab0:	f023 0304 	bic.w	r3, r3, #4
 8000ab4:	6213      	str	r3, [r2, #32]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d015      	beq.n	8000aea <HAL_RCC_OscConfig+0x3a2>
 8000abe:	f7ff fb9d 	bl	80001fc <HAL_GetTick>
 8000ac2:	6138      	str	r0, [r7, #16]
 8000ac4:	e00a      	b.n	8000adc <HAL_RCC_OscConfig+0x394>
 8000ac6:	f7ff fb99 	bl	80001fc <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d901      	bls.n	8000adc <HAL_RCC_OscConfig+0x394>
 8000ad8:	2303      	movs	r3, #3
 8000ada:	e0b1      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000adc:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000ade:	6a1b      	ldr	r3, [r3, #32]
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0ee      	beq.n	8000ac6 <HAL_RCC_OscConfig+0x37e>
 8000ae8:	e014      	b.n	8000b14 <HAL_RCC_OscConfig+0x3cc>
 8000aea:	f7ff fb87 	bl	80001fc <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]
 8000af0:	e00a      	b.n	8000b08 <HAL_RCC_OscConfig+0x3c0>
 8000af2:	f7ff fb83 	bl	80001fc <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d901      	bls.n	8000b08 <HAL_RCC_OscConfig+0x3c0>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e09b      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000b08:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1ee      	bne.n	8000af2 <HAL_RCC_OscConfig+0x3aa>
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d105      	bne.n	8000b26 <HAL_RCC_OscConfig+0x3de>
 8000b1a:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a3b      	ldr	r2, [pc, #236]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8087 	beq.w	8000c3e <HAL_RCC_OscConfig+0x4f6>
 8000b30:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 030c 	and.w	r3, r3, #12
 8000b38:	2b08      	cmp	r3, #8
 8000b3a:	d061      	beq.n	8000c00 <HAL_RCC_OscConfig+0x4b8>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d146      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x48a>
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <HAL_RCC_OscConfig+0x4cc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	f7ff fb57 	bl	80001fc <HAL_GetTick>
 8000b4e:	6138      	str	r0, [r7, #16]
 8000b50:	e008      	b.n	8000b64 <HAL_RCC_OscConfig+0x41c>
 8000b52:	f7ff fb53 	bl	80001fc <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d901      	bls.n	8000b64 <HAL_RCC_OscConfig+0x41c>
 8000b60:	2303      	movs	r3, #3
 8000b62:	e06d      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f0      	bne.n	8000b52 <HAL_RCC_OscConfig+0x40a>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b78:	d108      	bne.n	8000b8c <HAL_RCC_OscConfig+0x444>
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	4921      	ldr	r1, [pc, #132]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a19      	ldr	r1, [r3, #32]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	491b      	ldr	r1, [pc, #108]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	604b      	str	r3, [r1, #4]
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <HAL_RCC_OscConfig+0x4cc>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	f7ff fb27 	bl	80001fc <HAL_GetTick>
 8000bae:	6138      	str	r0, [r7, #16]
 8000bb0:	e008      	b.n	8000bc4 <HAL_RCC_OscConfig+0x47c>
 8000bb2:	f7ff fb23 	bl	80001fc <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d901      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x47c>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e03d      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f0      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x46a>
 8000bd0:	e035      	b.n	8000c3e <HAL_RCC_OscConfig+0x4f6>
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_RCC_OscConfig+0x4cc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	f7ff fb10 	bl	80001fc <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0x4aa>
 8000be0:	f7ff fb0c 	bl	80001fc <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x4aa>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e026      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_RCC_OscConfig+0x4c4>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f0      	bne.n	8000be0 <HAL_RCC_OscConfig+0x498>
 8000bfe:	e01e      	b.n	8000c3e <HAL_RCC_OscConfig+0x4f6>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d107      	bne.n	8000c18 <HAL_RCC_OscConfig+0x4d0>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e019      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40007000 	.word	0x40007000
 8000c14:	42420060 	.word	0x42420060
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_RCC_OscConfig+0x500>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x4f2>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d001      	beq.n	8000c3e <HAL_RCC_OscConfig+0x4f6>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e000      	b.n	8000c40 <HAL_RCC_OscConfig+0x4f8>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_RCC_ClockConfig>:
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_RCC_ClockConfig+0x14>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e0d0      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000c60:	4b6a      	ldr	r3, [pc, #424]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0307 	and.w	r3, r3, #7
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d910      	bls.n	8000c90 <HAL_RCC_ClockConfig+0x44>
 8000c6e:	4b67      	ldr	r3, [pc, #412]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f023 0207 	bic.w	r2, r3, #7
 8000c76:	4965      	ldr	r1, [pc, #404]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
 8000c7e:	4b63      	ldr	r3, [pc, #396]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_ClockConfig+0x44>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e0b8      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0302 	and.w	r3, r3, #2
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d020      	beq.n	8000cde <HAL_RCC_ClockConfig+0x92>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d005      	beq.n	8000cb4 <HAL_RCC_ClockConfig+0x68>
 8000ca8:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	4a58      	ldr	r2, [pc, #352]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cb2:	6053      	str	r3, [r2, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x80>
 8000cc0:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000cca:	6053      	str	r3, [r2, #4]
 8000ccc:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	494d      	ldr	r1, [pc, #308]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	604b      	str	r3, [r1, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d040      	beq.n	8000d6c <HAL_RCC_ClockConfig+0x120>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d107      	bne.n	8000d02 <HAL_RCC_ClockConfig+0xb6>
 8000cf2:	4b47      	ldr	r3, [pc, #284]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d115      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xde>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e07f      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d107      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xce>
 8000d0a:	4b41      	ldr	r3, [pc, #260]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xde>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e073      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_RCC_ClockConfig+0xde>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e06b      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000d2a:	4b39      	ldr	r3, [pc, #228]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f023 0203 	bic.w	r2, r3, #3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	4936      	ldr	r1, [pc, #216]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
 8000d3c:	f7ff fa5e 	bl	80001fc <HAL_GetTick>
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	e00a      	b.n	8000d5a <HAL_RCC_ClockConfig+0x10e>
 8000d44:	f7ff fa5a 	bl	80001fc <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_ClockConfig+0x10e>
 8000d56:	2303      	movs	r3, #3
 8000d58:	e053      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 020c 	and.w	r2, r3, #12
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d1eb      	bne.n	8000d44 <HAL_RCC_ClockConfig+0xf8>
 8000d6c:	4b27      	ldr	r3, [pc, #156]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d210      	bcs.n	8000d9c <HAL_RCC_ClockConfig+0x150>
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 0207 	bic.w	r2, r3, #7
 8000d82:	4922      	ldr	r1, [pc, #136]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
 8000d8a:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <HAL_RCC_ClockConfig+0x1c0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d001      	beq.n	8000d9c <HAL_RCC_ClockConfig+0x150>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e032      	b.n	8000e02 <HAL_RCC_ClockConfig+0x1b6>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d008      	beq.n	8000dba <HAL_RCC_ClockConfig+0x16e>
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4916      	ldr	r1, [pc, #88]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	604b      	str	r3, [r1, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d009      	beq.n	8000dda <HAL_RCC_ClockConfig+0x18e>
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	490e      	ldr	r1, [pc, #56]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	604b      	str	r3, [r1, #4]
 8000dda:	f000 f821 	bl	8000e20 <HAL_RCC_GetSysClockFreq>
 8000dde:	4602      	mov	r2, r0
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_RCC_ClockConfig+0x1c4>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <HAL_RCC_ClockConfig+0x1c8>)
 8000dec:	5ccb      	ldrb	r3, [r1, r3]
 8000dee:	fa22 f303 	lsr.w	r3, r2, r3
 8000df2:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <HAL_RCC_ClockConfig+0x1cc>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_RCC_ClockConfig+0x1d0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9bc 	bl	8000178 <HAL_InitTick>
 8000e00:	2300      	movs	r3, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	40021000 	.word	0x40021000
 8000e14:	0800530c 	.word	0x0800530c
 8000e18:	2000002c 	.word	0x2000002c
 8000e1c:	20000000 	.word	0x20000000

08000e20 <HAL_RCC_GetSysClockFreq>:
 8000e20:	b490      	push	{r4, r7}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <HAL_RCC_GetSysClockFreq+0xac>)
 8000e28:	1d3c      	adds	r4, r7, #4
 8000e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e30:	f240 2301 	movw	r3, #513	; 0x201
 8000e34:	803b      	strh	r3, [r7, #0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d002      	beq.n	8000e60 <HAL_RCC_GetSysClockFreq+0x40>
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d003      	beq.n	8000e66 <HAL_RCC_GetSysClockFreq+0x46>
 8000e5e:	e02b      	b.n	8000eb8 <HAL_RCC_GetSysClockFreq+0x98>
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	e02b      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x9e>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3328      	adds	r3, #40	; 0x28
 8000e70:	443b      	add	r3, r7
 8000e72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d012      	beq.n	8000ea8 <HAL_RCC_GetSysClockFreq+0x88>
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	0c5b      	lsrs	r3, r3, #17
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	3328      	adds	r3, #40	; 0x28
 8000e8e:	443b      	add	r3, r7
 8000e90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e94:	61bb      	str	r3, [r7, #24]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e9a:	fb03 f202 	mul.w	r2, r3, r2
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea6:	e004      	b.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x92>
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	623b      	str	r3, [r7, #32]
 8000eb6:	e002      	b.n	8000ebe <HAL_RCC_GetSysClockFreq+0x9e>
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	bf00      	nop
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	080029ec 	.word	0x080029ec
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	007a1200 	.word	0x007a1200
 8000ed8:	003d0900 	.word	0x003d0900

08000edc <RCC_Delay>:
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <RCC_Delay+0x34>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <RCC_Delay+0x38>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	fb02 f303 	mul.w	r3, r2, r3
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	bf00      	nop
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	60fa      	str	r2, [r7, #12]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f9      	bne.n	8000ef8 <RCC_Delay+0x1c>
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	2000002c 	.word	0x2000002c
 8000f14:	10624dd3 	.word	0x10624dd3

08000f18 <HAL_SPI_Init>:
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_SPI_Init+0x12>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e076      	b.n	8001018 <HAL_SPI_Init+0x100>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d108      	bne.n	8000f44 <HAL_SPI_Init+0x2c>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000f3a:	d009      	beq.n	8000f50 <HAL_SPI_Init+0x38>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
 8000f42:	e005      	b.n	8000f50 <HAL_SPI_Init+0x38>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d106      	bne.n	8000f70 <HAL_SPI_Init+0x58>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f001 fc72 	bl	8002854 <HAL_SPI_MspInit>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2202      	movs	r2, #2
 8000f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd4:	ea42 0103 	orr.w	r1, r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	0c1a      	lsrs	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f002 0204 	and.w	r2, r2, #4
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	69da      	ldr	r2, [r3, #28]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001006:	61da      	str	r2, [r3, #28]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001016:	2300      	movs	r3, #0
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_SPI_Transmit>:
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	80fb      	strh	r3, [r7, #6]
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_SPI_Transmit+0x22>
 800103e:	2302      	movs	r3, #2
 8001040:	e126      	b.n	8001290 <HAL_SPI_Transmit+0x270>
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800104a:	f7ff f8d7 	bl	80001fc <HAL_GetTick>
 800104e:	61b8      	str	r0, [r7, #24]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	82fb      	strh	r3, [r7, #22]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b01      	cmp	r3, #1
 800105e:	d002      	beq.n	8001066 <HAL_SPI_Transmit+0x46>
 8001060:	2302      	movs	r3, #2
 8001062:	77fb      	strb	r3, [r7, #31]
 8001064:	e10b      	b.n	800127e <HAL_SPI_Transmit+0x25e>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <HAL_SPI_Transmit+0x52>
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_SPI_Transmit+0x58>
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]
 8001076:	e102      	b.n	800127e <HAL_SPI_Transmit+0x25e>
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2203      	movs	r2, #3
 800107c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	68ba      	ldr	r2, [r7, #8]
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	88fa      	ldrh	r2, [r7, #6]
 8001090:	869a      	strh	r2, [r3, #52]	; 0x34
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	86da      	strh	r2, [r3, #54]	; 0x36
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010be:	d10f      	bne.n	80010e0 <HAL_SPI_Transmit+0xc0>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ea:	2b40      	cmp	r3, #64	; 0x40
 80010ec:	d007      	beq.n	80010fe <HAL_SPI_Transmit+0xde>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001106:	d14b      	bne.n	80011a0 <HAL_SPI_Transmit+0x180>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <HAL_SPI_Transmit+0xf6>
 8001110:	8afb      	ldrh	r3, [r7, #22]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d13e      	bne.n	8001194 <HAL_SPI_Transmit+0x174>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	1c9a      	adds	r2, r3, #2
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001130:	b29b      	uxth	r3, r3
 8001132:	3b01      	subs	r3, #1
 8001134:	b29a      	uxth	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	86da      	strh	r2, [r3, #54]	; 0x36
 800113a:	e02b      	b.n	8001194 <HAL_SPI_Transmit+0x174>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d112      	bne.n	8001170 <HAL_SPI_Transmit+0x150>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	1c9a      	adds	r2, r3, #2
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	631a      	str	r2, [r3, #48]	; 0x30
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001164:	b29b      	uxth	r3, r3
 8001166:	3b01      	subs	r3, #1
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	86da      	strh	r2, [r3, #54]	; 0x36
 800116e:	e011      	b.n	8001194 <HAL_SPI_Transmit+0x174>
 8001170:	f7ff f844 	bl	80001fc <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d803      	bhi.n	8001188 <HAL_SPI_Transmit+0x168>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001186:	d102      	bne.n	800118e <HAL_SPI_Transmit+0x16e>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_SPI_Transmit+0x174>
 800118e:	2303      	movs	r3, #3
 8001190:	77fb      	strb	r3, [r7, #31]
 8001192:	e074      	b.n	800127e <HAL_SPI_Transmit+0x25e>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001198:	b29b      	uxth	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1ce      	bne.n	800113c <HAL_SPI_Transmit+0x11c>
 800119e:	e04c      	b.n	800123a <HAL_SPI_Transmit+0x21a>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <HAL_SPI_Transmit+0x18e>
 80011a8:	8afb      	ldrh	r3, [r7, #22]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d140      	bne.n	8001230 <HAL_SPI_Transmit+0x210>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	330c      	adds	r3, #12
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	631a      	str	r2, [r3, #48]	; 0x30
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80011d4:	e02c      	b.n	8001230 <HAL_SPI_Transmit+0x210>
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d113      	bne.n	800120c <HAL_SPI_Transmit+0x1ec>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	330c      	adds	r3, #12
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001200:	b29b      	uxth	r3, r3
 8001202:	3b01      	subs	r3, #1
 8001204:	b29a      	uxth	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	86da      	strh	r2, [r3, #54]	; 0x36
 800120a:	e011      	b.n	8001230 <HAL_SPI_Transmit+0x210>
 800120c:	f7fe fff6 	bl	80001fc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d803      	bhi.n	8001224 <HAL_SPI_Transmit+0x204>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001222:	d102      	bne.n	800122a <HAL_SPI_Transmit+0x20a>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_SPI_Transmit+0x210>
 800122a:	2303      	movs	r3, #3
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	e026      	b.n	800127e <HAL_SPI_Transmit+0x25e>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001234:	b29b      	uxth	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1cd      	bne.n	80011d6 <HAL_SPI_Transmit+0x1b6>
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	6839      	ldr	r1, [r7, #0]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f000 f8b2 	bl	80013a8 <SPI_EndRxTxTransaction>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_SPI_Transmit+0x230>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2220      	movs	r2, #32
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d10a      	bne.n	800126e <HAL_SPI_Transmit+0x24e>
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_SPI_Transmit+0x25c>
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
 800127a:	e000      	b.n	800127e <HAL_SPI_Transmit+0x25e>
 800127c:	bf00      	nop
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800128e:	7ffb      	ldrb	r3, [r7, #31]
 8001290:	4618      	mov	r0, r3
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <SPI_WaitFlagStateUntilTimeout>:
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	f7fe ffa8 	bl	80001fc <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	1a9b      	subs	r3, r3, r2
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	f7fe ffa0 	bl	80001fc <HAL_GetTick>
 80012bc:	61b8      	str	r0, [r7, #24]
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	0d1b      	lsrs	r3, r3, #20
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e054      	b.n	800137a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d6:	d050      	beq.n	800137a <SPI_WaitFlagStateUntilTimeout+0xe2>
 80012d8:	f7fe ff90 	bl	80001fc <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d902      	bls.n	80012ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d13d      	bne.n	800136a <SPI_WaitFlagStateUntilTimeout+0xd2>
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001306:	d111      	bne.n	800132c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001310:	d004      	beq.n	800131c <SPI_WaitFlagStateUntilTimeout+0x84>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	d107      	bne.n	800132c <SPI_WaitFlagStateUntilTimeout+0x94>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001334:	d10f      	bne.n	8001356 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001366:	2303      	movs	r3, #3
 8001368:	e017      	b.n	800139a <SPI_WaitFlagStateUntilTimeout+0x102>
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3b01      	subs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4013      	ands	r3, r2
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	429a      	cmp	r2, r3
 8001396:	d19b      	bne.n	80012d0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8001398:	2300      	movs	r3, #0
 800139a:	4618      	mov	r0, r3
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000002c 	.word	0x2000002c

080013a8 <SPI_EndRxTxTransaction>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2200      	movs	r2, #0
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ff6a 	bl	8001298 <SPI_WaitFlagStateUntilTimeout>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <SPI_EndRxTxTransaction+0x32>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
 80013d6:	2303      	movs	r3, #3
 80013d8:	e000      	b.n	80013dc <SPI_EndRxTxTransaction+0x34>
 80013da:	2300      	movs	r3, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <ST7735_GPIO_Init>:
static void ST7735_ExecuteCommandList(const uint8_t *addr);
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1);
static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor);

static void ST7735_GPIO_Init(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
//  GPIO_InitStruct.Pin = ST7735_RES_Pin|ST7735_DC_Pin|ST7735_CS_Pin|ST7735_BL_Pin;
//  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <ST7735_Reset>:

static void ST7735_Reset()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  TFT_RES_L();
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <ST7735_Reset+0x28>)
 80013fc:	f7ff f98c 	bl	8000718 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001400:	2014      	movs	r0, #20
 8001402:	f7fe ff05 	bl	8000210 <HAL_Delay>
  TFT_RES_H();
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <ST7735_Reset+0x28>)
 800140e:	f7ff f983 	bl	8000718 <HAL_GPIO_WritePin>
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40010c00 	.word	0x40010c00

0800141c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  TFT_DC_C();
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <ST7735_WriteCommand+0x2c>)
 800142e:	f7ff f973 	bl	8000718 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, &cmd, sizeof(cmd));
  //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001432:	1df9      	adds	r1, r7, #7
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	2201      	movs	r2, #1
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <ST7735_WriteCommand+0x30>)
 800143c:	f7ff fdf0 	bl	8001020 <HAL_SPI_Transmit>
#endif
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010c00 	.word	0x40010c00
 800144c:	20000054 	.word	0x20000054

08001450 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  TFT_DC_D();
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <ST7735_WriteData+0x30>)
 8001462:	f7ff f959 	bl	8000718 <HAL_GPIO_WritePin>
#ifdef USE_SPI_DMA
  HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
  while(hspi1.State == HAL_SPI_STATE_BUSY_TX);

#else
  HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b29a      	uxth	r2, r3
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <ST7735_WriteData+0x34>)
 8001472:	f7ff fdd5 	bl	8001020 <HAL_SPI_Transmit>
#endif
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010c00 	.word	0x40010c00
 8001484:	20000054 	.word	0x20000054

08001488 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	73fb      	strb	r3, [r7, #15]
    while(numCommands--)
 800149a:	e034      	b.n	8001506 <ST7735_ExecuteCommandList+0x7e>
    {
      uint8_t cmd = *addr++;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80014a6:	7afb      	ldrb	r3, [r7, #11]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ffb7 	bl	800141c <ST7735_WriteCommand>

        numArgs = *addr++;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80014b8:	7abb      	ldrb	r3, [r7, #10]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80014c2:	7abb      	ldrb	r3, [r7, #10]
 80014c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c8:	72bb      	strb	r3, [r7, #10]
        if(numArgs)
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <ST7735_ExecuteCommandList+0x5a>
        {
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	4619      	mov	r1, r3
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffbb 	bl	8001450 <ST7735_WriteData>
            addr += numArgs;
 80014da:	7abb      	ldrb	r3, [r7, #10]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	607b      	str	r3, [r7, #4]
        }

        if(ms)
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00e      	beq.n	8001506 <ST7735_ExecuteCommandList+0x7e>
        {
            ms = *addr++;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80014f2:	89bb      	ldrh	r3, [r7, #12]
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	d102      	bne.n	80014fe <ST7735_ExecuteCommandList+0x76>
 80014f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014fc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80014fe:	89bb      	ldrh	r3, [r7, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fe85 	bl	8000210 <HAL_Delay>
    while(numCommands--)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	1e5a      	subs	r2, r3, #1
 800150a:	73fa      	strb	r2, [r7, #15]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1c5      	bne.n	800149c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	4603      	mov	r3, r0
 8001530:	71bb      	strb	r3, [r7, #6]
 8001532:	460b      	mov	r3, r1
 8001534:	717b      	strb	r3, [r7, #5]
 8001536:	4613      	mov	r3, r2
 8001538:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800153a:	202a      	movs	r0, #42	; 0x2a
 800153c:	f7ff ff6e 	bl	800141c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001540:	2300      	movs	r3, #0
 8001542:	733b      	strb	r3, [r7, #12]
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <ST7735_SetAddressWindow+0x88>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4413      	add	r3, r2
 800154c:	b2db      	uxtb	r3, r3
 800154e:	737b      	strb	r3, [r7, #13]
 8001550:	2300      	movs	r3, #0
 8001552:	73bb      	strb	r3, [r7, #14]
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <ST7735_SetAddressWindow+0x88>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	797b      	ldrb	r3, [r7, #5]
 800155a:	4413      	add	r3, r2
 800155c:	b2db      	uxtb	r3, r3
 800155e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2104      	movs	r1, #4
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff72 	bl	8001450 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800156c:	202b      	movs	r0, #43	; 0x2b
 800156e:	f7ff ff55 	bl	800141c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <ST7735_SetAddressWindow+0x8c>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	79bb      	ldrb	r3, [r7, #6]
 8001578:	4413      	add	r3, r2
 800157a:	b2db      	uxtb	r3, r3
 800157c:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <ST7735_SetAddressWindow+0x8c>)
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	793b      	ldrb	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	b2db      	uxtb	r3, r3
 8001588:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2104      	movs	r1, #4
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001596:	202c      	movs	r0, #44	; 0x2c
 8001598:	f7ff ff40 	bl	800141c <ST7735_WriteCommand>
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	20000010 	.word	0x20000010
 80015a8:	20000011 	.word	0x20000011

080015ac <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80015ac:	b082      	sub	sp, #8
 80015ae:	b590      	push	{r4, r7, lr}
 80015b0:	b089      	sub	sp, #36	; 0x24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
 80015ba:	460b      	mov	r3, r1
 80015bc:	80bb      	strh	r3, [r7, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	b2d9      	uxtb	r1, r3
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80015d2:	4413      	add	r3, r2
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b2dc      	uxtb	r4, r3
 80015da:	88bb      	ldrh	r3, [r7, #4]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80015e2:	4413      	add	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	4622      	mov	r2, r4
 80015ec:	f7ff ff96 	bl	800151c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	e043      	b.n	800167e <ST7735_WriteChar+0xd2>
    {
        b = font.data[(ch - 32) * font.height + i];
 80015f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	3b20      	subs	r3, #32
 80015fc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4619      	mov	r1, r3
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	440b      	add	r3, r1
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	4413      	add	r3, r2
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++)
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e029      	b.n	800166c <ST7735_WriteChar+0xc0>
        {
            if((b << j) & 0x8000)
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <ST7735_WriteChar+0x9a>
            {
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001628:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	743b      	strb	r3, [r7, #16]
 8001632:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001634:	b2db      	uxtb	r3, r3
 8001636:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	2102      	movs	r1, #2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff06 	bl	8001450 <ST7735_WriteData>
 8001644:	e00f      	b.n	8001666 <ST7735_WriteChar+0xba>
            }
            else
            {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800164a:	0a1b      	lsrs	r3, r3, #8
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001656:	b2db      	uxtb	r3, r3
 8001658:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2102      	movs	r1, #2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fef5 	bl	8001450 <ST7735_WriteData>
        for(j = 0; j < font.width; j++)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	3301      	adds	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001670:	461a      	mov	r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4293      	cmp	r3, r2
 8001676:	d3cf      	bcc.n	8001618 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3301      	adds	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001682:	461a      	mov	r2, r3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4293      	cmp	r3, r2
 8001688:	d3b5      	bcc.n	80015f6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	3724      	adds	r7, #36	; 0x24
 8001690:	46bd      	mov	sp, r7
 8001692:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001696:	b002      	add	sp, #8
 8001698:	4770      	bx	lr
	...

0800169c <ST7735_Init>:

void ST7735_Init()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  ST7735_GPIO_Init();
 80016a0:	f7ff fea0 	bl	80013e4 <ST7735_GPIO_Init>
  TFT_CS_L();
 80016a4:	2200      	movs	r2, #0
 80016a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016aa:	480b      	ldr	r0, [pc, #44]	; (80016d8 <ST7735_Init+0x3c>)
 80016ac:	f7ff f834 	bl	8000718 <HAL_GPIO_WritePin>
    ST7735_Reset();
 80016b0:	f7ff fe9e 	bl	80013f0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <ST7735_Init+0x40>)
 80016b6:	f7ff fee7 	bl	8001488 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80016ba:	4809      	ldr	r0, [pc, #36]	; (80016e0 <ST7735_Init+0x44>)
 80016bc:	f7ff fee4 	bl	8001488 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80016c0:	4808      	ldr	r0, [pc, #32]	; (80016e4 <ST7735_Init+0x48>)
 80016c2:	f7ff fee1 	bl	8001488 <ST7735_ExecuteCommandList>
    TFT_CS_H();
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <ST7735_Init+0x3c>)
 80016ce:	f7ff f823 	bl	8000718 <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	08002a80 	.word	0x08002a80
 80016e0:	08002abc 	.word	0x08002abc
 80016e4:	08002acc 	.word	0x08002acc

080016e8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
 80016f2:	460b      	mov	r3, r1
 80016f4:	80bb      	strh	r3, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <ST7735_DrawPixel+0x84>)
 80016fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001702:	4293      	cmp	r3, r2
 8001704:	da2e      	bge.n	8001764 <ST7735_DrawPixel+0x7c>
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <ST7735_DrawPixel+0x88>)
 800170a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800170e:	4293      	cmp	r3, r2
 8001710:	da28      	bge.n	8001764 <ST7735_DrawPixel+0x7c>
        return;

    TFT_CS_L();
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001718:	4816      	ldr	r0, [pc, #88]	; (8001774 <ST7735_DrawPixel+0x8c>)
 800171a:	f7fe fffd 	bl	8000718 <HAL_GPIO_WritePin>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b2d8      	uxtb	r0, r3
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	b2d9      	uxtb	r1, r3
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	88bb      	ldrh	r3, [r7, #4]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3301      	adds	r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f7ff fef1 	bl	800151c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	0a1b      	lsrs	r3, r3, #8
 800173e:	b29b      	uxth	r3, r3
 8001740:	b2db      	uxtb	r3, r3
 8001742:	733b      	strb	r3, [r7, #12]
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	2102      	movs	r1, #2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe7d 	bl	8001450 <ST7735_WriteData>

    TFT_CS_H();
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <ST7735_DrawPixel+0x8c>)
 800175e:	f7fe ffdb 	bl	8000718 <HAL_GPIO_WritePin>
 8001762:	e000      	b.n	8001766 <ST7735_DrawPixel+0x7e>
        return;
 8001764:	bf00      	nop
}
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000000e 	.word	0x2000000e
 8001770:	2000000c 	.word	0x2000000c
 8001774:	40010c00 	.word	0x40010c00

08001778 <ST7735_DrawString>:

void ST7735_DrawString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8001778:	b082      	sub	sp, #8
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af04      	add	r7, sp, #16
 8001780:	603a      	str	r2, [r7, #0]
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	4603      	mov	r3, r0
 8001786:	80fb      	strh	r3, [r7, #6]
 8001788:	460b      	mov	r3, r1
 800178a:	80bb      	strh	r3, [r7, #4]
  TFT_CS_L();
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001792:	4825      	ldr	r0, [pc, #148]	; (8001828 <ST7735_DrawString+0xb0>)
 8001794:	f7fe ffc0 	bl	8000718 <HAL_GPIO_WritePin>

    while(*str)
 8001798:	e033      	b.n	8001802 <ST7735_DrawString+0x8a>
    {
        if(x + font.width >= _width)
 800179a:	88fb      	ldrh	r3, [r7, #6]
 800179c:	7d3a      	ldrb	r2, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <ST7735_DrawString+0xb4>)
 80017a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	db16      	blt.n	80017d8 <ST7735_DrawString+0x60>
        {
            x = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80017ae:	7d7b      	ldrb	r3, [r7, #21]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height)
 80017b8:	88bb      	ldrh	r3, [r7, #4]
 80017ba:	7d7a      	ldrb	r2, [r7, #21]
 80017bc:	4413      	add	r3, r2
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <ST7735_DrawString+0xb8>)
 80017c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017c4:	4293      	cmp	r3, r2
 80017c6:	da21      	bge.n	800180c <ST7735_DrawString+0x94>
            {
                break;
            }

            if(*str == ' ')
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d103      	bne.n	80017d8 <ST7735_DrawString+0x60>
            {
                // skip spaces in the beginning of the new line
                str++;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	603b      	str	r3, [r7, #0]
                continue;
 80017d6:	e014      	b.n	8001802 <ST7735_DrawString+0x8a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	88b9      	ldrh	r1, [r7, #4]
 80017de:	88f8      	ldrh	r0, [r7, #6]
 80017e0:	8c3b      	ldrh	r3, [r7, #32]
 80017e2:	9302      	str	r3, [sp, #8]
 80017e4:	8bbb      	ldrh	r3, [r7, #28]
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f7ff fedd 	bl	80015ac <ST7735_WriteChar>
        x += font.width;
 80017f2:	7d3b      	ldrb	r3, [r7, #20]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	4413      	add	r3, r2
 80017fa:	80fb      	strh	r3, [r7, #6]
        str++;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	603b      	str	r3, [r7, #0]
    while(*str)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1c7      	bne.n	800179a <ST7735_DrawString+0x22>
 800180a:	e000      	b.n	800180e <ST7735_DrawString+0x96>
                break;
 800180c:	bf00      	nop
    }
    TFT_CS_H();
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <ST7735_DrawString+0xb0>)
 8001816:	f7fe ff7f 	bl	8000718 <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001824:	b002      	add	sp, #8
 8001826:	4770      	bx	lr
 8001828:	40010c00 	.word	0x40010c00
 800182c:	2000000e 	.word	0x2000000e
 8001830:	2000000c 	.word	0x2000000c

08001834 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	80fb      	strh	r3, [r7, #6]
 8001846:	4603      	mov	r3, r0
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= _width) || (y >= _height)) return;
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <ST7735_FillRectangle+0x114>)
 8001856:	f9b2 2000 	ldrsh.w	r2, [r2]
 800185a:	4293      	cmp	r3, r2
 800185c:	da6f      	bge.n	800193e <ST7735_FillRectangle+0x10a>
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	4a3a      	ldr	r2, [pc, #232]	; (800194c <ST7735_FillRectangle+0x118>)
 8001862:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001866:	4293      	cmp	r3, r2
 8001868:	da69      	bge.n	800193e <ST7735_FillRectangle+0x10a>
    if((x + w - 1) >= _width) w = _width - x;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4413      	add	r3, r2
 8001870:	4a35      	ldr	r2, [pc, #212]	; (8001948 <ST7735_FillRectangle+0x114>)
 8001872:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001876:	4293      	cmp	r3, r2
 8001878:	dd06      	ble.n	8001888 <ST7735_FillRectangle+0x54>
 800187a:	4b33      	ldr	r3, [pc, #204]	; (8001948 <ST7735_FillRectangle+0x114>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	b29a      	uxth	r2, r3
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001888:	88ba      	ldrh	r2, [r7, #4]
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	4a2f      	ldr	r2, [pc, #188]	; (800194c <ST7735_FillRectangle+0x118>)
 8001890:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001894:	4293      	cmp	r3, r2
 8001896:	dd06      	ble.n	80018a6 <ST7735_FillRectangle+0x72>
 8001898:	4b2c      	ldr	r3, [pc, #176]	; (800194c <ST7735_FillRectangle+0x118>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	803b      	strh	r3, [r7, #0]

    TFT_CS_L();
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ac:	4828      	ldr	r0, [pc, #160]	; (8001950 <ST7735_FillRectangle+0x11c>)
 80018ae:	f7fe ff33 	bl	8000718 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	b2d8      	uxtb	r0, r3
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	b2d9      	uxtb	r1, r3
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b2dc      	uxtb	r4, r3
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	883b      	ldrh	r3, [r7, #0]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	3b01      	subs	r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4622      	mov	r2, r4
 80018dc:	f7ff fe1e 	bl	800151c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80018e0:	8c3b      	ldrh	r3, [r7, #32]
 80018e2:	0a1b      	lsrs	r3, r3, #8
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	733b      	strb	r3, [r7, #12]
 80018ea:	8c3b      	ldrh	r3, [r7, #32]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	737b      	strb	r3, [r7, #13]
    TFT_DC_D();
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f6:	4816      	ldr	r0, [pc, #88]	; (8001950 <ST7735_FillRectangle+0x11c>)
 80018f8:	f7fe ff0e 	bl	8000718 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--)
 80018fc:	883b      	ldrh	r3, [r7, #0]
 80018fe:	80bb      	strh	r3, [r7, #4]
 8001900:	e013      	b.n	800192a <ST7735_FillRectangle+0xf6>
    {
        for(x = w; x > 0; x--)
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	e00a      	b.n	800191e <ST7735_FillRectangle+0xea>
        {
#ifdef USE_SPI_DMA
          HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, data, sizeof(data));
          //while(hspi1.State == HAL_SPI_STATE_BUSY_TX);
#else
          HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001908:	f107 010c 	add.w	r1, r7, #12
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	2202      	movs	r2, #2
 8001912:	4810      	ldr	r0, [pc, #64]	; (8001954 <ST7735_FillRectangle+0x120>)
 8001914:	f7ff fb84 	bl	8001020 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--)
 8001918:	88fb      	ldrh	r3, [r7, #6]
 800191a:	3b01      	subs	r3, #1
 800191c:	80fb      	strh	r3, [r7, #6]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f1      	bne.n	8001908 <ST7735_FillRectangle+0xd4>
    for(y = h; y > 0; y--)
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	88bb      	ldrh	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e8      	bne.n	8001902 <ST7735_FillRectangle+0xce>
#endif
        }
    }
    TFT_CS_H();
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4806      	ldr	r0, [pc, #24]	; (8001950 <ST7735_FillRectangle+0x11c>)
 8001938:	f7fe feee 	bl	8000718 <HAL_GPIO_WritePin>
 800193c:	e000      	b.n	8001940 <ST7735_FillRectangle+0x10c>
    if((x >= _width) || (y >= _height)) return;
 800193e:	bf00      	nop
}
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	2000000e 	.word	0x2000000e
 800194c:	2000000c 	.word	0x2000000c
 8001950:	40010c00 	.word	0x40010c00
 8001954:	20000054 	.word	0x20000054

08001958 <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af02      	add	r7, sp, #8
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, _width, _height, color);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <ST7735_FillScreen+0x30>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <ST7735_FillScreen+0x34>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	b299      	uxth	r1, r3
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	460b      	mov	r3, r1
 8001978:	2100      	movs	r1, #0
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ff5a 	bl	8001834 <ST7735_FillRectangle>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000000e 	.word	0x2000000e
 800198c:	2000000c 	.word	0x2000000c

08001990 <ST7735_Backlight_On>:
    ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
    TFT_CS_H();
}

void ST7735_Backlight_On(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  TFT_BL_H();
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <ST7735_Backlight_On+0x14>)
 800199c:	f7fe febc 	bl	8000718 <HAL_GPIO_WritePin>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40010c00 	.word	0x40010c00

080019a8 <ST7735_DrawCircle>:
/***************************************************************************************
** Function name:           drawCircle
** Description:             Draw a circle outline
***************************************************************************************/
void ST7735_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
  int16_t f = 1 - r;
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	f1c3 0301 	rsb	r3, r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	81fb      	strh	r3, [r7, #14]
  int16_t ddF_x = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	81bb      	strh	r3, [r7, #12]
  int16_t ddF_y = - r - r;
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	425b      	negs	r3, r3
 80019d8:	b29a      	uxth	r2, r3
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	817b      	strh	r3, [r7, #10]
  int16_t x = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	813b      	strh	r3, [r7, #8]

  ST7735_DrawPixel(x0 + r, y0  , color);
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	4413      	add	r3, r2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	88b9      	ldrh	r1, [r7, #4]
 80019f0:	883a      	ldrh	r2, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fe78 	bl	80016e8 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0 - r, y0  , color);
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	88b9      	ldrh	r1, [r7, #4]
 8001a02:	883a      	ldrh	r2, [r7, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe6f 	bl	80016e8 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 - r, color);
 8001a0a:	88f8      	ldrh	r0, [r7, #6]
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	887b      	ldrh	r3, [r7, #2]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	883a      	ldrh	r2, [r7, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff fe66 	bl	80016e8 <ST7735_DrawPixel>
  ST7735_DrawPixel(x0  , y0 + r, color);
 8001a1c:	88f8      	ldrh	r0, [r7, #6]
 8001a1e:	88ba      	ldrh	r2, [r7, #4]
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4413      	add	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	883a      	ldrh	r2, [r7, #0]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff fe5d 	bl	80016e8 <ST7735_DrawPixel>

  while (x < r)
 8001a2e:	e081      	b.n	8001b34 <ST7735_DrawCircle+0x18c>
  {
    if (f >= 0)
 8001a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0e      	blt.n	8001a56 <ST7735_DrawCircle+0xae>
    {
      r--;
 8001a38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	807b      	strh	r3, [r7, #2]
      ddF_y += 2;
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	3302      	adds	r3, #2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	817b      	strh	r3, [r7, #10]
      f += ddF_y;
 8001a4c:	89fa      	ldrh	r2, [r7, #14]
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	4413      	add	r3, r2
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	81fb      	strh	r3, [r7, #14]
    }
    x++;
 8001a56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	813b      	strh	r3, [r7, #8]
    ddF_x += 2;
 8001a62:	89bb      	ldrh	r3, [r7, #12]
 8001a64:	3302      	adds	r3, #2
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	81bb      	strh	r3, [r7, #12]
    f += ddF_x;
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	89bb      	ldrh	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	81fb      	strh	r3, [r7, #14]

    ST7735_DrawPixel(x0 + x, y0 + r, color);
 8001a74:	88fa      	ldrh	r2, [r7, #6]
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	4413      	add	r3, r2
 8001a7a:	b298      	uxth	r0, r3
 8001a7c:	88ba      	ldrh	r2, [r7, #4]
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	4413      	add	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	883a      	ldrh	r2, [r7, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7ff fe2e 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 + r, color);
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	893b      	ldrh	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b298      	uxth	r0, r3
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	883a      	ldrh	r2, [r7, #0]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff fe22 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - x, y0 - r, color);
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b298      	uxth	r0, r3
 8001aac:	88ba      	ldrh	r2, [r7, #4]
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	883a      	ldrh	r2, [r7, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff fe16 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + x, y0 - r, color);
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b298      	uxth	r0, r3
 8001ac4:	88ba      	ldrh	r2, [r7, #4]
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	883a      	ldrh	r2, [r7, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff fe0a 	bl	80016e8 <ST7735_DrawPixel>

    ST7735_DrawPixel(x0 + r, y0 + x, color);
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b298      	uxth	r0, r3
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	893b      	ldrh	r3, [r7, #8]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	883a      	ldrh	r2, [r7, #0]
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff fdfe 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 + x, color);
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b298      	uxth	r0, r3
 8001af4:	88ba      	ldrh	r2, [r7, #4]
 8001af6:	893b      	ldrh	r3, [r7, #8]
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	883a      	ldrh	r2, [r7, #0]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fdf2 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 - r, y0 - x, color);
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b298      	uxth	r0, r3
 8001b0c:	88ba      	ldrh	r2, [r7, #4]
 8001b0e:	893b      	ldrh	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff fde6 	bl	80016e8 <ST7735_DrawPixel>
    ST7735_DrawPixel(x0 + r, y0 - x, color);
 8001b1c:	88fa      	ldrh	r2, [r7, #6]
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	4413      	add	r3, r2
 8001b22:	b298      	uxth	r0, r3
 8001b24:	88ba      	ldrh	r2, [r7, #4]
 8001b26:	893b      	ldrh	r3, [r7, #8]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	883a      	ldrh	r2, [r7, #0]
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff fdda 	bl	80016e8 <ST7735_DrawPixel>
  while (x < r)
 8001b34:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f6ff af77 	blt.w	8001a30 <ST7735_DrawCircle+0x88>
  }
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <ST7735_FillTriangle>:
** Function name:           fillTriangle
** Description:             Draw a filled triangle using 3 arbitrary points
***************************************************************************************/
// Fill a triangle - original Adafruit function works well and code footprint is small
void ST7735_FillTriangle( int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b08d      	sub	sp, #52	; 0x34
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1)
 8001b6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dd0b      	ble.n	8001b8e <ST7735_FillTriangle+0x42>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b7a:	883b      	ldrh	r3, [r7, #0]
 8001b7c:	80bb      	strh	r3, [r7, #4]
 8001b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b80:	803b      	strh	r3, [r7, #0]
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	843b      	strh	r3, [r7, #32]
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	8c3b      	ldrh	r3, [r7, #32]
 8001b8c:	807b      	strh	r3, [r7, #2]
  }

  if (y1 > y2)
 8001b8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001b92:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001b96:	429a      	cmp	r2, r3
 8001b98:	dd0f      	ble.n	8001bba <ST7735_FillTriangle+0x6e>
  {
    SWAP_INT16_T(y2, y1); SWAP_INT16_T(x2, x1);
 8001b9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b9e:	83fb      	strh	r3, [r7, #30]
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001ba6:	8bfb      	ldrh	r3, [r7, #30]
 8001ba8:	803b      	strh	r3, [r7, #0]
 8001baa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001bae:	83bb      	strh	r3, [r7, #28]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8001bb6:	8bbb      	ldrh	r3, [r7, #28]
 8001bb8:	807b      	strh	r3, [r7, #2]
  }

  if (y0 > y1)
 8001bba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001bbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dd0b      	ble.n	8001bde <ST7735_FillTriangle+0x92>
  {
    SWAP_INT16_T(y0, y1); SWAP_INT16_T(x0, x1);
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	837b      	strh	r3, [r7, #26]
 8001bca:	883b      	ldrh	r3, [r7, #0]
 8001bcc:	80bb      	strh	r3, [r7, #4]
 8001bce:	8b7b      	ldrh	r3, [r7, #26]
 8001bd0:	803b      	strh	r3, [r7, #0]
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	833b      	strh	r3, [r7, #24]
 8001bd6:	887b      	ldrh	r3, [r7, #2]
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	8b3b      	ldrh	r3, [r7, #24]
 8001bdc:	807b      	strh	r3, [r7, #2]
  }

  if (y0 == y2)
 8001bde:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001be2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d137      	bne.n	8001c5a <ST7735_FillTriangle+0x10e>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x0;
 8001bea:	88fb      	ldrh	r3, [r7, #6]
 8001bec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001bee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x1 < a)      a = x1;
 8001bf2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001bf6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	da02      	bge.n	8001c04 <ST7735_FillTriangle+0xb8>
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c02:	e007      	b.n	8001c14 <ST7735_FillTriangle+0xc8>
    else if (x1 > b) b = x1;
 8001c04:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c08:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dd01      	ble.n	8001c14 <ST7735_FillTriangle+0xc8>
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (x2 < a)      a = x2;
 8001c14:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001c18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	da03      	bge.n	8001c28 <ST7735_FillTriangle+0xdc>
 8001c20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001c26:	e008      	b.n	8001c3a <ST7735_FillTriangle+0xee>
    else if (x2 > b) b = x2;
 8001c28:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8001c2c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dd02      	ble.n	8001c3a <ST7735_FillTriangle+0xee>
 8001c34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y0, b - a + 1, color);
 8001c3a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001c3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b21a      	sxth	r2, r3
 8001c48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c4c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c50:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001c54:	f000 f9c8 	bl	8001fe8 <ST7735_DrawFastHLine>
    return;
 8001c58:	e0da      	b.n	8001e10 <ST7735_FillTriangle+0x2c4>
  }

  int16_t
  dx01 = x1 - x0,
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	82fb      	strh	r3, [r7, #22]
  dy01 = y1 - y0,
 8001c64:	883a      	ldrh	r2, [r7, #0]
 8001c66:	88bb      	ldrh	r3, [r7, #4]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	82bb      	strh	r3, [r7, #20]
  dx02 = x2 - x0,
 8001c6e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	827b      	strh	r3, [r7, #18]
  dy02 = y2 - y0,
 8001c7a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001c7e:	88bb      	ldrh	r3, [r7, #4]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	823b      	strh	r3, [r7, #16]
  dx12 = x2 - x1,
 8001c86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	81fb      	strh	r3, [r7, #14]
  dy12 = y2 - y1,
 8001c92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001c96:	883b      	ldrh	r3, [r7, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if (y1 == y2) last = y1;  // Include y1 scanline
 8001ca6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001caa:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d102      	bne.n	8001cb8 <ST7735_FillTriangle+0x16c>
 8001cb2:	883b      	ldrh	r3, [r7, #0]
 8001cb4:	853b      	strh	r3, [r7, #40]	; 0x28
 8001cb6:	e003      	b.n	8001cc0 <ST7735_FillTriangle+0x174>
  else         last = y1 - 1; // Skip it
 8001cb8:	883b      	ldrh	r3, [r7, #0]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	853b      	strh	r3, [r7, #40]	; 0x28

  for (y = y0; y <= last; y++)
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001cc4:	e040      	b.n	8001d48 <ST7735_FillTriangle+0x1fc>
  {
    a   = x0 + sa / dy01;
 8001cc6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001cca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001cdc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001ce0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ce4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	4413      	add	r3, r2
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8001cf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cfe:	8a7b      	ldrh	r3, [r7, #18]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001d06:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001d0a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dd05      	ble.n	8001d1e <ST7735_FillTriangle+0x1d2>
 8001d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d14:	813b      	strh	r3, [r7, #8]
 8001d16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001d1a:	893b      	ldrh	r3, [r7, #8]
 8001d1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001d1e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001d20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001d30:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001d34:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001d38:	f000 f956 	bl	8001fe8 <ST7735_DrawFastHLine>
  for (y = y0; y <= last; y++)
 8001d3c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001d48:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001d4c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d50:	429a      	cmp	r2, r3
 8001d52:	ddb8      	ble.n	8001cc6 <ST7735_FillTriangle+0x17a>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
 8001d54:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001d58:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	89fa      	ldrh	r2, [r7, #14]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y0);
 8001d6a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001d6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	8a7a      	ldrh	r2, [r7, #18]
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y2; y++)
 8001d80:	e040      	b.n	8001e04 <ST7735_FillTriangle+0x2b8>
  {
    a   = x1 + sa / dy12;
 8001d82:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001d86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x0 + sb / dy02;
 8001d98:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001d9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	4413      	add	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 8001dae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8001db8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001dba:	8a7b      	ldrh	r3, [r7, #18]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (a > b) SWAP_INT16_T(a, b);
 8001dc2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001dc6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	dd05      	ble.n	8001dda <ST7735_FillTriangle+0x28e>
 8001dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd0:	817b      	strh	r3, [r7, #10]
 8001dd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001dd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    ST7735_DrawFastHLine(a, y, b - a + 1, color);
 8001dda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001dec:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8001df0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001df4:	f000 f8f8 	bl	8001fe8 <ST7735_DrawFastHLine>
  for (; y <= y2; y++)
 8001df8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001e04:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001e08:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	ddb8      	ble.n	8001d82 <ST7735_FillTriangle+0x236>
  }
}
 8001e10:	3734      	adds	r7, #52	; 0x34
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd90      	pop	{r4, r7, pc}

08001e16 <ST7735_DrawLine>:
** Description:             draw a line between 2 arbitrary points
***************************************************************************************/

// Slower but more compact line drawing function
void ST7735_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001e16:	b590      	push	{r4, r7, lr}
 8001e18:	b089      	sub	sp, #36	; 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	4608      	mov	r0, r1
 8001e20:	4611      	mov	r1, r2
 8001e22:	461a      	mov	r2, r3
 8001e24:	4623      	mov	r3, r4
 8001e26:	80fb      	strh	r3, [r7, #6]
 8001e28:	4603      	mov	r3, r0
 8001e2a:	80bb      	strh	r3, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001e34:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001e38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e42:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e46:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bfb8      	it	lt
 8001e54:	425b      	neglt	r3, r3
 8001e56:	429a      	cmp	r2, r3
 8001e58:	bfcc      	ite	gt
 8001e5a:	2301      	movgt	r3, #1
 8001e5c:	2300      	movle	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	837b      	strh	r3, [r7, #26]
  if (steep)
 8001e62:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <ST7735_DrawLine+0x6c>
  {
    SWAP_INT16_T(x0, y0);
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	833b      	strh	r3, [r7, #24]
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	8b3b      	ldrh	r3, [r7, #24]
 8001e74:	80bb      	strh	r3, [r7, #4]
    SWAP_INT16_T(x1, y1);
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	82fb      	strh	r3, [r7, #22]
 8001e7a:	883b      	ldrh	r3, [r7, #0]
 8001e7c:	807b      	strh	r3, [r7, #2]
 8001e7e:	8afb      	ldrh	r3, [r7, #22]
 8001e80:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8001e82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dd0b      	ble.n	8001ea6 <ST7735_DrawLine+0x90>
  {
    SWAP_INT16_T(x0, x1);
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	82bb      	strh	r3, [r7, #20]
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	80fb      	strh	r3, [r7, #6]
 8001e96:	8abb      	ldrh	r3, [r7, #20]
 8001e98:	807b      	strh	r3, [r7, #2]
    SWAP_INT16_T(y0, y1);
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	827b      	strh	r3, [r7, #18]
 8001e9e:	883b      	ldrh	r3, [r7, #0]
 8001ea0:	80bb      	strh	r3, [r7, #4]
 8001ea2:	8a7b      	ldrh	r3, [r7, #18]
 8001ea4:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8001eb0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001eb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bfb8      	it	lt
 8001ebe:	425b      	neglt	r3, r3
 8001ec0:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8001ec2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ec6:	0fda      	lsrs	r2, r3, #31
 8001ec8:	4413      	add	r3, r2
 8001eca:	105b      	asrs	r3, r3, #1
 8001ecc:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8001ece:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ed2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	da02      	bge.n	8001ee0 <ST7735_DrawLine+0xca>
  {
    ystep = 1;
 8001eda:	2301      	movs	r3, #1
 8001edc:	83bb      	strh	r3, [r7, #28]
 8001ede:	e02d      	b.n	8001f3c <ST7735_DrawLine+0x126>
  }
  else
  {
    ystep = -1;
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8001ee6:	e029      	b.n	8001f3c <ST7735_DrawLine+0x126>
  {
    if (steep)
 8001ee8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <ST7735_DrawLine+0xe8>
    {
      ST7735_DrawPixel(y0, x0, color);
 8001ef0:	88bb      	ldrh	r3, [r7, #4]
 8001ef2:	88f9      	ldrh	r1, [r7, #6]
 8001ef4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fbf6 	bl	80016e8 <ST7735_DrawPixel>
 8001efc:	e005      	b.n	8001f0a <ST7735_DrawLine+0xf4>
    }
    else
    {
      ST7735_DrawPixel(x0, y0, color);
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	88b9      	ldrh	r1, [r7, #4]
 8001f02:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fbef 	bl	80016e8 <ST7735_DrawPixel>
    }
    err -= dy;
 8001f0a:	8bfa      	ldrh	r2, [r7, #30]
 8001f0c:	89fb      	ldrh	r3, [r7, #14]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8001f14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da09      	bge.n	8001f30 <ST7735_DrawLine+0x11a>
    {
      y0 += ystep;
 8001f1c:	88ba      	ldrh	r2, [r7, #4]
 8001f1e:	8bbb      	ldrh	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8001f26:	8bfa      	ldrh	r2, [r7, #30]
 8001f28:	8a3b      	ldrh	r3, [r7, #16]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8001f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	80fb      	strh	r3, [r7, #6]
 8001f3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	ddcf      	ble.n	8001ee8 <ST7735_DrawLine+0xd2>
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
	...

08001f54 <ST7735_DrawFastVLine>:
/***************************************************************************************
** Function name:           drawFastVLine
** Description:             draw a vertical line
***************************************************************************************/
void ST7735_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af02      	add	r7, sp, #8
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	4608      	mov	r0, r1
 8001f5e:	4611      	mov	r1, r2
 8001f60:	461a      	mov	r2, r3
 8001f62:	4623      	mov	r3, r4
 8001f64:	80fb      	strh	r3, [r7, #6]
 8001f66:	4603      	mov	r3, r0
 8001f68:	80bb      	strh	r3, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <ST7735_DrawFastVLine+0x8c>)
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	da2b      	bge.n	8001fd8 <ST7735_DrawFastVLine+0x84>
 8001f80:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <ST7735_DrawFastVLine+0x90>)
 8001f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	da24      	bge.n	8001fd8 <ST7735_DrawFastVLine+0x84>
  if ((y + h - 1) >= _height) h = _height - y;
 8001f8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <ST7735_DrawFastVLine+0x90>)
 8001f9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	dd07      	ble.n	8001fb2 <ST7735_DrawFastVLine+0x5e>
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <ST7735_DrawFastVLine+0x90>)
 8001fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x, y + h - 1, color);
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b21c      	sxth	r4, r3
 8001fc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fc4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001fc8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	f7ff ff20 	bl	8001e16 <ST7735_DrawLine>
 8001fd6:	e000      	b.n	8001fda <ST7735_DrawFastVLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 8001fd8:	bf00      	nop
}
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}
 8001fe0:	2000000e 	.word	0x2000000e
 8001fe4:	2000000c 	.word	0x2000000c

08001fe8 <ST7735_DrawFastHLine>:
/***************************************************************************************
** Function name:           drawFastHLine
** Description:             draw a horizontal line
***************************************************************************************/
void ST7735_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	4604      	mov	r4, r0
 8001ff0:	4608      	mov	r0, r1
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4623      	mov	r3, r4
 8001ff8:	80fb      	strh	r3, [r7, #6]
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80bb      	strh	r3, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	803b      	strh	r3, [r7, #0]
  // Rudimentary clipping
  if ((x >= _width) || (y >= _height)) return;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <ST7735_DrawFastHLine+0x8c>)
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002010:	429a      	cmp	r2, r3
 8002012:	da2b      	bge.n	800206c <ST7735_DrawFastHLine+0x84>
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <ST7735_DrawFastHLine+0x90>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	da24      	bge.n	800206c <ST7735_DrawFastHLine+0x84>
  if ((x + w - 1) >= _width)  w = _width - x;
 8002022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002026:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800202a:	4413      	add	r3, r2
 800202c:	4a11      	ldr	r2, [pc, #68]	; (8002074 <ST7735_DrawFastHLine+0x8c>)
 800202e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002032:	4293      	cmp	r3, r2
 8002034:	dd07      	ble.n	8002046 <ST7735_DrawFastHLine+0x5e>
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <ST7735_DrawFastHLine+0x8c>)
 8002038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203c:	b29a      	uxth	r2, r3
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b29b      	uxth	r3, r3
 8002044:	807b      	strh	r3, [r7, #2]

  ST7735_DrawLine(x, y, x + w - 1, y, color);
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4413      	add	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21a      	sxth	r2, r3
 8002054:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002058:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800205c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002060:	883b      	ldrh	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4623      	mov	r3, r4
 8002066:	f7ff fed6 	bl	8001e16 <ST7735_DrawLine>
 800206a:	e000      	b.n	800206e <ST7735_DrawFastHLine+0x86>
  if ((x >= _width) || (y >= _height)) return;
 800206c:	bf00      	nop
}
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	2000000e 	.word	0x2000000e
 8002078:	2000000c 	.word	0x2000000c

0800207c <ST7735_SetRotation>:
/***************************************************************************************
** Function name:           setRotation
** Description:             rotate the screen orientation m = 0-3
***************************************************************************************/
void ST7735_SetRotation(uint8_t m)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  _value_rotation = m % 4;
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <ST7735_SetRotation+0x13c>)
 8002090:	701a      	strb	r2, [r3, #0]

  TFT_CS_L();
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002098:	4848      	ldr	r0, [pc, #288]	; (80021bc <ST7735_SetRotation+0x140>)
 800209a:	f7fe fb3d 	bl	8000718 <HAL_GPIO_WritePin>

  ST7735_WriteCommand(ST7735_MADCTL);
 800209e:	2036      	movs	r0, #54	; 0x36
 80020a0:	f7ff f9bc 	bl	800141c <ST7735_WriteCommand>

  switch (_value_rotation)
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <ST7735_SetRotation+0x13c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d87b      	bhi.n	80021a4 <ST7735_SetRotation+0x128>
 80020ac:	a201      	add	r2, pc, #4	; (adr r2, 80020b4 <ST7735_SetRotation+0x38>)
 80020ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b2:	bf00      	nop
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	08002101 	.word	0x08002101
 80020bc:	0800213d 	.word	0x0800213d
 80020c0:	08002169 	.word	0x08002169
  {
    case 0:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[1] | _data_rotation[3]);
 80020c4:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <ST7735_SetRotation+0x144>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <ST7735_SetRotation+0x144>)
 80020ca:	785b      	ldrb	r3, [r3, #1]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <ST7735_SetRotation+0x144>)
 80020d2:	78db      	ldrb	r3, [r3, #3]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]
      ST7735_WriteData(&d_r, sizeof(d_r));
 80020da:	f107 030f 	add.w	r3, r7, #15
 80020de:	2101      	movs	r1, #1
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff f9b5 	bl	8001450 <ST7735_WriteData>
        _width  = ST7735_WIDTH;
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <ST7735_SetRotation+0x148>)
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	801a      	strh	r2, [r3, #0]
        _height = ST7735_HEIGHT;
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <ST7735_SetRotation+0x14c>)
 80020ee:	22a0      	movs	r2, #160	; 0xa0
 80020f0:	801a      	strh	r2, [r3, #0]
        _xstart = ST7735_XSTART;
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <ST7735_SetRotation+0x150>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	701a      	strb	r2, [r3, #0]
    _ystart = ST7735_YSTART;
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <ST7735_SetRotation+0x154>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
    }
     break;
 80020fe:	e051      	b.n	80021a4 <ST7735_SetRotation+0x128>
    case 1:
    {
      uint8_t d_r = (_data_rotation[1] | _data_rotation[2] | _data_rotation[3]);
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <ST7735_SetRotation+0x144>)
 8002102:	785a      	ldrb	r2, [r3, #1]
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <ST7735_SetRotation+0x144>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	4313      	orrs	r3, r2
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <ST7735_SetRotation+0x144>)
 800210e:	78db      	ldrb	r3, [r3, #3]
 8002110:	4313      	orrs	r3, r2
 8002112:	b2db      	uxtb	r3, r3
 8002114:	73bb      	strb	r3, [r7, #14]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8002116:	f107 030e 	add.w	r3, r7, #14
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f997 	bl	8001450 <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <ST7735_SetRotation+0x148>)
 8002124:	22a0      	movs	r2, #160	; 0xa0
 8002126:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <ST7735_SetRotation+0x14c>)
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <ST7735_SetRotation+0x150>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 8002134:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <ST7735_SetRotation+0x154>)
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]
    }
      break;
 800213a:	e033      	b.n	80021a4 <ST7735_SetRotation+0x128>
    case 2:
    {
      uint8_t d_r = _data_rotation[3];
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <ST7735_SetRotation+0x144>)
 800213e:	78db      	ldrb	r3, [r3, #3]
 8002140:	737b      	strb	r3, [r7, #13]
      ST7735_WriteData(&d_r, sizeof(d_r));
 8002142:	f107 030d 	add.w	r3, r7, #13
 8002146:	2101      	movs	r1, #1
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f981 	bl	8001450 <ST7735_WriteData>
      _width  = ST7735_WIDTH;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <ST7735_SetRotation+0x148>)
 8002150:	2280      	movs	r2, #128	; 0x80
 8002152:	801a      	strh	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002154:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <ST7735_SetRotation+0x14c>)
 8002156:	22a0      	movs	r2, #160	; 0xa0
 8002158:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_XSTART;
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <ST7735_SetRotation+0x150>)
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_YSTART;
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <ST7735_SetRotation+0x154>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
    }
      break;
 8002166:	e01d      	b.n	80021a4 <ST7735_SetRotation+0x128>
    case 3:
    {
      uint8_t d_r = (_data_rotation[0] | _data_rotation[2] | _data_rotation[3]);
 8002168:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <ST7735_SetRotation+0x144>)
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <ST7735_SetRotation+0x144>)
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	4313      	orrs	r3, r2
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <ST7735_SetRotation+0x144>)
 8002176:	78db      	ldrb	r3, [r3, #3]
 8002178:	4313      	orrs	r3, r2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	733b      	strb	r3, [r7, #12]
      ST7735_WriteData(&d_r, sizeof(d_r));
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	2101      	movs	r1, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff f963 	bl	8001450 <ST7735_WriteData>
      _width  = ST7735_HEIGHT;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <ST7735_SetRotation+0x148>)
 800218c:	22a0      	movs	r2, #160	; 0xa0
 800218e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <ST7735_SetRotation+0x14c>)
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	801a      	strh	r2, [r3, #0]
      _xstart = ST7735_YSTART;
 8002196:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <ST7735_SetRotation+0x150>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
      _ystart = ST7735_XSTART;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <ST7735_SetRotation+0x154>)
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
    }
      break;
 80021a2:	bf00      	nop
  }
  TFT_CS_H();
 80021a4:	2201      	movs	r2, #1
 80021a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021aa:	4804      	ldr	r0, [pc, #16]	; (80021bc <ST7735_SetRotation+0x140>)
 80021ac:	f7fe fab4 	bl	8000718 <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000050 	.word	0x20000050
 80021bc:	40010c00 	.word	0x40010c00
 80021c0:	20000008 	.word	0x20000008
 80021c4:	2000000e 	.word	0x2000000e
 80021c8:	2000000c 	.word	0x2000000c
 80021cc:	20000010 	.word	0x20000010
 80021d0:	20000011 	.word	0x20000011

080021d4 <ST7735_GetHeight>:
{
  return _value_rotation;
}

int16_t ST7735_GetHeight(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return _height;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <ST7735_GetHeight+0x14>)
 80021da:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000000c 	.word	0x2000000c

080021ec <ST7735_GetWidth>:

int16_t ST7735_GetWidth(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return _width;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <ST7735_GetWidth+0x14>)
 80021f2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	2000000e 	.word	0x2000000e

08002204 <demoTFT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t r = 0;
void demoTFT(void)
{
 8002204:	b5b0      	push	{r4, r5, r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af04      	add	r7, sp, #16

ST7735_SetRotation(r);
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <demoTFT+0x130>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff34 	bl	800207c <ST7735_SetRotation>

ST7735_FillScreen(ST7735_BLACK);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fb9f 	bl	8001958 <ST7735_FillScreen>

 for(int x = 0; x < ST7735_GetWidth(); x++)
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e018      	b.n	8002252 <demoTFT+0x4e>
 {
   ST7735_DrawPixel(x, 0, ST7735_WHITE);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fa5c 	bl	80016e8 <ST7735_DrawPixel>
   ST7735_DrawPixel(x, ST7735_GetHeight() - 1, ST7735_WHITE);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	b29c      	uxth	r4, r3
 8002234:	f7ff ffce 	bl	80021d4 <ST7735_GetHeight>
 8002238:	4603      	mov	r3, r0
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29b      	uxth	r3, r3
 8002240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002244:	4619      	mov	r1, r3
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff fa4e 	bl	80016e8 <ST7735_DrawPixel>
 for(int x = 0; x < ST7735_GetWidth(); x++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3301      	adds	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	f7ff ffcb 	bl	80021ec <ST7735_GetWidth>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	4293      	cmp	r3, r2
 800225e:	dbdf      	blt.n	8002220 <demoTFT+0x1c>
 }

 for(int y = 0; y < ST7735_GetHeight(); y++)
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e017      	b.n	8002296 <demoTFT+0x92>
 {
   ST7735_DrawPixel(0, y, ST7735_WHITE);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226e:	4619      	mov	r1, r3
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fa39 	bl	80016e8 <ST7735_DrawPixel>
   ST7735_DrawPixel(ST7735_GetWidth() - 1, y, ST7735_WHITE);
 8002276:	f7ff ffb9 	bl	80021ec <ST7735_GetWidth>
 800227a:	4603      	mov	r3, r0
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	b291      	uxth	r1, r2
 8002286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fa2c 	bl	80016e8 <ST7735_DrawPixel>
 for(int y = 0; y < ST7735_GetHeight(); y++)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	3301      	adds	r3, #1
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	f7ff ff9d 	bl	80021d4 <ST7735_GetHeight>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	dbe0      	blt.n	8002266 <demoTFT+0x62>
 }

 ST7735_DrawLine(0, 0, ST7735_GetWidth(), ST7735_GetHeight(), ST7735_WHITE);
 80022a4:	f7ff ffa2 	bl	80021ec <ST7735_GetWidth>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461c      	mov	r4, r3
 80022ac:	f7ff ff92 	bl	80021d4 <ST7735_GetHeight>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	4622      	mov	r2, r4
 80022be:	2100      	movs	r1, #0
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fda8 	bl	8001e16 <ST7735_DrawLine>
 ST7735_DrawLine(ST7735_GetWidth(), 0, 0, ST7735_GetHeight(), ST7735_WHITE);
 80022c6:	f7ff ff91 	bl	80021ec <ST7735_GetWidth>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461c      	mov	r4, r3
 80022ce:	f7ff ff81 	bl	80021d4 <ST7735_GetHeight>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff fd97 	bl	8001e16 <ST7735_DrawLine>

 HAL_Delay(2000);
 80022e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022ec:	f7fd ff90 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fb31 	bl	8001958 <ST7735_FillScreen>

 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e011      	b.n	8002320 <demoTFT+0x11c>
 {
  ST7735_DrawFastHLine(0, i, ST7735_GetWidth() - 1, ST7735_WHITE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	b21c      	sxth	r4, r3
 8002300:	f7ff ff74 	bl	80021ec <ST7735_GetWidth>
 8002304:	4603      	mov	r3, r0
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	b21a      	sxth	r2, r3
 800230e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002312:	4621      	mov	r1, r4
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fe67 	bl	8001fe8 <ST7735_DrawFastHLine>
 for (int i = 0; i < ST7735_GetHeight(); i += 4)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	f7ff ff58 	bl	80021d4 <ST7735_GetHeight>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4293      	cmp	r3, r2
 800232c:	dbe6      	blt.n	80022fc <demoTFT+0xf8>
 }

 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	e013      	b.n	800235c <demoTFT+0x158>
 8002334:	200000ac 	.word	0x200000ac
 {
  ST7735_DrawFastVLine(i, 0, ST7735_GetHeight() - 1, ST7735_WHITE);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	b21c      	sxth	r4, r3
 800233c:	f7ff ff4a 	bl	80021d4 <ST7735_GetHeight>
 8002340:	4603      	mov	r3, r0
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29b      	uxth	r3, r3
 8002348:	b21a      	sxth	r2, r3
 800234a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234e:	2100      	movs	r1, #0
 8002350:	4620      	mov	r0, r4
 8002352:	f7ff fdff 	bl	8001f54 <ST7735_DrawFastVLine>
 for (int i = 0; i < ST7735_GetWidth(); i += 4)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3304      	adds	r3, #4
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	f7ff ff46 	bl	80021ec <ST7735_GetWidth>
 8002360:	4603      	mov	r3, r0
 8002362:	461a      	mov	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4293      	cmp	r3, r2
 8002368:	dbe6      	blt.n	8002338 <demoTFT+0x134>
 }

 HAL_Delay(2000);
 800236a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800236e:	f7fd ff4f 	bl	8000210 <HAL_Delay>


 // Check fonts
 ST7735_FillScreen(ST7735_BLACK);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff faf0 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "Font_7x10, red on black, ABCDEF", Font_7x10, ST7735_RED, ST7735_BLACK);
 8002378:	4b99      	ldr	r3, [pc, #612]	; (80025e0 <demoTFT+0x3dc>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a96      	ldr	r2, [pc, #600]	; (80025e4 <demoTFT+0x3e0>)
 800238c:	2100      	movs	r1, #0
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff f9f2 	bl	8001778 <ST7735_DrawString>
 ST7735_DrawString(0, 3*10, "Font_11x18, green, ABCD", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8002394:	4b94      	ldr	r3, [pc, #592]	; (80025e8 <demoTFT+0x3e4>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a91      	ldr	r2, [pc, #580]	; (80025ec <demoTFT+0x3e8>)
 80023a8:	211e      	movs	r1, #30
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff f9e4 	bl	8001778 <ST7735_DrawString>
 ST7735_DrawString(0, 3*10+3*18, "Font_16x26 ,AB", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80023b0:	4b8f      	ldr	r3, [pc, #572]	; (80025f0 <demoTFT+0x3ec>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	9202      	str	r2, [sp, #8]
 80023b6:	221f      	movs	r2, #31
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	9200      	str	r2, [sp, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a8c      	ldr	r2, [pc, #560]	; (80025f4 <demoTFT+0x3f0>)
 80023c2:	2154      	movs	r1, #84	; 0x54
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff f9d7 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(2000);
 80023ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023ce:	f7fd ff1f 	bl	8000210 <HAL_Delay>

 // Check colors
 ST7735_FillScreen(ST7735_BLACK);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fac0 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80023d8:	4b83      	ldr	r3, [pc, #524]	; (80025e8 <demoTFT+0x3e4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e2:	9201      	str	r2, [sp, #4]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	9200      	str	r2, [sp, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a83      	ldr	r2, [pc, #524]	; (80025f8 <demoTFT+0x3f4>)
 80023ec:	2100      	movs	r1, #0
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7ff f9c2 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 80023f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023f8:	f7fd ff0a 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLUE);
 80023fc:	201f      	movs	r0, #31
 80023fe:	f7ff faab 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <demoTFT+0x3e4>)
 8002404:	221f      	movs	r2, #31
 8002406:	9202      	str	r2, [sp, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	9201      	str	r2, [sp, #4]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	9200      	str	r2, [sp, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7a      	ldr	r2, [pc, #488]	; (80025fc <demoTFT+0x3f8>)
 8002414:	2100      	movs	r1, #0
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff f9ae 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 800241c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002420:	f7fd fef6 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_RED);
 8002424:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002428:	f7ff fa96 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 800242c:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <demoTFT+0x3e4>)
 800242e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002432:	9202      	str	r2, [sp, #8]
 8002434:	2200      	movs	r2, #0
 8002436:	9201      	str	r2, [sp, #4]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	9200      	str	r2, [sp, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a70      	ldr	r2, [pc, #448]	; (8002600 <demoTFT+0x3fc>)
 8002440:	2100      	movs	r1, #0
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff f998 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 8002448:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800244c:	f7fd fee0 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_GREEN);
 8002450:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002454:	f7ff fa80 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8002458:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <demoTFT+0x3e4>)
 800245a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800245e:	9202      	str	r2, [sp, #8]
 8002460:	2200      	movs	r2, #0
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	9200      	str	r2, [sp, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a66      	ldr	r2, [pc, #408]	; (8002604 <demoTFT+0x400>)
 800246c:	2100      	movs	r1, #0
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff f982 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 8002474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002478:	f7fd feca 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_CYAN);
 800247c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002480:	f7ff fa6a 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "CYAN",   Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8002484:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <demoTFT+0x3e4>)
 8002486:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800248a:	9202      	str	r2, [sp, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	9201      	str	r2, [sp, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5c      	ldr	r2, [pc, #368]	; (8002608 <demoTFT+0x404>)
 8002498:	2100      	movs	r1, #0
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff f96c 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 80024a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024a4:	f7fd feb4 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_MAGENTA);
 80024a8:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80024ac:	f7ff fa54 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80024b0:	4b4d      	ldr	r3, [pc, #308]	; (80025e8 <demoTFT+0x3e4>)
 80024b2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80024b6:	9202      	str	r2, [sp, #8]
 80024b8:	2200      	movs	r2, #0
 80024ba:	9201      	str	r2, [sp, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	9200      	str	r2, [sp, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a52      	ldr	r2, [pc, #328]	; (800260c <demoTFT+0x408>)
 80024c4:	2100      	movs	r1, #0
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff f956 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 80024cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024d0:	f7fd fe9e 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_YELLOW);
 80024d4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80024d8:	f7ff fa3e 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80024dc:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <demoTFT+0x3e4>)
 80024de:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024e2:	9202      	str	r2, [sp, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a48      	ldr	r2, [pc, #288]	; (8002610 <demoTFT+0x40c>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff f940 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 80024f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024fc:	f7fd fe88 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_WHITE);
 8002500:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002504:	f7ff fa28 	bl	8001958 <ST7735_FillScreen>
 ST7735_DrawString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <demoTFT+0x3e4>)
 800250a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250e:	9202      	str	r2, [sp, #8]
 8002510:	2200      	movs	r2, #0
 8002512:	9201      	str	r2, [sp, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	9200      	str	r2, [sp, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a3e      	ldr	r2, [pc, #248]	; (8002614 <demoTFT+0x410>)
 800251c:	2100      	movs	r1, #0
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff f92a 	bl	8001778 <ST7735_DrawString>
 HAL_Delay(500);
 8002524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002528:	f7fd fe72 	bl	8000210 <HAL_Delay>

 // Draw circles
 ST7735_FillScreen(ST7735_BLACK);
 800252c:	2000      	movs	r0, #0
 800252e:	f7ff fa13 	bl	8001958 <ST7735_FillScreen>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	e017      	b.n	8002568 <demoTFT+0x364>
 {
  ST7735_DrawCircle(ST7735_GetWidth() / 2, ST7735_GetHeight() / 2, i, ST7735_YELLOW);
 8002538:	f7ff fe58 	bl	80021ec <ST7735_GetWidth>
 800253c:	4603      	mov	r3, r0
 800253e:	0fda      	lsrs	r2, r3, #31
 8002540:	4413      	add	r3, r2
 8002542:	105b      	asrs	r3, r3, #1
 8002544:	b21c      	sxth	r4, r3
 8002546:	f7ff fe45 	bl	80021d4 <ST7735_GetHeight>
 800254a:	4603      	mov	r3, r0
 800254c:	0fda      	lsrs	r2, r3, #31
 800254e:	4413      	add	r3, r2
 8002550:	105b      	asrs	r3, r3, #1
 8002552:	b219      	sxth	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	b21a      	sxth	r2, r3
 8002558:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800255c:	4620      	mov	r0, r4
 800255e:	f7ff fa23 	bl	80019a8 <ST7735_DrawCircle>
 for (int i = 0; i < ST7735_GetHeight() / 2; i += 2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3302      	adds	r3, #2
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	f7ff fe34 	bl	80021d4 <ST7735_GetHeight>
 800256c:	4603      	mov	r3, r0
 800256e:	0fda      	lsrs	r2, r3, #31
 8002570:	4413      	add	r3, r2
 8002572:	105b      	asrs	r3, r3, #1
 8002574:	b21b      	sxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4293      	cmp	r3, r2
 800257c:	dbdc      	blt.n	8002538 <demoTFT+0x334>
 }
 HAL_Delay(1000);
 800257e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002582:	f7fd fe45 	bl	8000210 <HAL_Delay>

 ST7735_FillScreen(ST7735_BLACK);
 8002586:	2000      	movs	r0, #0
 8002588:	f7ff f9e6 	bl	8001958 <ST7735_FillScreen>
 ST7735_FillTriangle(0, 0, ST7735_GetWidth() / 2, ST7735_GetHeight(), ST7735_GetWidth(), 0, ST7735_RED);
 800258c:	f7ff fe2e 	bl	80021ec <ST7735_GetWidth>
 8002590:	4603      	mov	r3, r0
 8002592:	0fda      	lsrs	r2, r3, #31
 8002594:	4413      	add	r3, r2
 8002596:	105b      	asrs	r3, r3, #1
 8002598:	b21c      	sxth	r4, r3
 800259a:	f7ff fe1b 	bl	80021d4 <ST7735_GetHeight>
 800259e:	4603      	mov	r3, r0
 80025a0:	461d      	mov	r5, r3
 80025a2:	f7ff fe23 	bl	80021ec <ST7735_GetWidth>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025ae:	9302      	str	r3, [sp, #8]
 80025b0:	2300      	movs	r3, #0
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	9200      	str	r2, [sp, #0]
 80025b6:	462b      	mov	r3, r5
 80025b8:	4622      	mov	r2, r4
 80025ba:	2100      	movs	r1, #0
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fac5 	bl	8001b4c <ST7735_FillTriangle>
 HAL_Delay(1000);
 80025c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c6:	f7fd fe23 	bl	8000210 <HAL_Delay>
  ST7735_FillScreen(ST7735_BLACK);
  ST7735_DrawImage(0,0, 128, 80, (uint16_t*) test_img_128x128);
  HAL_Delay(3000);*/


 r++;
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <demoTFT+0x414>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <demoTFT+0x414>)
 80025d4:	701a      	strb	r2, [r3, #0]
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bdb0      	pop	{r4, r5, r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000014 	.word	0x20000014
 80025e4:	080029fc 	.word	0x080029fc
 80025e8:	2000001c 	.word	0x2000001c
 80025ec:	08002a1c 	.word	0x08002a1c
 80025f0:	20000024 	.word	0x20000024
 80025f4:	08002a34 	.word	0x08002a34
 80025f8:	08002a44 	.word	0x08002a44
 80025fc:	08002a4c 	.word	0x08002a4c
 8002600:	08002a54 	.word	0x08002a54
 8002604:	08002a58 	.word	0x08002a58
 8002608:	08002a60 	.word	0x08002a60
 800260c:	08002a68 	.word	0x08002a68
 8002610:	08002a70 	.word	0x08002a70
 8002614:	08002a78 	.word	0x08002a78
 8002618:	200000ac 	.word	0x200000ac

0800261c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002620:	f7fd fd94 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002624:	f000 f80b 	bl	800263e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002628:	f000 f884 	bl	8002734 <MX_GPIO_Init>
  MX_SPI1_Init();
 800262c:	f000 f84c 	bl	80026c8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8002630:	f7ff f834 	bl	800169c <ST7735_Init>
  ST7735_Backlight_On();
 8002634:	f7ff f9ac 	bl	8001990 <ST7735_Backlight_On>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    demoTFT();
 8002638:	f7ff fde4 	bl	8002204 <demoTFT>
 800263c:	e7fc      	b.n	8002638 <main+0x1c>

0800263e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b090      	sub	sp, #64	; 0x40
 8002642:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	2228      	movs	r2, #40	; 0x28
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f9b9 	bl	80029c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002660:	2301      	movs	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002668:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800266e:	2301      	movs	r3, #1
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002672:	2302      	movs	r3, #2
 8002674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800267c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe f85e 	bl	8000748 <HAL_RCC_OscConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002692:	f000 f8a7 	bl	80027e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002696:	230f      	movs	r3, #15
 8002698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269a:	2302      	movs	r3, #2
 800269c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2102      	movs	r1, #2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe facb 	bl	8000c4c <HAL_RCC_ClockConfig>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80026bc:	f000 f892 	bl	80027e4 <Error_Handler>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3740      	adds	r7, #64	; 0x40
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_SPI1_Init+0x64>)
 80026ce:	4a18      	ldr	r2, [pc, #96]	; (8002730 <MX_SPI1_Init+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_SPI1_Init+0x64>)
 80026d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_SPI1_Init+0x64>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_SPI1_Init+0x64>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_SPI1_Init+0x64>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_SPI1_Init+0x64>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_SPI1_Init+0x64>)
 80026f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_SPI1_Init+0x64>)
 80026fc:	2218      	movs	r2, #24
 80026fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_SPI1_Init+0x64>)
 8002702:	2200      	movs	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_SPI1_Init+0x64>)
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <MX_SPI1_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_SPI1_Init+0x64>)
 8002714:	220a      	movs	r2, #10
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_SPI1_Init+0x64>)
 800271a:	f7fe fbfd 	bl	8000f18 <HAL_SPI_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002724:	f000 f85e 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000054 	.word	0x20000054
 8002730:	40013000 	.word	0x40013000

08002734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	f107 0310 	add.w	r3, r7, #16
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	609a      	str	r2, [r3, #8]
 8002746:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002748:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_GPIO_Init+0xa8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a23      	ldr	r2, [pc, #140]	; (80027dc <MX_GPIO_Init+0xa8>)
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_GPIO_Init+0xa8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <MX_GPIO_Init+0xa8>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	4a1d      	ldr	r2, [pc, #116]	; (80027dc <MX_GPIO_Init+0xa8>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6193      	str	r3, [r2, #24]
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <MX_GPIO_Init+0xa8>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <MX_GPIO_Init+0xa8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <MX_GPIO_Init+0xa8>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <MX_GPIO_Init+0xa8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8002796:	4812      	ldr	r0, [pc, #72]	; (80027e0 <MX_GPIO_Init+0xac>)
 8002798:	f7fd ffbe 	bl	8000718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800279c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80027a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2302      	movs	r3, #2
 80027ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ae:	f107 0310 	add.w	r3, r7, #16
 80027b2:	4619      	mov	r1, r3
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <MX_GPIO_Init+0xac>)
 80027b6:	f7fd fe33 	bl	8000420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80027ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	4619      	mov	r1, r3
 80027ce:	4804      	ldr	r0, [pc, #16]	; (80027e0 <MX_GPIO_Init+0xac>)
 80027d0:	f7fd fe26 	bl	8000420 <HAL_GPIO_Init>

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40010c00 	.word	0x40010c00

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_MspInit>:
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_MspInit+0x5c>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	4a14      	ldr	r2, [pc, #80]	; (800284c <HAL_MspInit+0x5c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6193      	str	r3, [r2, #24]
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_MspInit+0x5c>)
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_MspInit+0x5c>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4a0e      	ldr	r2, [pc, #56]	; (800284c <HAL_MspInit+0x5c>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	61d3      	str	r3, [r2, #28]
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_MspInit+0x5c>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_MspInit+0x60>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_MspInit+0x60>)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6053      	str	r3, [r2, #4]
 8002842:	bf00      	nop
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40021000 	.word	0x40021000
 8002850:	40010000 	.word	0x40010000

08002854 <HAL_SPI_MspInit>:
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a15      	ldr	r2, [pc, #84]	; (80028c4 <HAL_SPI_MspInit+0x70>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d123      	bne.n	80028bc <HAL_SPI_MspInit+0x68>
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 800287a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_SPI_MspInit+0x74>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	23a0      	movs	r3, #160	; 0xa0
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	2302      	movs	r3, #2
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	2303      	movs	r3, #3
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	4619      	mov	r1, r3
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_SPI_MspInit+0x78>)
 80028b8:	f7fd fdb2 	bl	8000420 <HAL_GPIO_Init>
 80028bc:	bf00      	nop
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40013000 	.word	0x40013000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010800 	.word	0x40010800

080028d0 <NMI_Handler>:
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HardFault_Handler>:
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
 80028e0:	e7fe      	b.n	80028e0 <HardFault_Handler+0x4>

080028e2 <MemManage_Handler>:
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	e7fe      	b.n	80028e6 <MemManage_Handler+0x4>

080028e8 <BusFault_Handler>:
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	e7fe      	b.n	80028ec <BusFault_Handler+0x4>

080028ee <UsageFault_Handler>:
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	e7fe      	b.n	80028f2 <UsageFault_Handler+0x4>

080028f4 <SVC_Handler>:
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <DebugMon_Handler>:
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <PendSV_Handler>:
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
 800291c:	f7fd fc5c 	bl	80001d8 <HAL_IncTick>
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <SystemInit>:
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <Reset_Handler>:
 8002930:	480c      	ldr	r0, [pc, #48]	; (8002964 <LoopFillZerobss+0x12>)
 8002932:	490d      	ldr	r1, [pc, #52]	; (8002968 <LoopFillZerobss+0x16>)
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <LoopFillZerobss+0x1a>)
 8002936:	2300      	movs	r3, #0
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:
 800293a:	58d4      	ldr	r4, [r2, r3]
 800293c:	50c4      	str	r4, [r0, r3]
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:
 8002940:	18c4      	adds	r4, r0, r3
 8002942:	428c      	cmp	r4, r1
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <LoopFillZerobss+0x1e>)
 8002948:	4c0a      	ldr	r4, [pc, #40]	; (8002974 <LoopFillZerobss+0x22>)
 800294a:	2300      	movs	r3, #0
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:
 8002952:	42a2      	cmp	r2, r4
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>
 8002956:	f7ff ffe5 	bl	8002924 <SystemInit>
 800295a:	f000 f80f 	bl	800297c <__libc_init_array>
 800295e:	f7ff fe5d 	bl	800261c <main>
 8002962:	4770      	bx	lr
 8002964:	20000000 	.word	0x20000000
 8002968:	20000030 	.word	0x20000030
 800296c:	08005324 	.word	0x08005324
 8002970:	20000030 	.word	0x20000030
 8002974:	200000b0 	.word	0x200000b0

08002978 <ADC1_2_IRQHandler>:
 8002978:	e7fe      	b.n	8002978 <ADC1_2_IRQHandler>
	...

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	2600      	movs	r6, #0
 8002980:	4d0c      	ldr	r5, [pc, #48]	; (80029b4 <__libc_init_array+0x38>)
 8002982:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002984:	1b64      	subs	r4, r4, r5
 8002986:	10a4      	asrs	r4, r4, #2
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	f000 f822 	bl	80029d4 <_init>
 8002990:	2600      	movs	r6, #0
 8002992:	4d0a      	ldr	r5, [pc, #40]	; (80029bc <__libc_init_array+0x40>)
 8002994:	4c0a      	ldr	r4, [pc, #40]	; (80029c0 <__libc_init_array+0x44>)
 8002996:	1b64      	subs	r4, r4, r5
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	0800531c 	.word	0x0800531c
 80029b8:	0800531c 	.word	0x0800531c
 80029bc:	0800531c 	.word	0x0800531c
 80029c0:	08005320 	.word	0x08005320

080029c4 <memset>:
 80029c4:	4603      	mov	r3, r0
 80029c6:	4402      	add	r2, r0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d100      	bne.n	80029ce <memset+0xa>
 80029cc:	4770      	bx	lr
 80029ce:	f803 1b01 	strb.w	r1, [r3], #1
 80029d2:	e7f9      	b.n	80029c8 <memset+0x4>

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
