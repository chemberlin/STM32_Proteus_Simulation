
TIMER One-Pulse_PWM_Input Capture MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080043b0  080043b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043b0  080043b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043b4  080043b4  000143b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080043b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08004428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08004428  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a06d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e7  00000000  00000000  0002a106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  0002b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002c580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f9  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b504  00000000  00000000  00043a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880d1  00000000  00000000  0004ef75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000d7098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800432c 	.word	0x0800432c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800432c 	.word	0x0800432c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f947 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	2000      	movs	r0, #0
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f002 ffc6 	bl	8003600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f95f 	bl	8000962 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295
 80006bc:	f000 f927 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004
 80006dc:	20000000 	.word	0x20000000

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x1c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x20>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a03      	ldr	r2, [pc, #12]	; (8000700 <HAL_IncTick+0x20>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	20000004 	.word	0x20000004
 8000700:	2000008c 	.word	0x2000008c

08000704 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return uwTick;
 8000708:	4b02      	ldr	r3, [pc, #8]	; (8000714 <HAL_GetTick+0x10>)
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	2000008c 	.word	0x2000008c

08000718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000720:	f7ff fff0 	bl	8000704 <HAL_GetTick>
 8000724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d005      	beq.n	800073e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_Delay+0x44>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	461a      	mov	r2, r3
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073e:	bf00      	nop
 8000740:	f7ff ffe0 	bl	8000704 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	429a      	cmp	r2, r3
 800074e:	d8f7      	bhi.n	8000740 <HAL_Delay+0x28>
  {
  }
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <__NVIC_EnableIRQ+0x34>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	; (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	; (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	; 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	; 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff2d 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff42 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff35 	bl	80007c4 <__NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffa2 	bl	80008b4 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800097c:	b480      	push	{r7}
 800097e:	b08b      	sub	sp, #44	; 0x2c
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e161      	b.n	8000c54 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000990:	2201      	movs	r2, #1
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	4013      	ands	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	f040 8150 	bne.w	8000c4e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	4a97      	ldr	r2, [pc, #604]	; (8000c10 <HAL_GPIO_Init+0x294>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d05e      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009b8:	4a95      	ldr	r2, [pc, #596]	; (8000c10 <HAL_GPIO_Init+0x294>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d875      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009be:	4a95      	ldr	r2, [pc, #596]	; (8000c14 <HAL_GPIO_Init+0x298>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d058      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009c4:	4a93      	ldr	r2, [pc, #588]	; (8000c14 <HAL_GPIO_Init+0x298>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d86f      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009ca:	4a93      	ldr	r2, [pc, #588]	; (8000c18 <HAL_GPIO_Init+0x29c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d052      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009d0:	4a91      	ldr	r2, [pc, #580]	; (8000c18 <HAL_GPIO_Init+0x29c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d869      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009d6:	4a91      	ldr	r2, [pc, #580]	; (8000c1c <HAL_GPIO_Init+0x2a0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d04c      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009dc:	4a8f      	ldr	r2, [pc, #572]	; (8000c1c <HAL_GPIO_Init+0x2a0>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d863      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009e2:	4a8f      	ldr	r2, [pc, #572]	; (8000c20 <HAL_GPIO_Init+0x2a4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d046      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
 80009e8:	4a8d      	ldr	r2, [pc, #564]	; (8000c20 <HAL_GPIO_Init+0x2a4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d85d      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009ee:	2b12      	cmp	r3, #18
 80009f0:	d82a      	bhi.n	8000a48 <HAL_GPIO_Init+0xcc>
 80009f2:	2b12      	cmp	r3, #18
 80009f4:	d859      	bhi.n	8000aaa <HAL_GPIO_Init+0x12e>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <HAL_GPIO_Init+0x80>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a77 	.word	0x08000a77
 8000a00:	08000a51 	.word	0x08000a51
 8000a04:	08000a63 	.word	0x08000a63
 8000a08:	08000aa5 	.word	0x08000aa5
 8000a0c:	08000aab 	.word	0x08000aab
 8000a10:	08000aab 	.word	0x08000aab
 8000a14:	08000aab 	.word	0x08000aab
 8000a18:	08000aab 	.word	0x08000aab
 8000a1c:	08000aab 	.word	0x08000aab
 8000a20:	08000aab 	.word	0x08000aab
 8000a24:	08000aab 	.word	0x08000aab
 8000a28:	08000aab 	.word	0x08000aab
 8000a2c:	08000aab 	.word	0x08000aab
 8000a30:	08000aab 	.word	0x08000aab
 8000a34:	08000aab 	.word	0x08000aab
 8000a38:	08000aab 	.word	0x08000aab
 8000a3c:	08000aab 	.word	0x08000aab
 8000a40:	08000a59 	.word	0x08000a59
 8000a44:	08000a6d 	.word	0x08000a6d
 8000a48:	4a76      	ldr	r2, [pc, #472]	; (8000c24 <HAL_GPIO_Init+0x2a8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d013      	beq.n	8000a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a4e:	e02c      	b.n	8000aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	623b      	str	r3, [r7, #32]
          break;
 8000a56:	e029      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	623b      	str	r3, [r7, #32]
          break;
 8000a60:	e024      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3308      	adds	r3, #8
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e01f      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	330c      	adds	r3, #12
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e01a      	b.n	8000aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	623b      	str	r3, [r7, #32]
          break;
 8000a82:	e013      	b.n	8000aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d105      	bne.n	8000a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	69fa      	ldr	r2, [r7, #28]
 8000a94:	611a      	str	r2, [r3, #16]
          break;
 8000a96:	e009      	b.n	8000aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69fa      	ldr	r2, [r7, #28]
 8000aa0:	615a      	str	r2, [r3, #20]
          break;
 8000aa2:	e003      	b.n	8000aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e000      	b.n	8000aac <HAL_GPIO_Init+0x130>
          break;
 8000aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	2bff      	cmp	r3, #255	; 0xff
 8000ab0:	d801      	bhi.n	8000ab6 <HAL_GPIO_Init+0x13a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	e001      	b.n	8000aba <HAL_GPIO_Init+0x13e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d802      	bhi.n	8000ac8 <HAL_GPIO_Init+0x14c>
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x152>
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aca:	3b08      	subs	r3, #8
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	401a      	ands	r2, r3
 8000ae0:	6a39      	ldr	r1, [r7, #32]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80a9 	beq.w	8000c4e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <HAL_GPIO_Init+0x2ac>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b14:	4a45      	ldr	r2, [pc, #276]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <HAL_GPIO_Init+0x2b4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1e0>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3c      	ldr	r2, [pc, #240]	; (8000c34 <HAL_GPIO_Init+0x2b8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1dc>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <HAL_GPIO_Init+0x2bc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1d8>
 8000b50:	2302      	movs	r3, #2
 8000b52:	e004      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <HAL_GPIO_Init+0x1e2>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b60:	f002 0203 	and.w	r2, r2, #3
 8000b64:	0092      	lsls	r2, r2, #2
 8000b66:	4093      	lsls	r3, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b6e:	492f      	ldr	r1, [pc, #188]	; (8000c2c <HAL_GPIO_Init+0x2b0>)
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	492b      	ldr	r1, [pc, #172]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	600b      	str	r3, [r1, #0]
 8000b94:	e006      	b.n	8000ba4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	4927      	ldr	r1, [pc, #156]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	4921      	ldr	r1, [pc, #132]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	604b      	str	r3, [r1, #4]
 8000bbc:	e006      	b.n	8000bcc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	491d      	ldr	r1, [pc, #116]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	4917      	ldr	r1, [pc, #92]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
 8000be4:	e006      	b.n	8000bf4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4913      	ldr	r1, [pc, #76]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01f      	beq.n	8000c40 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	490d      	ldr	r1, [pc, #52]	; (8000c3c <HAL_GPIO_Init+0x2c0>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60cb      	str	r3, [r1, #12]
 8000c0c:	e01f      	b.n	8000c4e <HAL_GPIO_Init+0x2d2>
 8000c0e:	bf00      	nop
 8000c10:	10320000 	.word	0x10320000
 8000c14:	10310000 	.word	0x10310000
 8000c18:	10220000 	.word	0x10220000
 8000c1c:	10210000 	.word	0x10210000
 8000c20:	10120000 	.word	0x10120000
 8000c24:	10110000 	.word	0x10110000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010000 	.word	0x40010000
 8000c30:	40010800 	.word	0x40010800
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_GPIO_Init+0x2f4>)
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	4909      	ldr	r1, [pc, #36]	; (8000c70 <HAL_GPIO_Init+0x2f4>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c50:	3301      	adds	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f47f ae96 	bne.w	8000990 <HAL_GPIO_Init+0x14>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	372c      	adds	r7, #44	; 0x2c
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40010400 	.word	0x40010400

08000c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	e001      	b.n	8000c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e272      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 8087 	beq.w	8000dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc4:	4b92      	ldr	r3, [pc, #584]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d00c      	beq.n	8000cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd0:	4b8f      	ldr	r3, [pc, #572]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 030c 	and.w	r3, r3, #12
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d112      	bne.n	8000d02 <HAL_RCC_OscConfig+0x5e>
 8000cdc:	4b8c      	ldr	r3, [pc, #560]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce8:	d10b      	bne.n	8000d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cea:	4b89      	ldr	r3, [pc, #548]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d06c      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x12c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d168      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e24c      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d0a:	d106      	bne.n	8000d1a <HAL_RCC_OscConfig+0x76>
 8000d0c:	4b80      	ldr	r3, [pc, #512]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a7f      	ldr	r2, [pc, #508]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	e02e      	b.n	8000d78 <HAL_RCC_OscConfig+0xd4>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10c      	bne.n	8000d3c <HAL_RCC_OscConfig+0x98>
 8000d22:	4b7b      	ldr	r3, [pc, #492]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a7a      	ldr	r2, [pc, #488]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a77      	ldr	r2, [pc, #476]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e01d      	b.n	8000d78 <HAL_RCC_OscConfig+0xd4>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d44:	d10c      	bne.n	8000d60 <HAL_RCC_OscConfig+0xbc>
 8000d46:	4b72      	ldr	r3, [pc, #456]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a71      	ldr	r2, [pc, #452]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a6e      	ldr	r2, [pc, #440]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e00b      	b.n	8000d78 <HAL_RCC_OscConfig+0xd4>
 8000d60:	4b6b      	ldr	r3, [pc, #428]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a6a      	ldr	r2, [pc, #424]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	4b68      	ldr	r3, [pc, #416]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a67      	ldr	r2, [pc, #412]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d013      	beq.n	8000da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fcc0 	bl	8000704 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d88:	f7ff fcbc 	bl	8000704 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b64      	cmp	r3, #100	; 0x64
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e200      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f0      	beq.n	8000d88 <HAL_RCC_OscConfig+0xe4>
 8000da6:	e014      	b.n	8000dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da8:	f7ff fcac 	bl	8000704 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db0:	f7ff fca8 	bl	8000704 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b64      	cmp	r3, #100	; 0x64
 8000dbc:	d901      	bls.n	8000dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e1ec      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dc2:	4b53      	ldr	r3, [pc, #332]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1f0      	bne.n	8000db0 <HAL_RCC_OscConfig+0x10c>
 8000dce:	e000      	b.n	8000dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d063      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dde:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00b      	beq.n	8000e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dea:	4b49      	ldr	r3, [pc, #292]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d11c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x18c>
 8000df6:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d116      	bne.n	8000e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e02:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <HAL_RCC_OscConfig+0x176>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d001      	beq.n	8000e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e1c0      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1a:	4b3d      	ldr	r3, [pc, #244]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	4939      	ldr	r1, [pc, #228]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	e03a      	b.n	8000ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d020      	beq.n	8000e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_RCC_OscConfig+0x270>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3e:	f7ff fc61 	bl	8000704 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e46:	f7ff fc5d 	bl	8000704 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e1a1      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d0f0      	beq.n	8000e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4927      	ldr	r1, [pc, #156]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
 8000e78:	e015      	b.n	8000ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc40 	bl	8000704 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e88:	f7ff fc3c 	bl	8000704 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e180      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d03a      	beq.n	8000f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d019      	beq.n	8000eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_RCC_OscConfig+0x274>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec0:	f7ff fc20 	bl	8000704 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc1c 	bl	8000704 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e160      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f000 fad8 	bl	800149c <RCC_Delay>
 8000eec:	e01c      	b.n	8000f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_RCC_OscConfig+0x274>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff fc06 	bl	8000704 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efa:	e00f      	b.n	8000f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efc:	f7ff fc02 	bl	8000704 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d908      	bls.n	8000f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e146      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	42420000 	.word	0x42420000
 8000f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f1c:	4b92      	ldr	r3, [pc, #584]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1e9      	bne.n	8000efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a6 	beq.w	8001082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f3a:	4b8b      	ldr	r3, [pc, #556]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10d      	bne.n	8000f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b88      	ldr	r3, [pc, #544]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a87      	ldr	r2, [pc, #540]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b85      	ldr	r3, [pc, #532]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f6e:	4b7f      	ldr	r3, [pc, #508]	; (800116c <HAL_RCC_OscConfig+0x4c8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a7e      	ldr	r2, [pc, #504]	; (800116c <HAL_RCC_OscConfig+0x4c8>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fbc3 	bl	8000704 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f80:	e008      	b.n	8000f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f82:	f7ff fbbf 	bl	8000704 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	2b64      	cmp	r3, #100	; 0x64
 8000f8e:	d901      	bls.n	8000f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e103      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f94:	4b75      	ldr	r3, [pc, #468]	; (800116c <HAL_RCC_OscConfig+0x4c8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f0      	beq.n	8000f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d106      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x312>
 8000fa8:	4b6f      	ldr	r3, [pc, #444]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6213      	str	r3, [r2, #32]
 8000fb4:	e02d      	b.n	8001012 <HAL_RCC_OscConfig+0x36e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x334>
 8000fbe:	4b6a      	ldr	r3, [pc, #424]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a69      	ldr	r2, [pc, #420]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	4b67      	ldr	r3, [pc, #412]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	4a66      	ldr	r2, [pc, #408]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	6213      	str	r3, [r2, #32]
 8000fd6:	e01c      	b.n	8001012 <HAL_RCC_OscConfig+0x36e>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d10c      	bne.n	8000ffa <HAL_RCC_OscConfig+0x356>
 8000fe0:	4b61      	ldr	r3, [pc, #388]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a60      	ldr	r2, [pc, #384]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6213      	str	r3, [r2, #32]
 8000fec:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a5d      	ldr	r2, [pc, #372]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e00b      	b.n	8001012 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a5a      	ldr	r2, [pc, #360]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6213      	str	r3, [r2, #32]
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4a57      	ldr	r2, [pc, #348]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d015      	beq.n	8001046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800101a:	f7ff fb73 	bl	8000704 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001020:	e00a      	b.n	8001038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fb6f 	bl	8000704 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001030:	4293      	cmp	r3, r2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e0b1      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ee      	beq.n	8001022 <HAL_RCC_OscConfig+0x37e>
 8001044:	e014      	b.n	8001070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fb5d 	bl	8000704 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800104c:	e00a      	b.n	8001064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fb59 	bl	8000704 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	; 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e09b      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001064:	4b40      	ldr	r3, [pc, #256]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1ee      	bne.n	800104e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d105      	bne.n	8001082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a3b      	ldr	r2, [pc, #236]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8087 	beq.w	800119a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800108c:	4b36      	ldr	r3, [pc, #216]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b08      	cmp	r3, #8
 8001096:	d061      	beq.n	800115c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d146      	bne.n	800112e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010a0:	4b33      	ldr	r3, [pc, #204]	; (8001170 <HAL_RCC_OscConfig+0x4cc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a6:	f7ff fb2d 	bl	8000704 <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ae:	f7ff fb29 	bl	8000704 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e06d      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1f0      	bne.n	80010ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d108      	bne.n	80010e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	4921      	ldr	r1, [pc, #132]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010e8:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a19      	ldr	r1, [r3, #32]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f8:	430b      	orrs	r3, r1
 80010fa:	491b      	ldr	r1, [pc, #108]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_RCC_OscConfig+0x4cc>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001106:	f7ff fafd 	bl	8000704 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800110e:	f7ff faf9 	bl	8000704 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e03d      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x46a>
 800112c:	e035      	b.n	800119a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_RCC_OscConfig+0x4cc>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fae6 	bl	8000704 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113c:	f7ff fae2 	bl	8000704 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e026      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x498>
 800115a:	e01e      	b.n	800119a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d107      	bne.n	8001174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e019      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
 8001168:	40021000 	.word	0x40021000
 800116c:	40007000 	.word	0x40007000
 8001170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x500>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	429a      	cmp	r2, r3
 8001186:	d106      	bne.n	8001196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001192:	429a      	cmp	r2, r3
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000

080011a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0d0      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011bc:	4b6a      	ldr	r3, [pc, #424]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d910      	bls.n	80011ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ca:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f023 0207 	bic.w	r2, r3, #7
 80011d2:	4965      	ldr	r1, [pc, #404]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800120a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800120e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b50      	ldr	r3, [pc, #320]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	494d      	ldr	r1, [pc, #308]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d040      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d115      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07f      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e073      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e06b      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001286:	4b39      	ldr	r3, [pc, #228]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f023 0203 	bic.w	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4936      	ldr	r1, [pc, #216]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001298:	f7ff fa34 	bl	8000704 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800129e:	e00a      	b.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a0:	f7ff fa30 	bl	8000704 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e053      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 020c 	and.w	r2, r3, #12
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1eb      	bne.n	80012a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d210      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 0207 	bic.w	r2, r3, #7
 80012de:	4922      	ldr	r1, [pc, #136]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4916      	ldr	r1, [pc, #88]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	4313      	orrs	r3, r2
 8001314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001336:	f000 f821 	bl	800137c <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <HAL_RCC_ClockConfig+0x1c8>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1cc>)
 8001350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1d0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f992 	bl	8000680 <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000
 800136c:	40021000 	.word	0x40021000
 8001370:	08004364 	.word	0x08004364
 8001374:	20000008 	.word	0x20000008
 8001378:	20000000 	.word	0x20000000

0800137c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	b490      	push	{r4, r7}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_RCC_GetSysClockFreq+0xac>)
 8001384:	1d3c      	adds	r4, r7, #4
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800138c:	f240 2301 	movw	r3, #513	; 0x201
 8001390:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x40>
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x46>
 80013ba:	e02b      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013be:	623b      	str	r3, [r7, #32]
      break;
 80013c0:	e02b      	b.n	800141a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3328      	adds	r3, #40	; 0x28
 80013cc:	443b      	add	r3, r7
 80013ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013d2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d012      	beq.n	8001404 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_RCC_GetSysClockFreq+0xb0>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0c5b      	lsrs	r3, r3, #17
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	3328      	adds	r3, #40	; 0x28
 80013ea:	443b      	add	r3, r7
 80013ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80013f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_RCC_GetSysClockFreq+0xb4>)
 80013f6:	fb03 f202 	mul.w	r2, r3, r2
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
 8001402:	e004      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	623b      	str	r3, [r7, #32]
      break;
 8001412:	e002      	b.n	800141a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001416:	623b      	str	r3, [r7, #32]
      break;
 8001418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800141a:	6a3b      	ldr	r3, [r7, #32]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bc90      	pop	{r4, r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	08004344 	.word	0x08004344
 800142c:	40021000 	.word	0x40021000
 8001430:	007a1200 	.word	0x007a1200
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <HAL_RCC_GetHCLKFreq+0x10>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001450:	f7ff fff2 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	0a1b      	lsrs	r3, r3, #8
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4903      	ldr	r1, [pc, #12]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	08004374 	.word	0x08004374

08001474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001478:	f7ff ffde 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	08004374 	.word	0x08004374

0800149c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <RCC_Delay+0x34>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <RCC_Delay+0x38>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a5b      	lsrs	r3, r3, #9
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b8:	bf00      	nop
  }
  while (Delay --);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	60fa      	str	r2, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <RCC_Delay+0x1c>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000008 	.word	0x20000008
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e041      	b.n	800156e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f002 f8b0 	bl	8003664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3304      	adds	r3, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f000 ff5c 	bl	80023d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e041      	b.n	800160c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f839 	bl	8001614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3304      	adds	r3, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4610      	mov	r0, r2
 80015b6:	f000 ff0d 	bl	80023d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
	...

08001628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d109      	bne.n	800164c <HAL_TIM_PWM_Start+0x24>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e022      	b.n	8001692 <HAL_TIM_PWM_Start+0x6a>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d109      	bne.n	8001666 <HAL_TIM_PWM_Start+0x3e>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	bf14      	ite	ne
 800165e:	2301      	movne	r3, #1
 8001660:	2300      	moveq	r3, #0
 8001662:	b2db      	uxtb	r3, r3
 8001664:	e015      	b.n	8001692 <HAL_TIM_PWM_Start+0x6a>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d109      	bne.n	8001680 <HAL_TIM_PWM_Start+0x58>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b01      	cmp	r3, #1
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e008      	b.n	8001692 <HAL_TIM_PWM_Start+0x6a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b01      	cmp	r3, #1
 800168a:	bf14      	ite	ne
 800168c:	2301      	movne	r3, #1
 800168e:	2300      	moveq	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e059      	b.n	800174e <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <HAL_TIM_PWM_Start+0x82>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016a8:	e013      	b.n	80016d2 <HAL_TIM_PWM_Start+0xaa>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d104      	bne.n	80016ba <HAL_TIM_PWM_Start+0x92>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2202      	movs	r2, #2
 80016b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016b8:	e00b      	b.n	80016d2 <HAL_TIM_PWM_Start+0xaa>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d104      	bne.n	80016ca <HAL_TIM_PWM_Start+0xa2>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016c8:	e003      	b.n	80016d2 <HAL_TIM_PWM_Start+0xaa>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2201      	movs	r2, #1
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 f9f7 	bl	8002ace <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_TIM_PWM_Start+0x130>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d107      	bne.n	80016fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a16      	ldr	r2, [pc, #88]	; (8001758 <HAL_TIM_PWM_Start+0x130>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d009      	beq.n	8001718 <HAL_TIM_PWM_Start+0xf0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d004      	beq.n	8001718 <HAL_TIM_PWM_Start+0xf0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <HAL_TIM_PWM_Start+0x134>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d111      	bne.n	800173c <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d010      	beq.n	800174c <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800173a:	e007      	b.n	800174c <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40012c00 	.word	0x40012c00
 800175c:	40000400 	.word	0x40000400

08001760 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f9ab 	bl	8002ace <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <HAL_TIM_PWM_Stop+0xc4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d117      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a1a      	ldr	r2, [r3, #32]
 8001788:	f241 1311 	movw	r3, #4369	; 0x1111
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x52>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	f240 4344 	movw	r3, #1092	; 0x444
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d107      	bne.n	80017b2 <HAL_TIM_PWM_Stop+0x52>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80017bc:	4013      	ands	r3, r2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10f      	bne.n	80017e2 <HAL_TIM_PWM_Stop+0x82>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a1a      	ldr	r2, [r3, #32]
 80017c8:	f240 4344 	movw	r3, #1092	; 0x444
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d107      	bne.n	80017e2 <HAL_TIM_PWM_Stop+0x82>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <HAL_TIM_PWM_Stop+0x92>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017f0:	e013      	b.n	800181a <HAL_TIM_PWM_Stop+0xba>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d104      	bne.n	8001802 <HAL_TIM_PWM_Stop+0xa2>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001800:	e00b      	b.n	800181a <HAL_TIM_PWM_Stop+0xba>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d104      	bne.n	8001812 <HAL_TIM_PWM_Stop+0xb2>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001810:	e003      	b.n	800181a <HAL_TIM_PWM_Stop+0xba>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40012c00 	.word	0x40012c00

08001828 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e041      	b.n	80018be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f839 	bl	80018c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2202      	movs	r2, #2
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	4619      	mov	r1, r3
 8001866:	4610      	mov	r0, r2
 8001868:	f000 fdb4 	bl	80023d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d104      	bne.n	80018f2 <HAL_TIM_IC_Start_IT+0x1a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	e013      	b.n	800191a <HAL_TIM_IC_Start_IT+0x42>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d104      	bne.n	8001902 <HAL_TIM_IC_Start_IT+0x2a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	e00b      	b.n	800191a <HAL_TIM_IC_Start_IT+0x42>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b08      	cmp	r3, #8
 8001906:	d104      	bne.n	8001912 <HAL_TIM_IC_Start_IT+0x3a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800190e:	b2db      	uxtb	r3, r3
 8001910:	e003      	b.n	800191a <HAL_TIM_IC_Start_IT+0x42>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001918:	b2db      	uxtb	r3, r3
 800191a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d104      	bne.n	800192c <HAL_TIM_IC_Start_IT+0x54>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e013      	b.n	8001954 <HAL_TIM_IC_Start_IT+0x7c>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d104      	bne.n	800193c <HAL_TIM_IC_Start_IT+0x64>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001938:	b2db      	uxtb	r3, r3
 800193a:	e00b      	b.n	8001954 <HAL_TIM_IC_Start_IT+0x7c>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	2b08      	cmp	r3, #8
 8001940:	d104      	bne.n	800194c <HAL_TIM_IC_Start_IT+0x74>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e003      	b.n	8001954 <HAL_TIM_IC_Start_IT+0x7c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001952:	b2db      	uxtb	r3, r3
 8001954:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d102      	bne.n	8001962 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0ae      	b.n	8001ac4 <HAL_TIM_IC_Start_IT+0x1ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d104      	bne.n	8001976 <HAL_TIM_IC_Start_IT+0x9e>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001974:	e013      	b.n	800199e <HAL_TIM_IC_Start_IT+0xc6>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	d104      	bne.n	8001986 <HAL_TIM_IC_Start_IT+0xae>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001984:	e00b      	b.n	800199e <HAL_TIM_IC_Start_IT+0xc6>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d104      	bne.n	8001996 <HAL_TIM_IC_Start_IT+0xbe>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001994:	e003      	b.n	800199e <HAL_TIM_IC_Start_IT+0xc6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2202      	movs	r2, #2
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d104      	bne.n	80019ae <HAL_TIM_IC_Start_IT+0xd6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ac:	e013      	b.n	80019d6 <HAL_TIM_IC_Start_IT+0xfe>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d104      	bne.n	80019be <HAL_TIM_IC_Start_IT+0xe6>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019bc:	e00b      	b.n	80019d6 <HAL_TIM_IC_Start_IT+0xfe>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d104      	bne.n	80019ce <HAL_TIM_IC_Start_IT+0xf6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019cc:	e003      	b.n	80019d6 <HAL_TIM_IC_Start_IT+0xfe>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2202      	movs	r2, #2
 80019d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d841      	bhi.n	8001a60 <HAL_TIM_IC_Start_IT+0x188>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_TIM_IC_Start_IT+0x10c>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	08001a19 	.word	0x08001a19
 80019e8:	08001a61 	.word	0x08001a61
 80019ec:	08001a61 	.word	0x08001a61
 80019f0:	08001a61 	.word	0x08001a61
 80019f4:	08001a2b 	.word	0x08001a2b
 80019f8:	08001a61 	.word	0x08001a61
 80019fc:	08001a61 	.word	0x08001a61
 8001a00:	08001a61 	.word	0x08001a61
 8001a04:	08001a3d 	.word	0x08001a3d
 8001a08:	08001a61 	.word	0x08001a61
 8001a0c:	08001a61 	.word	0x08001a61
 8001a10:	08001a61 	.word	0x08001a61
 8001a14:	08001a4f 	.word	0x08001a4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0202 	orr.w	r2, r2, #2
 8001a26:	60da      	str	r2, [r3, #12]
      break;
 8001a28:	e01b      	b.n	8001a62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0204 	orr.w	r2, r2, #4
 8001a38:	60da      	str	r2, [r3, #12]
      break;
 8001a3a:	e012      	b.n	8001a62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	60da      	str	r2, [r3, #12]
      break;
 8001a4c:	e009      	b.n	8001a62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0210 	orr.w	r2, r2, #16
 8001a5c:	60da      	str	r2, [r3, #12]
      break;
 8001a5e:	e000      	b.n	8001a62 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001a60:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2201      	movs	r2, #1
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f001 f82f 	bl	8002ace <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a15      	ldr	r2, [pc, #84]	; (8001acc <HAL_TIM_IC_Start_IT+0x1f4>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d009      	beq.n	8001a8e <HAL_TIM_IC_Start_IT+0x1b6>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a82:	d004      	beq.n	8001a8e <HAL_TIM_IC_Start_IT+0x1b6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_TIM_IC_Start_IT+0x1f8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d111      	bne.n	8001ab2 <HAL_TIM_IC_Start_IT+0x1da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d010      	beq.n	8001ac2 <HAL_TIM_IC_Start_IT+0x1ea>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab0:	e007      	b.n	8001ac2 <HAL_TIM_IC_Start_IT+0x1ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 0201 	orr.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d841      	bhi.n	8001b68 <HAL_TIM_IC_Stop_IT+0x94>
 8001ae4:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <HAL_TIM_IC_Stop_IT+0x18>)
 8001ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aea:	bf00      	nop
 8001aec:	08001b21 	.word	0x08001b21
 8001af0:	08001b69 	.word	0x08001b69
 8001af4:	08001b69 	.word	0x08001b69
 8001af8:	08001b69 	.word	0x08001b69
 8001afc:	08001b33 	.word	0x08001b33
 8001b00:	08001b69 	.word	0x08001b69
 8001b04:	08001b69 	.word	0x08001b69
 8001b08:	08001b69 	.word	0x08001b69
 8001b0c:	08001b45 	.word	0x08001b45
 8001b10:	08001b69 	.word	0x08001b69
 8001b14:	08001b69 	.word	0x08001b69
 8001b18:	08001b69 	.word	0x08001b69
 8001b1c:	08001b57 	.word	0x08001b57
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0202 	bic.w	r2, r2, #2
 8001b2e:	60da      	str	r2, [r3, #12]
      break;
 8001b30:	e01b      	b.n	8001b6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	60da      	str	r2, [r3, #12]
      break;
 8001b42:	e012      	b.n	8001b6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0208 	bic.w	r2, r2, #8
 8001b52:	60da      	str	r2, [r3, #12]
      break;
 8001b54:	e009      	b.n	8001b6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0210 	bic.w	r2, r2, #16
 8001b64:	60da      	str	r2, [r3, #12]
      break;
 8001b66:	e000      	b.n	8001b6a <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8001b68:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 ffab 	bl	8002ace <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001b82:	4013      	ands	r3, r2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10f      	bne.n	8001ba8 <HAL_TIM_IC_Stop_IT+0xd4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	f240 4344 	movw	r3, #1092	; 0x444
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <HAL_TIM_IC_Stop_IT+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0201 	bic.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <HAL_TIM_IC_Stop_IT+0xe4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb6:	e013      	b.n	8001be0 <HAL_TIM_IC_Stop_IT+0x10c>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d104      	bne.n	8001bc8 <HAL_TIM_IC_Stop_IT+0xf4>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bc6:	e00b      	b.n	8001be0 <HAL_TIM_IC_Stop_IT+0x10c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d104      	bne.n	8001bd8 <HAL_TIM_IC_Stop_IT+0x104>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bd6:	e003      	b.n	8001be0 <HAL_TIM_IC_Stop_IT+0x10c>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <HAL_TIM_IC_Stop_IT+0x11c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bee:	e013      	b.n	8001c18 <HAL_TIM_IC_Stop_IT+0x144>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d104      	bne.n	8001c00 <HAL_TIM_IC_Stop_IT+0x12c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bfe:	e00b      	b.n	8001c18 <HAL_TIM_IC_Stop_IT+0x144>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d104      	bne.n	8001c10 <HAL_TIM_IC_Stop_IT+0x13c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0e:	e003      	b.n	8001c18 <HAL_TIM_IC_Stop_IT+0x144>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e041      	b.n	8001cbc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f839 	bl	8001cc4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2202      	movs	r2, #2
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4610      	mov	r0, r2
 8001c66:	f000 fbb5 	bl	80023d4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0208 	bic.w	r2, r2, #8
 8001c78:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d122      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d11b      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0202 	mvn.w	r2, #2
 8001d02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f001 f933 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8001d1e:	e005      	b.n	8001d2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fb3b 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fb41 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d122      	bne.n	8001d86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d11b      	bne.n	8001d86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0204 	mvn.w	r2, #4
 8001d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f001 f909 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8001d72:	e005      	b.n	8001d80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb11 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fb17 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d122      	bne.n	8001dda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11b      	bne.n	8001dda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0208 	mvn.w	r2, #8
 8001daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f001 f8df 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8001dc6:	e005      	b.n	8001dd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fae7 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 faed 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d122      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d11b      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0210 	mvn.w	r2, #16
 8001dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2208      	movs	r2, #8
 8001e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f001 f8b5 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8001e1a:	e005      	b.n	8001e28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fabd 	bl	800239c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fac3 	bl	80023ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0201 	mvn.w	r2, #1
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f001 f881 	bl	8002f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d10e      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b80      	cmp	r3, #128	; 0x80
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 feaa 	bl	8002bda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d10e      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fa87 	bl	80023c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d10e      	bne.n	8001ede <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d107      	bne.n	8001ede <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f06f 0220 	mvn.w	r2, #32
 8001ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fe75 	bl	8002bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e082      	b.n	8002006 <HAL_TIM_IC_ConfigChannel+0x120>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11b      	bne.n	8001f46 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f000 fc39 	bl	8002794 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 020c 	bic.w	r2, r2, #12
 8001f30:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6999      	ldr	r1, [r3, #24]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	619a      	str	r2, [r3, #24]
 8001f44:	e05a      	b.n	8001ffc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11c      	bne.n	8001f86 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6819      	ldr	r1, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f000 fc9c 	bl	8002898 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f6e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6999      	ldr	r1, [r3, #24]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	021a      	lsls	r2, r3, #8
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	619a      	str	r2, [r3, #24]
 8001f84:	e03a      	b.n	8001ffc <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d11b      	bne.n	8001fc4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f000 fce7 	bl	800296e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 020c 	bic.w	r2, r2, #12
 8001fae:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69d9      	ldr	r1, [r3, #28]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	61da      	str	r2, [r3, #28]
 8001fc2:	e01b      	b.n	8001ffc <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f000 fd06 	bl	80029e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001fe6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69d9      	ldr	r1, [r3, #28]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	021a      	lsls	r2, r3, #8
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002026:	2302      	movs	r3, #2
 8002028:	e0ac      	b.n	8002184 <HAL_TIM_PWM_ConfigChannel+0x174>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	f200 809f 	bhi.w	8002178 <HAL_TIM_PWM_ConfigChannel+0x168>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002075 	.word	0x08002075
 8002044:	08002179 	.word	0x08002179
 8002048:	08002179 	.word	0x08002179
 800204c:	08002179 	.word	0x08002179
 8002050:	080020b5 	.word	0x080020b5
 8002054:	08002179 	.word	0x08002179
 8002058:	08002179 	.word	0x08002179
 800205c:	08002179 	.word	0x08002179
 8002060:	080020f7 	.word	0x080020f7
 8002064:	08002179 	.word	0x08002179
 8002068:	08002179 	.word	0x08002179
 800206c:	08002179 	.word	0x08002179
 8002070:	08002137 	.word	0x08002137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fa02 	bl	8002484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6999      	ldr	r1, [r3, #24]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	619a      	str	r2, [r3, #24]
      break;
 80020b2:	e062      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68b9      	ldr	r1, [r7, #8]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fa48 	bl	8002550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6999      	ldr	r1, [r3, #24]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	021a      	lsls	r2, r3, #8
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	619a      	str	r2, [r3, #24]
      break;
 80020f4:	e041      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 fa91 	bl	8002624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0208 	orr.w	r2, r2, #8
 8002110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69d9      	ldr	r1, [r3, #28]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
      break;
 8002134:	e021      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fadb 	bl	80026f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69d9      	ldr	r1, [r3, #28]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	61da      	str	r2, [r3, #28]
      break;
 8002176:	e000      	b.n	800217a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x18>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0b3      	b.n	800230c <HAL_TIM_ConfigClockSource+0x180>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021dc:	d03e      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd0>
 80021de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e2:	f200 8087 	bhi.w	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ea:	f000 8085 	beq.w	80022f8 <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	d87f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d01a      	beq.n	800222e <HAL_TIM_ConfigClockSource+0xa2>
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d87b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 80021fc:	2b60      	cmp	r3, #96	; 0x60
 80021fe:	d050      	beq.n	80022a2 <HAL_TIM_ConfigClockSource+0x116>
 8002200:	2b60      	cmp	r3, #96	; 0x60
 8002202:	d877      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d03c      	beq.n	8002282 <HAL_TIM_ConfigClockSource+0xf6>
 8002208:	2b50      	cmp	r3, #80	; 0x50
 800220a:	d873      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d058      	beq.n	80022c2 <HAL_TIM_ConfigClockSource+0x136>
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d86f      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b30      	cmp	r3, #48	; 0x30
 8002216:	d064      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d86b      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b20      	cmp	r3, #32
 800221e:	d060      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002220:	2b20      	cmp	r3, #32
 8002222:	d867      	bhi.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d05c      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
 8002228:	2b10      	cmp	r3, #16
 800222a:	d05a      	beq.n	80022e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800222c:	e062      	b.n	80022f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f000 fc27 	bl	8002a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	609a      	str	r2, [r3, #8]
      break;
 800225a:	e04e      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6899      	ldr	r1, [r3, #8]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f000 fc10 	bl	8002a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800227e:	609a      	str	r2, [r3, #8]
      break;
 8002280:	e03b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6818      	ldr	r0, [r3, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	461a      	mov	r2, r3
 8002290:	f000 fad4 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fbde 	bl	8002a5c <TIM_ITRx_SetConfig>
      break;
 80022a0:	e02b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	461a      	mov	r2, r3
 80022b0:	f000 fb2e 	bl	8002910 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2160      	movs	r1, #96	; 0x60
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fbce 	bl	8002a5c <TIM_ITRx_SetConfig>
      break;
 80022c0:	e01b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	461a      	mov	r2, r3
 80022d0:	f000 fab4 	bl	800283c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fbbe 	bl	8002a5c <TIM_ITRx_SetConfig>
      break;
 80022e0:	e00b      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f000 fbb5 	bl	8002a5c <TIM_ITRx_SetConfig>
        break;
 80022f2:	e002      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f4:	bf00      	nop
 80022f6:	e000      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d831      	bhi.n	800238c <HAL_TIM_ReadCapturedValue+0x78>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <HAL_TIM_ReadCapturedValue+0x1c>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002365 	.word	0x08002365
 8002334:	0800238d 	.word	0x0800238d
 8002338:	0800238d 	.word	0x0800238d
 800233c:	0800238d 	.word	0x0800238d
 8002340:	0800236f 	.word	0x0800236f
 8002344:	0800238d 	.word	0x0800238d
 8002348:	0800238d 	.word	0x0800238d
 800234c:	0800238d 	.word	0x0800238d
 8002350:	08002379 	.word	0x08002379
 8002354:	0800238d 	.word	0x0800238d
 8002358:	0800238d 	.word	0x0800238d
 800235c:	0800238d 	.word	0x0800238d
 8002360:	08002383 	.word	0x08002383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	60fb      	str	r3, [r7, #12]

      break;
 800236c:	e00f      	b.n	800238e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	60fb      	str	r3, [r7, #12]

      break;
 8002376:	e00a      	b.n	800238e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	60fb      	str	r3, [r7, #12]

      break;
 8002380:	e005      	b.n	800238e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	60fb      	str	r3, [r7, #12]

      break;
 800238a:	e000      	b.n	800238e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800238c:	bf00      	nop
  }

  return tmpreg;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
	...

080023d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0xa8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d007      	beq.n	80023fc <TIM_Base_SetConfig+0x28>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d003      	beq.n	80023fc <TIM_Base_SetConfig+0x28>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <TIM_Base_SetConfig+0xac>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1a      	ldr	r2, [pc, #104]	; (800247c <TIM_Base_SetConfig+0xa8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <TIM_Base_SetConfig+0x52>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d003      	beq.n	8002426 <TIM_Base_SetConfig+0x52>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <TIM_Base_SetConfig+0xac>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a07      	ldr	r2, [pc, #28]	; (800247c <TIM_Base_SetConfig+0xa8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d103      	bne.n	800246c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	615a      	str	r2, [r3, #20]
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40000400 	.word	0x40000400

08002484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	f023 0201 	bic.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f023 0302 	bic.w	r3, r3, #2
 80024cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <TIM_OC1_SetConfig+0xc8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d10c      	bne.n	80024fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f023 0308 	bic.w	r3, r3, #8
 80024e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a13      	ldr	r2, [pc, #76]	; (800254c <TIM_OC1_SetConfig+0xc8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d111      	bne.n	8002526 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	621a      	str	r2, [r3, #32]
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40012c00 	.word	0x40012c00

08002550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0210 	bic.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4313      	orrs	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0320 	bic.w	r3, r3, #32
 800259a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <TIM_OC2_SetConfig+0xd0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10d      	bne.n	80025cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a14      	ldr	r2, [pc, #80]	; (8002620 <TIM_OC2_SetConfig+0xd0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d113      	bne.n	80025fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	621a      	str	r2, [r3, #32]
}
 8002616:	bf00      	nop
 8002618:	371c      	adds	r7, #28
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	40012c00 	.word	0x40012c00

08002624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800266c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4313      	orrs	r3, r2
 8002678:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <TIM_OC3_SetConfig+0xd0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10d      	bne.n	800269e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	4313      	orrs	r3, r2
 8002694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800269c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <TIM_OC3_SetConfig+0xd0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d113      	bne.n	80026ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	621a      	str	r2, [r3, #32]
}
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	031b      	lsls	r3, r3, #12
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <TIM_OC4_SetConfig+0x98>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d109      	bne.n	800276c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40012c00 	.word	0x40012c00

08002794 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0201 	bic.w	r2, r3, #1
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <TIM_TI1_SetConfig+0xa0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <TIM_TI1_SetConfig+0x3e>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d003      	beq.n	80027d2 <TIM_TI1_SetConfig+0x3e>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <TIM_TI1_SetConfig+0xa4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <TIM_TI1_SetConfig+0x42>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e000      	b.n	80027d8 <TIM_TI1_SetConfig+0x44>
 80027d6:	2300      	movs	r3, #0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e003      	b.n	80027f6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	b2db      	uxtb	r3, r3
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f023 030a 	bic.w	r3, r3, #10
 8002810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 030a 	and.w	r3, r3, #10
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400

0800283c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f023 0201 	bic.w	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f023 030a 	bic.w	r3, r3, #10
 8002878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 0210 	bic.w	r2, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	031b      	lsls	r3, r3, #12
 80028dc:	b29b      	uxth	r3, r3
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	f023 0210 	bic.w	r2, r3, #16
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	031b      	lsls	r3, r3, #12
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4313      	orrs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800294c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800296e:	b480      	push	{r7}
 8002970:	b087      	sub	sp, #28
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	621a      	str	r2, [r3, #32]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	031b      	lsls	r3, r3, #12
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	031b      	lsls	r3, r3, #12
 8002a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f043 0307 	orr.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	021a      	lsls	r2, r3, #8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	401a      	ands	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	431a      	orrs	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e041      	b.n	8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d009      	beq.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7c:	d004      	beq.n	8002b88 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10c      	bne.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e03f      	b.n	8002c7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fdee 	bl	80037f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f905 	bl	8002e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b08a      	sub	sp, #40	; 0x28
 8002c8a:	af02      	add	r7, sp, #8
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	603b      	str	r3, [r7, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d17c      	bne.n	8002da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d002      	beq.n	8002cb2 <HAL_UART_Transmit+0x2c>
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e075      	b.n	8002da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_UART_Transmit+0x3e>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e06e      	b.n	8002da2 <HAL_UART_Transmit+0x11c>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2221      	movs	r2, #33	; 0x21
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cda:	f7fd fd13 	bl	8000704 <HAL_GetTick>
 8002cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf4:	d108      	bne.n	8002d08 <HAL_UART_Transmit+0x82>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d104      	bne.n	8002d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e003      	b.n	8002d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d18:	e02a      	b.n	8002d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2180      	movs	r1, #128	; 0x80
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f840 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e036      	b.n	8002da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	e007      	b.n	8002d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1cf      	bne.n	8002d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2200      	movs	r2, #0
 8002d82:	2140      	movs	r1, #64	; 0x40
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f810 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e006      	b.n	8002da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e000      	b.n	8002da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002da0:	2302      	movs	r3, #2
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	e02c      	b.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d028      	beq.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d007      	beq.n	8002dda <UART_WaitOnFlagUntilTimeout+0x30>
 8002dca:	f7fd fc9b 	bl	8000704 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d21d      	bcs.n	8002e16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002de8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e00f      	b.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d0c3      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e7a:	f023 030c 	bic.w	r3, r3, #12
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	68b9      	ldr	r1, [r7, #8]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2c      	ldr	r2, [pc, #176]	; (8002f54 <UART_SetConfig+0x114>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d103      	bne.n	8002eb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7fe fae4 	bl	8001474 <HAL_RCC_GetPCLK2Freq>
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	e002      	b.n	8002eb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eb0:	f7fe facc 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002eb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009a      	lsls	r2, r3, #2
 8002ec0:	441a      	add	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <UART_SetConfig+0x118>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	0119      	lsls	r1, r3, #4
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <UART_SetConfig+0x118>)
 8002eee:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	2064      	movs	r0, #100	; 0x64
 8002ef6:	fb00 f303 	mul.w	r3, r0, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <UART_SetConfig+0x118>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0c:	4419      	add	r1, r3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009a      	lsls	r2, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <UART_SetConfig+0x118>)
 8002f26:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2064      	movs	r0, #100	; 0x64
 8002f2e:	fb00 f303 	mul.w	r3, r0, r3
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	3332      	adds	r3, #50	; 0x32
 8002f38:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <UART_SetConfig+0x118>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	f003 020f 	and.w	r2, r3, #15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	440a      	add	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40013800 	.word	0x40013800
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <HAL_TIM_PeriodElapsedCallback>:
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
static volatile int pulseEND=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  if(htim == &htim3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d102      	bne.n	8002f72 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    pulseEND = 1 ;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
  }

}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000120 	.word	0x20000120
 8002f80:	200001ac 	.word	0x200001ac

08002f84 <HAL_TIM_IC_CaptureCallback>:

int Is_First_Captured = 0;
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7f1b      	ldrb	r3, [r3, #28]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d15e      	bne.n	8003052 <HAL_TIM_IC_CaptureCallback+0xce>
    {
      if (Is_First_Captured==0) // if the first rising edge is not captured
 8002f94:	4b31      	ldr	r3, [pc, #196]	; (800305c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_TIM_IC_CaptureCallback+0x2e>
      {
        IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 8002f9c:	210c      	movs	r1, #12
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff f9b8 	bl	8002314 <HAL_TIM_ReadCapturedValue>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002fa8:	6013      	str	r3, [r2, #0]
        Is_First_Captured = 1;  // set the first captured as true
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart1,MSG, sizeof(MSG), 100);
          __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
        Is_First_Captured = 0; // set it back to false
      }
    }
}
 8002fb0:	e04f      	b.n	8003052 <HAL_TIM_IC_CaptureCallback+0xce>
        IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 8002fb2:	210c      	movs	r1, #12
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff f9ad 	bl	8002314 <HAL_TIM_ReadCapturedValue>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4a29      	ldr	r2, [pc, #164]	; (8003064 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002fbe:	6013      	str	r3, [r2, #0]
        if (IC_Val2 > IC_Val1)
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d907      	bls.n	8002fdc <HAL_TIM_IC_CaptureCallback+0x58>
          Difference = IC_Val2-IC_Val1;
 8002fcc:	4b25      	ldr	r3, [pc, #148]	; (8003064 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00d      	b.n	8002ff8 <HAL_TIM_IC_CaptureCallback+0x74>
        else if (IC_Val1 > IC_Val2)
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b20      	ldr	r3, [pc, #128]	; (8003064 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d907      	bls.n	8002ff8 <HAL_TIM_IC_CaptureCallback+0x74>
          Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	; (8003068 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002ff6:	6013      	str	r3, [r2, #0]
        float refClock = TIMCLOCK/(PRESCALAR);
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8002ffa:	60fb      	str	r3, [r7, #12]
        frequency = refClock/Difference;
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd f959 	bl	80002b8 <__aeabi_ui2f>
 8003006:	4603      	mov	r3, r0
 8003008:	4619      	mov	r1, r3
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7fd fa60 	bl	80004d0 <__aeabi_fdiv>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_TIM_IC_CaptureCallback+0xec>)
 8003016:	601a      	str	r2, [r3, #0]
        int x = frequency;
 8003018:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_TIM_IC_CaptureCallback+0xec>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd faf3 	bl	8000608 <__aeabi_f2iz>
 8003022:	4603      	mov	r3, r0
 8003024:	60bb      	str	r3, [r7, #8]
        x-=ERRUR;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800302c:	60bb      	str	r3, [r7, #8]
        sprintf(MSG,"result = %d \n\r",x);
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4910      	ldr	r1, [pc, #64]	; (8003074 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8003032:	4811      	ldr	r0, [pc, #68]	; (8003078 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8003034:	f000 fd00 	bl	8003a38 <siprintf>
        HAL_UART_Transmit(&huart1,MSG, sizeof(MSG), 100);
 8003038:	2364      	movs	r3, #100	; 0x64
 800303a:	2232      	movs	r2, #50	; 0x32
 800303c:	490e      	ldr	r1, [pc, #56]	; (8003078 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800303e:	480f      	ldr	r0, [pc, #60]	; (800307c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8003040:	f7ff fe21 	bl	8002c86 <HAL_UART_Transmit>
          __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
        Is_First_Captured = 0; // set it back to false
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <HAL_TIM_IC_CaptureCallback+0xd8>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	200001f0 	.word	0x200001f0
 8003060:	200001b0 	.word	0x200001b0
 8003064:	200001b4 	.word	0x200001b4
 8003068:	200001b8 	.word	0x200001b8
 800306c:	49742400 	.word	0x49742400
 8003070:	200001f4 	.word	0x200001f4
 8003074:	08004354 	.word	0x08004354
 8003078:	200001bc 	.word	0x200001bc
 800307c:	20000168 	.word	0x20000168

08003080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003086:	f7fd fae5 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800308a:	f000 f889 	bl	80031a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800308e:	f000 fa79 	bl	8003584 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003092:	f000 f8c7 	bl	8003224 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003096:	f000 f939 	bl	800330c <MX_TIM2_Init>
  MX_TIM3_Init();
 800309a:	f000 f9b7 	bl	800340c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800309e:	f000 fa47 	bl	8003530 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_SET)
 80030a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a6:	4838      	ldr	r0, [pc, #224]	; (8003188 <main+0x108>)
 80030a8:	f7fd fde4 	bl	8000c74 <HAL_GPIO_ReadPin>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d11b      	bne.n	80030ea <main+0x6a>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //start the TIMER 3 in PWM MODE
 80030b2:	2108      	movs	r1, #8
 80030b4:	4835      	ldr	r0, [pc, #212]	; (800318c <main+0x10c>)
 80030b6:	f7fe fab7 	bl	8001628 <HAL_TIM_PWM_Start>
      HAL_Delay(1000);                          //1 second delay
 80030ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030be:	f7fd fb2b 	bl	8000718 <HAL_Delay>
      TIM3->ARR = 1 ;                           // signal period of the PWM
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <main+0x110>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
      __HAL_TIM_ENABLE(&htim3);                 //ENable TIM3
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <main+0x10c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <main+0x10c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
      while(!pulseEND){};
 80030d8:	bf00      	nop
 80030da:	4b2e      	ldr	r3, [pc, #184]	; (8003194 <main+0x114>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0fb      	beq.n	80030da <main+0x5a>
      pulseEND=0;
 80030e2:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <main+0x114>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e7db      	b.n	80030a2 <main+0x22>
    }
    else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)==GPIO_PIN_SET)
 80030ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ee:	4826      	ldr	r0, [pc, #152]	; (8003188 <main+0x108>)
 80030f0:	f7fd fdc0 	bl	8000c74 <HAL_GPIO_ReadPin>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d120      	bne.n	800313c <main+0xbc>
    {
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //start the TIMER 2 in PWM MODE
 80030fa:	2104      	movs	r1, #4
 80030fc:	4826      	ldr	r0, [pc, #152]	; (8003198 <main+0x118>)
 80030fe:	f7fe fa93 	bl	8001628 <HAL_TIM_PWM_Start>
      uint32_t CH1;
      while (CH1 < 99 )
 8003102:	e009      	b.n	8003118 <main+0x98>
      {
        TIM2->CCR2 = CH1;
 8003104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6393      	str	r3, [r2, #56]	; 0x38
        CH1+= 1 ;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3301      	adds	r3, #1
 8003110:	607b      	str	r3, [r7, #4]
        HAL_Delay(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd fb00 	bl	8000718 <HAL_Delay>
      while (CH1 < 99 )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b62      	cmp	r3, #98	; 0x62
 800311c:	d9f2      	bls.n	8003104 <main+0x84>

      }
      while (CH1 > 0 )
 800311e:	e009      	b.n	8003134 <main+0xb4>
            {
              TIM2->CCR2 = CH1;
 8003120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6393      	str	r3, [r2, #56]	; 0x38
              CH1-= 1 ;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	607b      	str	r3, [r7, #4]
              HAL_Delay(1);
 800312e:	2001      	movs	r0, #1
 8003130:	f7fd faf2 	bl	8000718 <HAL_Delay>
      while (CH1 > 0 )
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f2      	bne.n	8003120 <main+0xa0>
 800313a:	e7b2      	b.n	80030a2 <main+0x22>
              }
    }
    else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)==GPIO_PIN_SET)
 800313c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003140:	4811      	ldr	r0, [pc, #68]	; (8003188 <main+0x108>)
 8003142:	f7fd fd97 	bl	8000c74 <HAL_GPIO_ReadPin>
 8003146:	4603      	mov	r3, r0
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10c      	bne.n	8003166 <main+0xe6>
    {
      TIM2->CCR3 = 50; //set the PWM duty cycle of TIMER2 to 50%
 800314c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003150:	2232      	movs	r2, #50	; 0x32
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //start the PWM signal on TIM2
 8003154:	2108      	movs	r1, #8
 8003156:	4810      	ldr	r0, [pc, #64]	; (8003198 <main+0x118>)
 8003158:	f7fe fa66 	bl	8001628 <HAL_TIM_PWM_Start>
      HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);//starts an interrupt-based input capture operation TIM1
 800315c:	210c      	movs	r1, #12
 800315e:	480f      	ldr	r0, [pc, #60]	; (800319c <main+0x11c>)
 8003160:	f7fe fbba 	bl	80018d8 <HAL_TIM_IC_Start_IT>
 8003164:	e79d      	b.n	80030a2 <main+0x22>
    }
    else
    {
      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003166:	2104      	movs	r1, #4
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <main+0x118>)
 800316a:	f7fe faf9 	bl	8001760 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800316e:	2108      	movs	r1, #8
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <main+0x118>)
 8003172:	f7fe faf5 	bl	8001760 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003176:	2104      	movs	r1, #4
 8003178:	4804      	ldr	r0, [pc, #16]	; (800318c <main+0x10c>)
 800317a:	f7fe faf1 	bl	8001760 <HAL_TIM_PWM_Stop>
      HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_4);
 800317e:	210c      	movs	r1, #12
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <main+0x11c>)
 8003182:	f7fe fca7 	bl	8001ad4 <HAL_TIM_IC_Stop_IT>
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)==GPIO_PIN_SET)
 8003186:	e78c      	b.n	80030a2 <main+0x22>
 8003188:	40010c00 	.word	0x40010c00
 800318c:	20000120 	.word	0x20000120
 8003190:	40000400 	.word	0x40000400
 8003194:	200001ac 	.word	0x200001ac
 8003198:	200000d8 	.word	0x200000d8
 800319c:	20000090 	.word	0x20000090

080031a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b090      	sub	sp, #64	; 0x40
 80031a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031a6:	f107 0318 	add.w	r3, r7, #24
 80031aa:	2228      	movs	r2, #40	; 0x28
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fc3a 	bl	8003a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031c6:	2301      	movs	r3, #1
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031ca:	2310      	movs	r3, #16
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ce:	2302      	movs	r3, #2
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80031d2:	2300      	movs	r3, #0
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80031d6:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd fd5f 	bl	8000ca4 <HAL_RCC_OscConfig>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80031ec:	f000 fa02 	bl	80035f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031f0:	230f      	movs	r3, #15
 80031f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031f4:	2302      	movs	r3, #2
 80031f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2102      	movs	r1, #2
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd ffcc 	bl	80011a8 <HAL_RCC_ClockConfig>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003216:	f000 f9ed 	bl	80035f4 <Error_Handler>
  }
}
 800321a:	bf00      	nop
 800321c:	3740      	adds	r7, #64	; 0x40
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0318 	add.w	r3, r7, #24
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	f107 0310 	add.w	r3, r7, #16
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003242:	463b      	mov	r3, r7
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800324e:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003250:	4a2d      	ldr	r2, [pc, #180]	; (8003308 <MX_TIM1_Init+0xe4>)
 8003252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 60-1;
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003256:	223b      	movs	r2, #59	; 0x3b
 8003258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <MX_TIM1_Init+0xe0>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003268:	4b26      	ldr	r3, [pc, #152]	; (8003304 <MX_TIM1_Init+0xe0>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003270:	2200      	movs	r2, #0
 8003272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800327a:	4822      	ldr	r0, [pc, #136]	; (8003304 <MX_TIM1_Init+0xe0>)
 800327c:	f7fe f92c 	bl	80014d8 <HAL_TIM_Base_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8003286:	f000 f9b5 	bl	80035f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800328e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003290:	f107 0318 	add.w	r3, r7, #24
 8003294:	4619      	mov	r1, r3
 8003296:	481b      	ldr	r0, [pc, #108]	; (8003304 <MX_TIM1_Init+0xe0>)
 8003298:	f7fe ff78 	bl	800218c <HAL_TIM_ConfigClockSource>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80032a2:	f000 f9a7 	bl	80035f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80032a6:	4817      	ldr	r0, [pc, #92]	; (8003304 <MX_TIM1_Init+0xe0>)
 80032a8:	f7fe fabe 	bl	8001828 <HAL_TIM_IC_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80032b2:	f000 f99f 	bl	80035f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032be:	f107 0310 	add.w	r3, r7, #16
 80032c2:	4619      	mov	r1, r3
 80032c4:	480f      	ldr	r0, [pc, #60]	; (8003304 <MX_TIM1_Init+0xe0>)
 80032c6:	f7ff fc27 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80032d0:	f000 f990 	bl	80035f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032d4:	2300      	movs	r3, #0
 80032d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032d8:	2301      	movs	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80032e4:	463b      	mov	r3, r7
 80032e6:	220c      	movs	r2, #12
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_TIM1_Init+0xe0>)
 80032ec:	f7fe fdfb 	bl	8001ee6 <HAL_TIM_IC_ConfigChannel>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80032f6:	f000 f97d 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3728      	adds	r7, #40	; 0x28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000090 	.word	0x20000090
 8003308:	40012c00 	.word	0x40012c00

0800330c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08e      	sub	sp, #56	; 0x38
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	f107 0320 	add.w	r3, r7, #32
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <MX_TIM2_Init+0xfc>)
 800333e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003346:	223b      	movs	r2, #59	; 0x3b
 8003348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b2f      	ldr	r3, [pc, #188]	; (8003408 <MX_TIM2_Init+0xfc>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003352:	2263      	movs	r2, #99	; 0x63
 8003354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <MX_TIM2_Init+0xfc>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003362:	4829      	ldr	r0, [pc, #164]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003364:	f7fe f8b8 	bl	80014d8 <HAL_TIM_Base_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800336e:	f000 f941 	bl	80035f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337c:	4619      	mov	r1, r3
 800337e:	4822      	ldr	r0, [pc, #136]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003380:	f7fe ff04 	bl	800218c <HAL_TIM_ConfigClockSource>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800338a:	f000 f933 	bl	80035f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800338e:	481e      	ldr	r0, [pc, #120]	; (8003408 <MX_TIM2_Init+0xfc>)
 8003390:	f7fe f8f1 	bl	8001576 <HAL_TIM_PWM_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800339a:	f000 f92b 	bl	80035f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033a6:	f107 0320 	add.w	r3, r7, #32
 80033aa:	4619      	mov	r1, r3
 80033ac:	4816      	ldr	r0, [pc, #88]	; (8003408 <MX_TIM2_Init+0xfc>)
 80033ae:	f7ff fbb3 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80033b8:	f000 f91c 	bl	80035f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033bc:	2360      	movs	r3, #96	; 0x60
 80033be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	2204      	movs	r2, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	480d      	ldr	r0, [pc, #52]	; (8003408 <MX_TIM2_Init+0xfc>)
 80033d4:	f7fe fe1c 	bl	8002010 <HAL_TIM_PWM_ConfigChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80033de:	f000 f909 	bl	80035f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	2208      	movs	r2, #8
 80033e6:	4619      	mov	r1, r3
 80033e8:	4807      	ldr	r0, [pc, #28]	; (8003408 <MX_TIM2_Init+0xfc>)
 80033ea:	f7fe fe11 	bl	8002010 <HAL_TIM_PWM_ConfigChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80033f4:	f000 f8fe 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033f8:	4803      	ldr	r0, [pc, #12]	; (8003408 <MX_TIM2_Init+0xfc>)
 80033fa:	f000 f9a9 	bl	8003750 <HAL_TIM_MspPostInit>

}
 80033fe:	bf00      	nop
 8003400:	3738      	adds	r7, #56	; 0x38
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200000d8 	.word	0x200000d8

0800340c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	605a      	str	r2, [r3, #4]
 800341c:	609a      	str	r2, [r3, #8]
 800341e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003420:	f107 0320 	add.w	r3, r7, #32
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800343c:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <MX_TIM3_Init+0x11c>)
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <MX_TIM3_Init+0x120>)
 8003440:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000-1;
 8003442:	4b39      	ldr	r3, [pc, #228]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003444:	f241 726f 	movw	r2, #5999	; 0x176f
 8003448:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <MX_TIM3_Init+0x11c>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003452:	220a      	movs	r2, #10
 8003454:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003458:	2200      	movs	r2, #0
 800345a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <MX_TIM3_Init+0x11c>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003462:	4831      	ldr	r0, [pc, #196]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003464:	f7fe f838 	bl	80014d8 <HAL_TIM_Base_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800346e:	f000 f8c1 	bl	80035f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800347c:	4619      	mov	r1, r3
 800347e:	482a      	ldr	r0, [pc, #168]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003480:	f7fe fe84 	bl	800218c <HAL_TIM_ConfigClockSource>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800348a:	f000 f8b3 	bl	80035f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800348e:	4826      	ldr	r0, [pc, #152]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003490:	f7fe f871 	bl	8001576 <HAL_TIM_PWM_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800349a:	f000 f8ab 	bl	80035f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800349e:	2108      	movs	r1, #8
 80034a0:	4821      	ldr	r0, [pc, #132]	; (8003528 <MX_TIM3_Init+0x11c>)
 80034a2:	f7fe fbbf 	bl	8001c24 <HAL_TIM_OnePulse_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80034ac:	f000 f8a2 	bl	80035f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034b0:	2300      	movs	r3, #0
 80034b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034b8:	f107 0320 	add.w	r3, r7, #32
 80034bc:	4619      	mov	r1, r3
 80034be:	481a      	ldr	r0, [pc, #104]	; (8003528 <MX_TIM3_Init+0x11c>)
 80034c0:	f7ff fb2a 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80034ca:	f000 f893 	bl	80035f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80034ce:	2370      	movs	r3, #112	; 0x70
 80034d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	2208      	movs	r2, #8
 80034e2:	4619      	mov	r1, r3
 80034e4:	4810      	ldr	r0, [pc, #64]	; (8003528 <MX_TIM3_Init+0x11c>)
 80034e6:	f7fe fd93 	bl	8002010 <HAL_TIM_PWM_ConfigChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 80034f0:	f000 f880 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

    //Enable output of the peripherals OC3 before start of the timer
    //After GPIO pin initialization  for alternative function AF the pin state will reflect  OC3
      TIM_CCxChannelCmd(&htim3.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 80034f4:	2201      	movs	r2, #1
 80034f6:	2108      	movs	r1, #8
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <MX_TIM3_Init+0x11c>)
 80034fa:	f7ff fae8 	bl	8002ace <TIM_CCxChannelCmd>
    //clear the interrupt bit in SR that was set as side effect of generating an update event in   TIM_Base_setConfig
     __HAL_TIM_CLEAR_IT(&htim3,TIM_IT_UPDATE);
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f06f 0201 	mvn.w	r2, #1
 8003506:	611a      	str	r2, [r3, #16]
    //enable the Timer update interrupt
     __HAL_TIM_ENABLE_IT(&htim3,TIM_IT_UPDATE);
 8003508:	4b07      	ldr	r3, [pc, #28]	; (8003528 <MX_TIM3_Init+0x11c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <MX_TIM3_Init+0x11c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <MX_TIM3_Init+0x11c>)
 800351a:	f000 f919 	bl	8003750 <HAL_TIM_MspPostInit>

}
 800351e:	bf00      	nop
 8003520:	3738      	adds	r7, #56	; 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000120 	.word	0x20000120
 800352c:	40000400 	.word	0x40000400

08003530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <MX_USART1_UART_Init+0x50>)
 8003538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800353c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003556:	220c      	movs	r2, #12
 8003558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003568:	f7ff fb40 	bl	8002bec <HAL_UART_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003572:	f000 f83f 	bl	80035f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000168 	.word	0x20000168
 8003580:	40013800 	.word	0x40013800

08003584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	f107 0308 	add.w	r3, r7, #8
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_GPIO_Init+0x68>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4a13      	ldr	r2, [pc, #76]	; (80035ec <MX_GPIO_Init+0x68>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6193      	str	r3, [r2, #24]
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <MX_GPIO_Init+0x68>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <MX_GPIO_Init+0x68>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <MX_GPIO_Init+0x68>)
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	6193      	str	r3, [r2, #24]
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <MX_GPIO_Init+0x68>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035c8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80035cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4619      	mov	r1, r3
 80035dc:	4804      	ldr	r0, [pc, #16]	; (80035f0 <MX_GPIO_Init+0x6c>)
 80035de:	f7fd f9cd 	bl	800097c <HAL_GPIO_Init>

}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40010c00 	.word	0x40010c00

080035f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_MspInit+0x5c>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_MspInit+0x5c>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6193      	str	r3, [r2, #24]
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_MspInit+0x5c>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_MspInit+0x5c>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_MspInit+0x5c>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	61d3      	str	r3, [r2, #28]
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_MspInit+0x5c>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_MspInit+0x60>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <HAL_MspInit+0x60>)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40021000 	.word	0x40021000
 8003660:	40010000 	.word	0x40010000

08003664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0318 	add.w	r3, r7, #24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_TIM_Base_MspInit+0xdc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d12d      	bne.n	80036e0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003684:	4b2f      	ldr	r3, [pc, #188]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a2e      	ldr	r2, [pc, #184]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 800368a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b2c      	ldr	r3, [pc, #176]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4b29      	ldr	r3, [pc, #164]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	4a28      	ldr	r2, [pc, #160]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 80036a2:	f043 0304 	orr.w	r3, r3, #4
 80036a6:	6193      	str	r3, [r2, #24]
 80036a8:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	f107 0318 	add.w	r3, r7, #24
 80036c6:	4619      	mov	r1, r3
 80036c8:	481f      	ldr	r0, [pc, #124]	; (8003748 <HAL_TIM_Base_MspInit+0xe4>)
 80036ca:	f7fd f957 	bl	800097c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	201b      	movs	r0, #27
 80036d4:	f7fd f91b 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036d8:	201b      	movs	r0, #27
 80036da:	f7fd f934 	bl	8000946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036de:	e02a      	b.n	8003736 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d10c      	bne.n	8003704 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4a15      	ldr	r2, [pc, #84]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	61d3      	str	r3, [r2, #28]
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	e018      	b.n	8003736 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM3)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_TIM_Base_MspInit+0xe8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d113      	bne.n	8003736 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800370e:	4b0d      	ldr	r3, [pc, #52]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 8003714:	f043 0302 	orr.w	r3, r3, #2
 8003718:	61d3      	str	r3, [r2, #28]
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_TIM_Base_MspInit+0xe0>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	2100      	movs	r1, #0
 800372a:	201d      	movs	r0, #29
 800372c:	f7fd f8ef 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003730:	201d      	movs	r0, #29
 8003732:	f7fd f908 	bl	8000946 <HAL_NVIC_EnableIRQ>
}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40021000 	.word	0x40021000
 8003748:	40010800 	.word	0x40010800
 800374c:	40000400 	.word	0x40000400

08003750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d118      	bne.n	80037a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6193      	str	r3, [r2, #24]
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003788:	2306      	movs	r3, #6
 800378a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2302      	movs	r3, #2
 8003792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4619      	mov	r1, r3
 800379a:	4813      	ldr	r0, [pc, #76]	; (80037e8 <HAL_TIM_MspPostInit+0x98>)
 800379c:	f7fd f8ee 	bl	800097c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037a0:	e01c      	b.n	80037dc <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a11      	ldr	r2, [pc, #68]	; (80037ec <HAL_TIM_MspPostInit+0x9c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d117      	bne.n	80037dc <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 80037b2:	f043 0308 	orr.w	r3, r3, #8
 80037b6:	6193      	str	r3, [r2, #24]
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <HAL_TIM_MspPostInit+0x94>)
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037c4:	2301      	movs	r3, #1
 80037c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c8:	2302      	movs	r3, #2
 80037ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d0:	f107 0310 	add.w	r3, r7, #16
 80037d4:	4619      	mov	r1, r3
 80037d6:	4806      	ldr	r0, [pc, #24]	; (80037f0 <HAL_TIM_MspPostInit+0xa0>)
 80037d8:	f7fd f8d0 	bl	800097c <HAL_GPIO_Init>
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	40010800 	.word	0x40010800
 80037ec:	40000400 	.word	0x40000400
 80037f0:	40010c00 	.word	0x40010c00

080037f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 0314 	add.w	r3, r7, #20
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_UART_MspInit+0xa4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d13d      	bne.n	8003890 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_UART_MspInit+0xa8>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <HAL_UART_MspInit+0xa8>)
 800381a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_UART_MspInit+0xa8>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_UART_MspInit+0xa8>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	4a1a      	ldr	r2, [pc, #104]	; (800389c <HAL_UART_MspInit+0xa8>)
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	6193      	str	r3, [r2, #24]
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_UART_MspInit+0xa8>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003844:	2340      	movs	r3, #64	; 0x40
 8003846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800384c:	2303      	movs	r3, #3
 800384e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	4619      	mov	r1, r3
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <HAL_UART_MspInit+0xac>)
 8003858:	f7fd f890 	bl	800097c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	f107 0314 	add.w	r3, r7, #20
 800386c:	4619      	mov	r1, r3
 800386e:	480c      	ldr	r0, [pc, #48]	; (80038a0 <HAL_UART_MspInit+0xac>)
 8003870:	f7fd f884 	bl	800097c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_UART_MspInit+0xb0>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
 800388a:	4a06      	ldr	r2, [pc, #24]	; (80038a4 <HAL_UART_MspInit+0xb0>)
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003890:	bf00      	nop
 8003892:	3728      	adds	r7, #40	; 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40010c00 	.word	0x40010c00
 80038a4:	40010000 	.word	0x40010000

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <HardFault_Handler+0x4>

080038ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <MemManage_Handler+0x4>

080038c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <BusFault_Handler+0x4>

080038c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ca:	e7fe      	b.n	80038ca <UsageFault_Handler+0x4>

080038cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr

080038e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f4:	f7fc fef4 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <TIM1_CC_IRQHandler+0x10>)
 8003902:	f7fe f9e8 	bl	8001cd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000090 	.word	0x20000090

08003910 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <TIM3_IRQHandler+0x10>)
 8003916:	f7fe f9de 	bl	8001cd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000120 	.word	0x20000120

08003924 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <_sbrk+0x50>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <_sbrk+0x16>
		heap_end = &end;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <_sbrk+0x50>)
 8003936:	4a10      	ldr	r2, [pc, #64]	; (8003978 <_sbrk+0x54>)
 8003938:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <_sbrk+0x50>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <_sbrk+0x50>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4413      	add	r3, r2
 8003948:	466a      	mov	r2, sp
 800394a:	4293      	cmp	r3, r2
 800394c:	d907      	bls.n	800395e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800394e:	f000 f841 	bl	80039d4 <__errno>
 8003952:	4603      	mov	r3, r0
 8003954:	220c      	movs	r2, #12
 8003956:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003958:	f04f 33ff 	mov.w	r3, #4294967295
 800395c:	e006      	b.n	800396c <_sbrk+0x48>
	}

	heap_end += incr;
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <_sbrk+0x50>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	4a03      	ldr	r2, [pc, #12]	; (8003974 <_sbrk+0x50>)
 8003968:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200001f8 	.word	0x200001f8
 8003978:	20000210 	.word	0x20000210

0800397c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800398c:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800398e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003990:	e002      	b.n	8003998 <LoopCopyDataInit>

08003992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003996:	3304      	adds	r3, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800399a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800399c:	d3f9      	bcc.n	8003992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399e:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039a0:	4c0a      	ldr	r4, [pc, #40]	; (80039cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80039a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a4:	e001      	b.n	80039aa <LoopFillZerobss>

080039a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a8:	3204      	adds	r2, #4

080039aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ac:	d3fb      	bcc.n	80039a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039ae:	f7ff ffe5 	bl	800397c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039b2:	f000 f815 	bl	80039e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b6:	f7ff fb63 	bl	8003080 <main>
  bx lr
 80039ba:	4770      	bx	lr
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80039c4:	080043b8 	.word	0x080043b8
  ldr r2, =_sbss
 80039c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80039cc:	2000020c 	.word	0x2000020c

080039d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC1_2_IRQHandler>
	...

080039d4 <__errno>:
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <__errno+0x8>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <__libc_init_array>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	2600      	movs	r6, #0
 80039e4:	4d0c      	ldr	r5, [pc, #48]	; (8003a18 <__libc_init_array+0x38>)
 80039e6:	4c0d      	ldr	r4, [pc, #52]	; (8003a1c <__libc_init_array+0x3c>)
 80039e8:	1b64      	subs	r4, r4, r5
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	42a6      	cmp	r6, r4
 80039ee:	d109      	bne.n	8003a04 <__libc_init_array+0x24>
 80039f0:	f000 fc9c 	bl	800432c <_init>
 80039f4:	2600      	movs	r6, #0
 80039f6:	4d0a      	ldr	r5, [pc, #40]	; (8003a20 <__libc_init_array+0x40>)
 80039f8:	4c0a      	ldr	r4, [pc, #40]	; (8003a24 <__libc_init_array+0x44>)
 80039fa:	1b64      	subs	r4, r4, r5
 80039fc:	10a4      	asrs	r4, r4, #2
 80039fe:	42a6      	cmp	r6, r4
 8003a00:	d105      	bne.n	8003a0e <__libc_init_array+0x2e>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a08:	4798      	blx	r3
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	e7ee      	b.n	80039ec <__libc_init_array+0xc>
 8003a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a12:	4798      	blx	r3
 8003a14:	3601      	adds	r6, #1
 8003a16:	e7f2      	b.n	80039fe <__libc_init_array+0x1e>
 8003a18:	080043b0 	.word	0x080043b0
 8003a1c:	080043b0 	.word	0x080043b0
 8003a20:	080043b0 	.word	0x080043b0
 8003a24:	080043b4 	.word	0x080043b4

08003a28 <memset>:
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4402      	add	r2, r0
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <memset+0xa>
 8003a30:	4770      	bx	lr
 8003a32:	f803 1b01 	strb.w	r1, [r3], #1
 8003a36:	e7f9      	b.n	8003a2c <memset+0x4>

08003a38 <siprintf>:
 8003a38:	b40e      	push	{r1, r2, r3}
 8003a3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a3e:	b500      	push	{lr}
 8003a40:	b09c      	sub	sp, #112	; 0x70
 8003a42:	ab1d      	add	r3, sp, #116	; 0x74
 8003a44:	9002      	str	r0, [sp, #8]
 8003a46:	9006      	str	r0, [sp, #24]
 8003a48:	9107      	str	r1, [sp, #28]
 8003a4a:	9104      	str	r1, [sp, #16]
 8003a4c:	4808      	ldr	r0, [pc, #32]	; (8003a70 <siprintf+0x38>)
 8003a4e:	4909      	ldr	r1, [pc, #36]	; (8003a74 <siprintf+0x3c>)
 8003a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a54:	9105      	str	r1, [sp, #20]
 8003a56:	6800      	ldr	r0, [r0, #0]
 8003a58:	a902      	add	r1, sp, #8
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	f000 f868 	bl	8003b30 <_svfiprintf_r>
 8003a60:	2200      	movs	r2, #0
 8003a62:	9b02      	ldr	r3, [sp, #8]
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	b01c      	add	sp, #112	; 0x70
 8003a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a6c:	b003      	add	sp, #12
 8003a6e:	4770      	bx	lr
 8003a70:	2000000c 	.word	0x2000000c
 8003a74:	ffff0208 	.word	0xffff0208

08003a78 <__ssputs_r>:
 8003a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a7c:	688e      	ldr	r6, [r1, #8]
 8003a7e:	4682      	mov	sl, r0
 8003a80:	429e      	cmp	r6, r3
 8003a82:	460c      	mov	r4, r1
 8003a84:	4690      	mov	r8, r2
 8003a86:	461f      	mov	r7, r3
 8003a88:	d838      	bhi.n	8003afc <__ssputs_r+0x84>
 8003a8a:	898a      	ldrh	r2, [r1, #12]
 8003a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a90:	d032      	beq.n	8003af8 <__ssputs_r+0x80>
 8003a92:	6825      	ldr	r5, [r4, #0]
 8003a94:	6909      	ldr	r1, [r1, #16]
 8003a96:	3301      	adds	r3, #1
 8003a98:	eba5 0901 	sub.w	r9, r5, r1
 8003a9c:	6965      	ldr	r5, [r4, #20]
 8003a9e:	444b      	add	r3, r9
 8003aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003aa8:	106d      	asrs	r5, r5, #1
 8003aaa:	429d      	cmp	r5, r3
 8003aac:	bf38      	it	cc
 8003aae:	461d      	movcc	r5, r3
 8003ab0:	0553      	lsls	r3, r2, #21
 8003ab2:	d531      	bpl.n	8003b18 <__ssputs_r+0xa0>
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	f000 fb6f 	bl	8004198 <_malloc_r>
 8003aba:	4606      	mov	r6, r0
 8003abc:	b950      	cbnz	r0, 8003ad4 <__ssputs_r+0x5c>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f8ca 3000 	str.w	r3, [sl]
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	464a      	mov	r2, r9
 8003ad6:	6921      	ldr	r1, [r4, #16]
 8003ad8:	f000 face 	bl	8004078 <memcpy>
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ae6:	81a3      	strh	r3, [r4, #12]
 8003ae8:	6126      	str	r6, [r4, #16]
 8003aea:	444e      	add	r6, r9
 8003aec:	6026      	str	r6, [r4, #0]
 8003aee:	463e      	mov	r6, r7
 8003af0:	6165      	str	r5, [r4, #20]
 8003af2:	eba5 0509 	sub.w	r5, r5, r9
 8003af6:	60a5      	str	r5, [r4, #8]
 8003af8:	42be      	cmp	r6, r7
 8003afa:	d900      	bls.n	8003afe <__ssputs_r+0x86>
 8003afc:	463e      	mov	r6, r7
 8003afe:	4632      	mov	r2, r6
 8003b00:	4641      	mov	r1, r8
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	f000 fac6 	bl	8004094 <memmove>
 8003b08:	68a3      	ldr	r3, [r4, #8]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	1b9b      	subs	r3, r3, r6
 8003b0e:	60a3      	str	r3, [r4, #8]
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	4433      	add	r3, r6
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	e7db      	b.n	8003ad0 <__ssputs_r+0x58>
 8003b18:	462a      	mov	r2, r5
 8003b1a:	f000 fbb1 	bl	8004280 <_realloc_r>
 8003b1e:	4606      	mov	r6, r0
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d1e1      	bne.n	8003ae8 <__ssputs_r+0x70>
 8003b24:	4650      	mov	r0, sl
 8003b26:	6921      	ldr	r1, [r4, #16]
 8003b28:	f000 face 	bl	80040c8 <_free_r>
 8003b2c:	e7c7      	b.n	8003abe <__ssputs_r+0x46>
	...

08003b30 <_svfiprintf_r>:
 8003b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b34:	4698      	mov	r8, r3
 8003b36:	898b      	ldrh	r3, [r1, #12]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	4614      	mov	r4, r2
 8003b40:	b09d      	sub	sp, #116	; 0x74
 8003b42:	d50e      	bpl.n	8003b62 <_svfiprintf_r+0x32>
 8003b44:	690b      	ldr	r3, [r1, #16]
 8003b46:	b963      	cbnz	r3, 8003b62 <_svfiprintf_r+0x32>
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	f000 fb25 	bl	8004198 <_malloc_r>
 8003b4e:	6028      	str	r0, [r5, #0]
 8003b50:	6128      	str	r0, [r5, #16]
 8003b52:	b920      	cbnz	r0, 8003b5e <_svfiprintf_r+0x2e>
 8003b54:	230c      	movs	r3, #12
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	e0d1      	b.n	8003d02 <_svfiprintf_r+0x1d2>
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	616b      	str	r3, [r5, #20]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	2320      	movs	r3, #32
 8003b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b6c:	2330      	movs	r3, #48	; 0x30
 8003b6e:	f04f 0901 	mov.w	r9, #1
 8003b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003d1c <_svfiprintf_r+0x1ec>
 8003b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b7e:	4623      	mov	r3, r4
 8003b80:	469a      	mov	sl, r3
 8003b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b86:	b10a      	cbz	r2, 8003b8c <_svfiprintf_r+0x5c>
 8003b88:	2a25      	cmp	r2, #37	; 0x25
 8003b8a:	d1f9      	bne.n	8003b80 <_svfiprintf_r+0x50>
 8003b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b90:	d00b      	beq.n	8003baa <_svfiprintf_r+0x7a>
 8003b92:	465b      	mov	r3, fp
 8003b94:	4622      	mov	r2, r4
 8003b96:	4629      	mov	r1, r5
 8003b98:	4638      	mov	r0, r7
 8003b9a:	f7ff ff6d 	bl	8003a78 <__ssputs_r>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f000 80aa 	beq.w	8003cf8 <_svfiprintf_r+0x1c8>
 8003ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ba6:	445a      	add	r2, fp
 8003ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8003baa:	f89a 3000 	ldrb.w	r3, [sl]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 80a2 	beq.w	8003cf8 <_svfiprintf_r+0x1c8>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bbe:	f10a 0a01 	add.w	sl, sl, #1
 8003bc2:	9304      	str	r3, [sp, #16]
 8003bc4:	9307      	str	r3, [sp, #28]
 8003bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003bca:	931a      	str	r3, [sp, #104]	; 0x68
 8003bcc:	4654      	mov	r4, sl
 8003bce:	2205      	movs	r2, #5
 8003bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd4:	4851      	ldr	r0, [pc, #324]	; (8003d1c <_svfiprintf_r+0x1ec>)
 8003bd6:	f000 fa41 	bl	800405c <memchr>
 8003bda:	9a04      	ldr	r2, [sp, #16]
 8003bdc:	b9d8      	cbnz	r0, 8003c16 <_svfiprintf_r+0xe6>
 8003bde:	06d0      	lsls	r0, r2, #27
 8003be0:	bf44      	itt	mi
 8003be2:	2320      	movmi	r3, #32
 8003be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003be8:	0711      	lsls	r1, r2, #28
 8003bea:	bf44      	itt	mi
 8003bec:	232b      	movmi	r3, #43	; 0x2b
 8003bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	d015      	beq.n	8003c26 <_svfiprintf_r+0xf6>
 8003bfa:	4654      	mov	r4, sl
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f04f 0c0a 	mov.w	ip, #10
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	4621      	mov	r1, r4
 8003c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c0a:	3b30      	subs	r3, #48	; 0x30
 8003c0c:	2b09      	cmp	r3, #9
 8003c0e:	d94e      	bls.n	8003cae <_svfiprintf_r+0x17e>
 8003c10:	b1b0      	cbz	r0, 8003c40 <_svfiprintf_r+0x110>
 8003c12:	9207      	str	r2, [sp, #28]
 8003c14:	e014      	b.n	8003c40 <_svfiprintf_r+0x110>
 8003c16:	eba0 0308 	sub.w	r3, r0, r8
 8003c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	46a2      	mov	sl, r4
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	e7d2      	b.n	8003bcc <_svfiprintf_r+0x9c>
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	1d19      	adds	r1, r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	9103      	str	r1, [sp, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bfbb      	ittet	lt
 8003c32:	425b      	neglt	r3, r3
 8003c34:	f042 0202 	orrlt.w	r2, r2, #2
 8003c38:	9307      	strge	r3, [sp, #28]
 8003c3a:	9307      	strlt	r3, [sp, #28]
 8003c3c:	bfb8      	it	lt
 8003c3e:	9204      	strlt	r2, [sp, #16]
 8003c40:	7823      	ldrb	r3, [r4, #0]
 8003c42:	2b2e      	cmp	r3, #46	; 0x2e
 8003c44:	d10c      	bne.n	8003c60 <_svfiprintf_r+0x130>
 8003c46:	7863      	ldrb	r3, [r4, #1]
 8003c48:	2b2a      	cmp	r3, #42	; 0x2a
 8003c4a:	d135      	bne.n	8003cb8 <_svfiprintf_r+0x188>
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	3402      	adds	r4, #2
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	9203      	str	r2, [sp, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	bfb8      	it	lt
 8003c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003d20 <_svfiprintf_r+0x1f0>
 8003c64:	2203      	movs	r2, #3
 8003c66:	4650      	mov	r0, sl
 8003c68:	7821      	ldrb	r1, [r4, #0]
 8003c6a:	f000 f9f7 	bl	800405c <memchr>
 8003c6e:	b140      	cbz	r0, 8003c82 <_svfiprintf_r+0x152>
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	eba0 000a 	sub.w	r0, r0, sl
 8003c76:	fa03 f000 	lsl.w	r0, r3, r0
 8003c7a:	9b04      	ldr	r3, [sp, #16]
 8003c7c:	3401      	adds	r4, #1
 8003c7e:	4303      	orrs	r3, r0
 8003c80:	9304      	str	r3, [sp, #16]
 8003c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c86:	2206      	movs	r2, #6
 8003c88:	4826      	ldr	r0, [pc, #152]	; (8003d24 <_svfiprintf_r+0x1f4>)
 8003c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c8e:	f000 f9e5 	bl	800405c <memchr>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d038      	beq.n	8003d08 <_svfiprintf_r+0x1d8>
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <_svfiprintf_r+0x1f8>)
 8003c98:	bb1b      	cbnz	r3, 8003ce2 <_svfiprintf_r+0x1b2>
 8003c9a:	9b03      	ldr	r3, [sp, #12]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	f023 0307 	bic.w	r3, r3, #7
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	9303      	str	r3, [sp, #12]
 8003ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca8:	4433      	add	r3, r6
 8003caa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cac:	e767      	b.n	8003b7e <_svfiprintf_r+0x4e>
 8003cae:	460c      	mov	r4, r1
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003cb6:	e7a5      	b.n	8003c04 <_svfiprintf_r+0xd4>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f04f 0c0a 	mov.w	ip, #10
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	3401      	adds	r4, #1
 8003cc2:	9305      	str	r3, [sp, #20]
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cca:	3a30      	subs	r2, #48	; 0x30
 8003ccc:	2a09      	cmp	r2, #9
 8003cce:	d903      	bls.n	8003cd8 <_svfiprintf_r+0x1a8>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0c5      	beq.n	8003c60 <_svfiprintf_r+0x130>
 8003cd4:	9105      	str	r1, [sp, #20]
 8003cd6:	e7c3      	b.n	8003c60 <_svfiprintf_r+0x130>
 8003cd8:	4604      	mov	r4, r0
 8003cda:	2301      	movs	r3, #1
 8003cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ce0:	e7f0      	b.n	8003cc4 <_svfiprintf_r+0x194>
 8003ce2:	ab03      	add	r3, sp, #12
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	462a      	mov	r2, r5
 8003ce8:	4638      	mov	r0, r7
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <_svfiprintf_r+0x1fc>)
 8003cec:	a904      	add	r1, sp, #16
 8003cee:	f3af 8000 	nop.w
 8003cf2:	1c42      	adds	r2, r0, #1
 8003cf4:	4606      	mov	r6, r0
 8003cf6:	d1d6      	bne.n	8003ca6 <_svfiprintf_r+0x176>
 8003cf8:	89ab      	ldrh	r3, [r5, #12]
 8003cfa:	065b      	lsls	r3, r3, #25
 8003cfc:	f53f af2c 	bmi.w	8003b58 <_svfiprintf_r+0x28>
 8003d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d02:	b01d      	add	sp, #116	; 0x74
 8003d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d08:	ab03      	add	r3, sp, #12
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	462a      	mov	r2, r5
 8003d0e:	4638      	mov	r0, r7
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <_svfiprintf_r+0x1fc>)
 8003d12:	a904      	add	r1, sp, #16
 8003d14:	f000 f87c 	bl	8003e10 <_printf_i>
 8003d18:	e7eb      	b.n	8003cf2 <_svfiprintf_r+0x1c2>
 8003d1a:	bf00      	nop
 8003d1c:	0800437c 	.word	0x0800437c
 8003d20:	08004382 	.word	0x08004382
 8003d24:	08004386 	.word	0x08004386
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003a79 	.word	0x08003a79

08003d30 <_printf_common>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	4616      	mov	r6, r2
 8003d36:	4699      	mov	r9, r3
 8003d38:	688a      	ldr	r2, [r1, #8]
 8003d3a:	690b      	ldr	r3, [r1, #16]
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bfb8      	it	lt
 8003d42:	4613      	movlt	r3, r2
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d50:	b10a      	cbz	r2, 8003d56 <_printf_common+0x26>
 8003d52:	3301      	adds	r3, #1
 8003d54:	6033      	str	r3, [r6, #0]
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	0699      	lsls	r1, r3, #26
 8003d5a:	bf42      	ittt	mi
 8003d5c:	6833      	ldrmi	r3, [r6, #0]
 8003d5e:	3302      	addmi	r3, #2
 8003d60:	6033      	strmi	r3, [r6, #0]
 8003d62:	6825      	ldr	r5, [r4, #0]
 8003d64:	f015 0506 	ands.w	r5, r5, #6
 8003d68:	d106      	bne.n	8003d78 <_printf_common+0x48>
 8003d6a:	f104 0a19 	add.w	sl, r4, #25
 8003d6e:	68e3      	ldr	r3, [r4, #12]
 8003d70:	6832      	ldr	r2, [r6, #0]
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	42ab      	cmp	r3, r5
 8003d76:	dc28      	bgt.n	8003dca <_printf_common+0x9a>
 8003d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d7c:	1e13      	subs	r3, r2, #0
 8003d7e:	6822      	ldr	r2, [r4, #0]
 8003d80:	bf18      	it	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	0692      	lsls	r2, r2, #26
 8003d86:	d42d      	bmi.n	8003de4 <_printf_common+0xb4>
 8003d88:	4649      	mov	r1, r9
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d90:	47c0      	blx	r8
 8003d92:	3001      	adds	r0, #1
 8003d94:	d020      	beq.n	8003dd8 <_printf_common+0xa8>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	68e5      	ldr	r5, [r4, #12]
 8003d9a:	f003 0306 	and.w	r3, r3, #6
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf18      	it	ne
 8003da2:	2500      	movne	r5, #0
 8003da4:	6832      	ldr	r2, [r6, #0]
 8003da6:	f04f 0600 	mov.w	r6, #0
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	bf08      	it	eq
 8003dae:	1aad      	subeq	r5, r5, r2
 8003db0:	6922      	ldr	r2, [r4, #16]
 8003db2:	bf08      	it	eq
 8003db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfc4      	itt	gt
 8003dbc:	1a9b      	subgt	r3, r3, r2
 8003dbe:	18ed      	addgt	r5, r5, r3
 8003dc0:	341a      	adds	r4, #26
 8003dc2:	42b5      	cmp	r5, r6
 8003dc4:	d11a      	bne.n	8003dfc <_printf_common+0xcc>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e008      	b.n	8003ddc <_printf_common+0xac>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4652      	mov	r2, sl
 8003dce:	4649      	mov	r1, r9
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	47c0      	blx	r8
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d103      	bne.n	8003de0 <_printf_common+0xb0>
 8003dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	3501      	adds	r5, #1
 8003de2:	e7c4      	b.n	8003d6e <_printf_common+0x3e>
 8003de4:	2030      	movs	r0, #48	; 0x30
 8003de6:	18e1      	adds	r1, r4, r3
 8003de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003df2:	4422      	add	r2, r4
 8003df4:	3302      	adds	r3, #2
 8003df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dfa:	e7c5      	b.n	8003d88 <_printf_common+0x58>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4649      	mov	r1, r9
 8003e02:	4638      	mov	r0, r7
 8003e04:	47c0      	blx	r8
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0e6      	beq.n	8003dd8 <_printf_common+0xa8>
 8003e0a:	3601      	adds	r6, #1
 8003e0c:	e7d9      	b.n	8003dc2 <_printf_common+0x92>
	...

08003e10 <_printf_i>:
 8003e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e14:	7e0f      	ldrb	r7, [r1, #24]
 8003e16:	4691      	mov	r9, r2
 8003e18:	2f78      	cmp	r7, #120	; 0x78
 8003e1a:	4680      	mov	r8, r0
 8003e1c:	460c      	mov	r4, r1
 8003e1e:	469a      	mov	sl, r3
 8003e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e26:	d807      	bhi.n	8003e38 <_printf_i+0x28>
 8003e28:	2f62      	cmp	r7, #98	; 0x62
 8003e2a:	d80a      	bhi.n	8003e42 <_printf_i+0x32>
 8003e2c:	2f00      	cmp	r7, #0
 8003e2e:	f000 80d9 	beq.w	8003fe4 <_printf_i+0x1d4>
 8003e32:	2f58      	cmp	r7, #88	; 0x58
 8003e34:	f000 80a4 	beq.w	8003f80 <_printf_i+0x170>
 8003e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e40:	e03a      	b.n	8003eb8 <_printf_i+0xa8>
 8003e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e46:	2b15      	cmp	r3, #21
 8003e48:	d8f6      	bhi.n	8003e38 <_printf_i+0x28>
 8003e4a:	a101      	add	r1, pc, #4	; (adr r1, 8003e50 <_printf_i+0x40>)
 8003e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ebd 	.word	0x08003ebd
 8003e58:	08003e39 	.word	0x08003e39
 8003e5c:	08003e39 	.word	0x08003e39
 8003e60:	08003e39 	.word	0x08003e39
 8003e64:	08003e39 	.word	0x08003e39
 8003e68:	08003ebd 	.word	0x08003ebd
 8003e6c:	08003e39 	.word	0x08003e39
 8003e70:	08003e39 	.word	0x08003e39
 8003e74:	08003e39 	.word	0x08003e39
 8003e78:	08003e39 	.word	0x08003e39
 8003e7c:	08003fcb 	.word	0x08003fcb
 8003e80:	08003eed 	.word	0x08003eed
 8003e84:	08003fad 	.word	0x08003fad
 8003e88:	08003e39 	.word	0x08003e39
 8003e8c:	08003e39 	.word	0x08003e39
 8003e90:	08003fed 	.word	0x08003fed
 8003e94:	08003e39 	.word	0x08003e39
 8003e98:	08003eed 	.word	0x08003eed
 8003e9c:	08003e39 	.word	0x08003e39
 8003ea0:	08003e39 	.word	0x08003e39
 8003ea4:	08003fb5 	.word	0x08003fb5
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	1d1a      	adds	r2, r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	602a      	str	r2, [r5, #0]
 8003eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0a4      	b.n	8004006 <_printf_i+0x1f6>
 8003ebc:	6820      	ldr	r0, [r4, #0]
 8003ebe:	6829      	ldr	r1, [r5, #0]
 8003ec0:	0606      	lsls	r6, r0, #24
 8003ec2:	f101 0304 	add.w	r3, r1, #4
 8003ec6:	d50a      	bpl.n	8003ede <_printf_i+0xce>
 8003ec8:	680e      	ldr	r6, [r1, #0]
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	2e00      	cmp	r6, #0
 8003ece:	da03      	bge.n	8003ed8 <_printf_i+0xc8>
 8003ed0:	232d      	movs	r3, #45	; 0x2d
 8003ed2:	4276      	negs	r6, r6
 8003ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed8:	230a      	movs	r3, #10
 8003eda:	485e      	ldr	r0, [pc, #376]	; (8004054 <_printf_i+0x244>)
 8003edc:	e019      	b.n	8003f12 <_printf_i+0x102>
 8003ede:	680e      	ldr	r6, [r1, #0]
 8003ee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ee4:	602b      	str	r3, [r5, #0]
 8003ee6:	bf18      	it	ne
 8003ee8:	b236      	sxthne	r6, r6
 8003eea:	e7ef      	b.n	8003ecc <_printf_i+0xbc>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	1d19      	adds	r1, r3, #4
 8003ef2:	6029      	str	r1, [r5, #0]
 8003ef4:	0601      	lsls	r1, r0, #24
 8003ef6:	d501      	bpl.n	8003efc <_printf_i+0xec>
 8003ef8:	681e      	ldr	r6, [r3, #0]
 8003efa:	e002      	b.n	8003f02 <_printf_i+0xf2>
 8003efc:	0646      	lsls	r6, r0, #25
 8003efe:	d5fb      	bpl.n	8003ef8 <_printf_i+0xe8>
 8003f00:	881e      	ldrh	r6, [r3, #0]
 8003f02:	2f6f      	cmp	r7, #111	; 0x6f
 8003f04:	bf0c      	ite	eq
 8003f06:	2308      	moveq	r3, #8
 8003f08:	230a      	movne	r3, #10
 8003f0a:	4852      	ldr	r0, [pc, #328]	; (8004054 <_printf_i+0x244>)
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f12:	6865      	ldr	r5, [r4, #4]
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	bfa8      	it	ge
 8003f18:	6821      	ldrge	r1, [r4, #0]
 8003f1a:	60a5      	str	r5, [r4, #8]
 8003f1c:	bfa4      	itt	ge
 8003f1e:	f021 0104 	bicge.w	r1, r1, #4
 8003f22:	6021      	strge	r1, [r4, #0]
 8003f24:	b90e      	cbnz	r6, 8003f2a <_printf_i+0x11a>
 8003f26:	2d00      	cmp	r5, #0
 8003f28:	d04d      	beq.n	8003fc6 <_printf_i+0x1b6>
 8003f2a:	4615      	mov	r5, r2
 8003f2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f30:	fb03 6711 	mls	r7, r3, r1, r6
 8003f34:	5dc7      	ldrb	r7, [r0, r7]
 8003f36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f3a:	4637      	mov	r7, r6
 8003f3c:	42bb      	cmp	r3, r7
 8003f3e:	460e      	mov	r6, r1
 8003f40:	d9f4      	bls.n	8003f2c <_printf_i+0x11c>
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d10b      	bne.n	8003f5e <_printf_i+0x14e>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	07de      	lsls	r6, r3, #31
 8003f4a:	d508      	bpl.n	8003f5e <_printf_i+0x14e>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	6861      	ldr	r1, [r4, #4]
 8003f50:	4299      	cmp	r1, r3
 8003f52:	bfde      	ittt	le
 8003f54:	2330      	movle	r3, #48	; 0x30
 8003f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f5e:	1b52      	subs	r2, r2, r5
 8003f60:	6122      	str	r2, [r4, #16]
 8003f62:	464b      	mov	r3, r9
 8003f64:	4621      	mov	r1, r4
 8003f66:	4640      	mov	r0, r8
 8003f68:	f8cd a000 	str.w	sl, [sp]
 8003f6c:	aa03      	add	r2, sp, #12
 8003f6e:	f7ff fedf 	bl	8003d30 <_printf_common>
 8003f72:	3001      	adds	r0, #1
 8003f74:	d14c      	bne.n	8004010 <_printf_i+0x200>
 8003f76:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7a:	b004      	add	sp, #16
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	4834      	ldr	r0, [pc, #208]	; (8004054 <_printf_i+0x244>)
 8003f82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f86:	6829      	ldr	r1, [r5, #0]
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f8e:	6029      	str	r1, [r5, #0]
 8003f90:	061d      	lsls	r5, r3, #24
 8003f92:	d514      	bpl.n	8003fbe <_printf_i+0x1ae>
 8003f94:	07df      	lsls	r7, r3, #31
 8003f96:	bf44      	itt	mi
 8003f98:	f043 0320 	orrmi.w	r3, r3, #32
 8003f9c:	6023      	strmi	r3, [r4, #0]
 8003f9e:	b91e      	cbnz	r6, 8003fa8 <_printf_i+0x198>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	f023 0320 	bic.w	r3, r3, #32
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	2310      	movs	r3, #16
 8003faa:	e7af      	b.n	8003f0c <_printf_i+0xfc>
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	f043 0320 	orr.w	r3, r3, #32
 8003fb2:	6023      	str	r3, [r4, #0]
 8003fb4:	2378      	movs	r3, #120	; 0x78
 8003fb6:	4828      	ldr	r0, [pc, #160]	; (8004058 <_printf_i+0x248>)
 8003fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fbc:	e7e3      	b.n	8003f86 <_printf_i+0x176>
 8003fbe:	0659      	lsls	r1, r3, #25
 8003fc0:	bf48      	it	mi
 8003fc2:	b2b6      	uxthmi	r6, r6
 8003fc4:	e7e6      	b.n	8003f94 <_printf_i+0x184>
 8003fc6:	4615      	mov	r5, r2
 8003fc8:	e7bb      	b.n	8003f42 <_printf_i+0x132>
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	6826      	ldr	r6, [r4, #0]
 8003fce:	1d18      	adds	r0, r3, #4
 8003fd0:	6961      	ldr	r1, [r4, #20]
 8003fd2:	6028      	str	r0, [r5, #0]
 8003fd4:	0635      	lsls	r5, r6, #24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	d501      	bpl.n	8003fde <_printf_i+0x1ce>
 8003fda:	6019      	str	r1, [r3, #0]
 8003fdc:	e002      	b.n	8003fe4 <_printf_i+0x1d4>
 8003fde:	0670      	lsls	r0, r6, #25
 8003fe0:	d5fb      	bpl.n	8003fda <_printf_i+0x1ca>
 8003fe2:	8019      	strh	r1, [r3, #0]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	4615      	mov	r5, r2
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	e7ba      	b.n	8003f62 <_printf_i+0x152>
 8003fec:	682b      	ldr	r3, [r5, #0]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	602a      	str	r2, [r5, #0]
 8003ff4:	681d      	ldr	r5, [r3, #0]
 8003ff6:	6862      	ldr	r2, [r4, #4]
 8003ff8:	4628      	mov	r0, r5
 8003ffa:	f000 f82f 	bl	800405c <memchr>
 8003ffe:	b108      	cbz	r0, 8004004 <_printf_i+0x1f4>
 8004000:	1b40      	subs	r0, r0, r5
 8004002:	6060      	str	r0, [r4, #4]
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	6123      	str	r3, [r4, #16]
 8004008:	2300      	movs	r3, #0
 800400a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400e:	e7a8      	b.n	8003f62 <_printf_i+0x152>
 8004010:	462a      	mov	r2, r5
 8004012:	4649      	mov	r1, r9
 8004014:	4640      	mov	r0, r8
 8004016:	6923      	ldr	r3, [r4, #16]
 8004018:	47d0      	blx	sl
 800401a:	3001      	adds	r0, #1
 800401c:	d0ab      	beq.n	8003f76 <_printf_i+0x166>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	079b      	lsls	r3, r3, #30
 8004022:	d413      	bmi.n	800404c <_printf_i+0x23c>
 8004024:	68e0      	ldr	r0, [r4, #12]
 8004026:	9b03      	ldr	r3, [sp, #12]
 8004028:	4298      	cmp	r0, r3
 800402a:	bfb8      	it	lt
 800402c:	4618      	movlt	r0, r3
 800402e:	e7a4      	b.n	8003f7a <_printf_i+0x16a>
 8004030:	2301      	movs	r3, #1
 8004032:	4632      	mov	r2, r6
 8004034:	4649      	mov	r1, r9
 8004036:	4640      	mov	r0, r8
 8004038:	47d0      	blx	sl
 800403a:	3001      	adds	r0, #1
 800403c:	d09b      	beq.n	8003f76 <_printf_i+0x166>
 800403e:	3501      	adds	r5, #1
 8004040:	68e3      	ldr	r3, [r4, #12]
 8004042:	9903      	ldr	r1, [sp, #12]
 8004044:	1a5b      	subs	r3, r3, r1
 8004046:	42ab      	cmp	r3, r5
 8004048:	dcf2      	bgt.n	8004030 <_printf_i+0x220>
 800404a:	e7eb      	b.n	8004024 <_printf_i+0x214>
 800404c:	2500      	movs	r5, #0
 800404e:	f104 0619 	add.w	r6, r4, #25
 8004052:	e7f5      	b.n	8004040 <_printf_i+0x230>
 8004054:	0800438d 	.word	0x0800438d
 8004058:	0800439e 	.word	0x0800439e

0800405c <memchr>:
 800405c:	4603      	mov	r3, r0
 800405e:	b510      	push	{r4, lr}
 8004060:	b2c9      	uxtb	r1, r1
 8004062:	4402      	add	r2, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	4618      	mov	r0, r3
 8004068:	d101      	bne.n	800406e <memchr+0x12>
 800406a:	2000      	movs	r0, #0
 800406c:	e003      	b.n	8004076 <memchr+0x1a>
 800406e:	7804      	ldrb	r4, [r0, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	428c      	cmp	r4, r1
 8004074:	d1f6      	bne.n	8004064 <memchr+0x8>
 8004076:	bd10      	pop	{r4, pc}

08004078 <memcpy>:
 8004078:	440a      	add	r2, r1
 800407a:	4291      	cmp	r1, r2
 800407c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004080:	d100      	bne.n	8004084 <memcpy+0xc>
 8004082:	4770      	bx	lr
 8004084:	b510      	push	{r4, lr}
 8004086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800408a:	4291      	cmp	r1, r2
 800408c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004090:	d1f9      	bne.n	8004086 <memcpy+0xe>
 8004092:	bd10      	pop	{r4, pc}

08004094 <memmove>:
 8004094:	4288      	cmp	r0, r1
 8004096:	b510      	push	{r4, lr}
 8004098:	eb01 0402 	add.w	r4, r1, r2
 800409c:	d902      	bls.n	80040a4 <memmove+0x10>
 800409e:	4284      	cmp	r4, r0
 80040a0:	4623      	mov	r3, r4
 80040a2:	d807      	bhi.n	80040b4 <memmove+0x20>
 80040a4:	1e43      	subs	r3, r0, #1
 80040a6:	42a1      	cmp	r1, r4
 80040a8:	d008      	beq.n	80040bc <memmove+0x28>
 80040aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040b2:	e7f8      	b.n	80040a6 <memmove+0x12>
 80040b4:	4601      	mov	r1, r0
 80040b6:	4402      	add	r2, r0
 80040b8:	428a      	cmp	r2, r1
 80040ba:	d100      	bne.n	80040be <memmove+0x2a>
 80040bc:	bd10      	pop	{r4, pc}
 80040be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040c6:	e7f7      	b.n	80040b8 <memmove+0x24>

080040c8 <_free_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	4605      	mov	r5, r0
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d040      	beq.n	8004152 <_free_r+0x8a>
 80040d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d4:	1f0c      	subs	r4, r1, #4
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	bfb8      	it	lt
 80040da:	18e4      	addlt	r4, r4, r3
 80040dc:	f000 f910 	bl	8004300 <__malloc_lock>
 80040e0:	4a1c      	ldr	r2, [pc, #112]	; (8004154 <_free_r+0x8c>)
 80040e2:	6813      	ldr	r3, [r2, #0]
 80040e4:	b933      	cbnz	r3, 80040f4 <_free_r+0x2c>
 80040e6:	6063      	str	r3, [r4, #4]
 80040e8:	6014      	str	r4, [r2, #0]
 80040ea:	4628      	mov	r0, r5
 80040ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f0:	f000 b90c 	b.w	800430c <__malloc_unlock>
 80040f4:	42a3      	cmp	r3, r4
 80040f6:	d908      	bls.n	800410a <_free_r+0x42>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	1821      	adds	r1, r4, r0
 80040fc:	428b      	cmp	r3, r1
 80040fe:	bf01      	itttt	eq
 8004100:	6819      	ldreq	r1, [r3, #0]
 8004102:	685b      	ldreq	r3, [r3, #4]
 8004104:	1809      	addeq	r1, r1, r0
 8004106:	6021      	streq	r1, [r4, #0]
 8004108:	e7ed      	b.n	80040e6 <_free_r+0x1e>
 800410a:	461a      	mov	r2, r3
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	b10b      	cbz	r3, 8004114 <_free_r+0x4c>
 8004110:	42a3      	cmp	r3, r4
 8004112:	d9fa      	bls.n	800410a <_free_r+0x42>
 8004114:	6811      	ldr	r1, [r2, #0]
 8004116:	1850      	adds	r0, r2, r1
 8004118:	42a0      	cmp	r0, r4
 800411a:	d10b      	bne.n	8004134 <_free_r+0x6c>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	4401      	add	r1, r0
 8004120:	1850      	adds	r0, r2, r1
 8004122:	4283      	cmp	r3, r0
 8004124:	6011      	str	r1, [r2, #0]
 8004126:	d1e0      	bne.n	80040ea <_free_r+0x22>
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4401      	add	r1, r0
 800412e:	6011      	str	r1, [r2, #0]
 8004130:	6053      	str	r3, [r2, #4]
 8004132:	e7da      	b.n	80040ea <_free_r+0x22>
 8004134:	d902      	bls.n	800413c <_free_r+0x74>
 8004136:	230c      	movs	r3, #12
 8004138:	602b      	str	r3, [r5, #0]
 800413a:	e7d6      	b.n	80040ea <_free_r+0x22>
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	1821      	adds	r1, r4, r0
 8004140:	428b      	cmp	r3, r1
 8004142:	bf01      	itttt	eq
 8004144:	6819      	ldreq	r1, [r3, #0]
 8004146:	685b      	ldreq	r3, [r3, #4]
 8004148:	1809      	addeq	r1, r1, r0
 800414a:	6021      	streq	r1, [r4, #0]
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	6054      	str	r4, [r2, #4]
 8004150:	e7cb      	b.n	80040ea <_free_r+0x22>
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	200001fc 	.word	0x200001fc

08004158 <sbrk_aligned>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4e0e      	ldr	r6, [pc, #56]	; (8004194 <sbrk_aligned+0x3c>)
 800415c:	460c      	mov	r4, r1
 800415e:	6831      	ldr	r1, [r6, #0]
 8004160:	4605      	mov	r5, r0
 8004162:	b911      	cbnz	r1, 800416a <sbrk_aligned+0x12>
 8004164:	f000 f8bc 	bl	80042e0 <_sbrk_r>
 8004168:	6030      	str	r0, [r6, #0]
 800416a:	4621      	mov	r1, r4
 800416c:	4628      	mov	r0, r5
 800416e:	f000 f8b7 	bl	80042e0 <_sbrk_r>
 8004172:	1c43      	adds	r3, r0, #1
 8004174:	d00a      	beq.n	800418c <sbrk_aligned+0x34>
 8004176:	1cc4      	adds	r4, r0, #3
 8004178:	f024 0403 	bic.w	r4, r4, #3
 800417c:	42a0      	cmp	r0, r4
 800417e:	d007      	beq.n	8004190 <sbrk_aligned+0x38>
 8004180:	1a21      	subs	r1, r4, r0
 8004182:	4628      	mov	r0, r5
 8004184:	f000 f8ac 	bl	80042e0 <_sbrk_r>
 8004188:	3001      	adds	r0, #1
 800418a:	d101      	bne.n	8004190 <sbrk_aligned+0x38>
 800418c:	f04f 34ff 	mov.w	r4, #4294967295
 8004190:	4620      	mov	r0, r4
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	20000200 	.word	0x20000200

08004198 <_malloc_r>:
 8004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	1ccd      	adds	r5, r1, #3
 800419e:	f025 0503 	bic.w	r5, r5, #3
 80041a2:	3508      	adds	r5, #8
 80041a4:	2d0c      	cmp	r5, #12
 80041a6:	bf38      	it	cc
 80041a8:	250c      	movcc	r5, #12
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	4607      	mov	r7, r0
 80041ae:	db01      	blt.n	80041b4 <_malloc_r+0x1c>
 80041b0:	42a9      	cmp	r1, r5
 80041b2:	d905      	bls.n	80041c0 <_malloc_r+0x28>
 80041b4:	230c      	movs	r3, #12
 80041b6:	2600      	movs	r6, #0
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4630      	mov	r0, r6
 80041bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c0:	4e2e      	ldr	r6, [pc, #184]	; (800427c <_malloc_r+0xe4>)
 80041c2:	f000 f89d 	bl	8004300 <__malloc_lock>
 80041c6:	6833      	ldr	r3, [r6, #0]
 80041c8:	461c      	mov	r4, r3
 80041ca:	bb34      	cbnz	r4, 800421a <_malloc_r+0x82>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4638      	mov	r0, r7
 80041d0:	f7ff ffc2 	bl	8004158 <sbrk_aligned>
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	4604      	mov	r4, r0
 80041d8:	d14d      	bne.n	8004276 <_malloc_r+0xde>
 80041da:	6834      	ldr	r4, [r6, #0]
 80041dc:	4626      	mov	r6, r4
 80041de:	2e00      	cmp	r6, #0
 80041e0:	d140      	bne.n	8004264 <_malloc_r+0xcc>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	4631      	mov	r1, r6
 80041e6:	4638      	mov	r0, r7
 80041e8:	eb04 0803 	add.w	r8, r4, r3
 80041ec:	f000 f878 	bl	80042e0 <_sbrk_r>
 80041f0:	4580      	cmp	r8, r0
 80041f2:	d13a      	bne.n	800426a <_malloc_r+0xd2>
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	3503      	adds	r5, #3
 80041f8:	1a6d      	subs	r5, r5, r1
 80041fa:	f025 0503 	bic.w	r5, r5, #3
 80041fe:	3508      	adds	r5, #8
 8004200:	2d0c      	cmp	r5, #12
 8004202:	bf38      	it	cc
 8004204:	250c      	movcc	r5, #12
 8004206:	4638      	mov	r0, r7
 8004208:	4629      	mov	r1, r5
 800420a:	f7ff ffa5 	bl	8004158 <sbrk_aligned>
 800420e:	3001      	adds	r0, #1
 8004210:	d02b      	beq.n	800426a <_malloc_r+0xd2>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	442b      	add	r3, r5
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	e00e      	b.n	8004238 <_malloc_r+0xa0>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	1b52      	subs	r2, r2, r5
 800421e:	d41e      	bmi.n	800425e <_malloc_r+0xc6>
 8004220:	2a0b      	cmp	r2, #11
 8004222:	d916      	bls.n	8004252 <_malloc_r+0xba>
 8004224:	1961      	adds	r1, r4, r5
 8004226:	42a3      	cmp	r3, r4
 8004228:	6025      	str	r5, [r4, #0]
 800422a:	bf18      	it	ne
 800422c:	6059      	strne	r1, [r3, #4]
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	bf08      	it	eq
 8004232:	6031      	streq	r1, [r6, #0]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4638      	mov	r0, r7
 800423a:	f104 060b 	add.w	r6, r4, #11
 800423e:	f000 f865 	bl	800430c <__malloc_unlock>
 8004242:	f026 0607 	bic.w	r6, r6, #7
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	1af2      	subs	r2, r6, r3
 800424a:	d0b6      	beq.n	80041ba <_malloc_r+0x22>
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	50a3      	str	r3, [r4, r2]
 8004250:	e7b3      	b.n	80041ba <_malloc_r+0x22>
 8004252:	6862      	ldr	r2, [r4, #4]
 8004254:	42a3      	cmp	r3, r4
 8004256:	bf0c      	ite	eq
 8004258:	6032      	streq	r2, [r6, #0]
 800425a:	605a      	strne	r2, [r3, #4]
 800425c:	e7ec      	b.n	8004238 <_malloc_r+0xa0>
 800425e:	4623      	mov	r3, r4
 8004260:	6864      	ldr	r4, [r4, #4]
 8004262:	e7b2      	b.n	80041ca <_malloc_r+0x32>
 8004264:	4634      	mov	r4, r6
 8004266:	6876      	ldr	r6, [r6, #4]
 8004268:	e7b9      	b.n	80041de <_malloc_r+0x46>
 800426a:	230c      	movs	r3, #12
 800426c:	4638      	mov	r0, r7
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	f000 f84c 	bl	800430c <__malloc_unlock>
 8004274:	e7a1      	b.n	80041ba <_malloc_r+0x22>
 8004276:	6025      	str	r5, [r4, #0]
 8004278:	e7de      	b.n	8004238 <_malloc_r+0xa0>
 800427a:	bf00      	nop
 800427c:	200001fc 	.word	0x200001fc

08004280 <_realloc_r>:
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	4680      	mov	r8, r0
 8004286:	4614      	mov	r4, r2
 8004288:	460e      	mov	r6, r1
 800428a:	b921      	cbnz	r1, 8004296 <_realloc_r+0x16>
 800428c:	4611      	mov	r1, r2
 800428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004292:	f7ff bf81 	b.w	8004198 <_malloc_r>
 8004296:	b92a      	cbnz	r2, 80042a4 <_realloc_r+0x24>
 8004298:	f7ff ff16 	bl	80040c8 <_free_r>
 800429c:	4625      	mov	r5, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	f000 f838 	bl	8004318 <_malloc_usable_size_r>
 80042a8:	4284      	cmp	r4, r0
 80042aa:	4607      	mov	r7, r0
 80042ac:	d802      	bhi.n	80042b4 <_realloc_r+0x34>
 80042ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042b2:	d812      	bhi.n	80042da <_realloc_r+0x5a>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4640      	mov	r0, r8
 80042b8:	f7ff ff6e 	bl	8004198 <_malloc_r>
 80042bc:	4605      	mov	r5, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0ed      	beq.n	800429e <_realloc_r+0x1e>
 80042c2:	42bc      	cmp	r4, r7
 80042c4:	4622      	mov	r2, r4
 80042c6:	4631      	mov	r1, r6
 80042c8:	bf28      	it	cs
 80042ca:	463a      	movcs	r2, r7
 80042cc:	f7ff fed4 	bl	8004078 <memcpy>
 80042d0:	4631      	mov	r1, r6
 80042d2:	4640      	mov	r0, r8
 80042d4:	f7ff fef8 	bl	80040c8 <_free_r>
 80042d8:	e7e1      	b.n	800429e <_realloc_r+0x1e>
 80042da:	4635      	mov	r5, r6
 80042dc:	e7df      	b.n	800429e <_realloc_r+0x1e>
	...

080042e0 <_sbrk_r>:
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	2300      	movs	r3, #0
 80042e4:	4d05      	ldr	r5, [pc, #20]	; (80042fc <_sbrk_r+0x1c>)
 80042e6:	4604      	mov	r4, r0
 80042e8:	4608      	mov	r0, r1
 80042ea:	602b      	str	r3, [r5, #0]
 80042ec:	f7ff fb1a 	bl	8003924 <_sbrk>
 80042f0:	1c43      	adds	r3, r0, #1
 80042f2:	d102      	bne.n	80042fa <_sbrk_r+0x1a>
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	b103      	cbz	r3, 80042fa <_sbrk_r+0x1a>
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	bd38      	pop	{r3, r4, r5, pc}
 80042fc:	20000204 	.word	0x20000204

08004300 <__malloc_lock>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__malloc_lock+0x8>)
 8004302:	f000 b811 	b.w	8004328 <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	20000208 	.word	0x20000208

0800430c <__malloc_unlock>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__malloc_unlock+0x8>)
 800430e:	f000 b80c 	b.w	800432a <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	20000208 	.word	0x20000208

08004318 <_malloc_usable_size_r>:
 8004318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800431c:	1f18      	subs	r0, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	bfbc      	itt	lt
 8004322:	580b      	ldrlt	r3, [r1, r0]
 8004324:	18c0      	addlt	r0, r0, r3
 8004326:	4770      	bx	lr

08004328 <__retarget_lock_acquire_recursive>:
 8004328:	4770      	bx	lr

0800432a <__retarget_lock_release_recursive>:
 800432a:	4770      	bx	lr

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
