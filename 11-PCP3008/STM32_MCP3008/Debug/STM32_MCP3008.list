
STM32_MCP3008.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08005f28  08005f28  00015f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006374  08006374  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006374  08006374  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006374  08006374  00016374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006378  08006378  00016378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800637c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  200001dc  08006558  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08006558  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067ef  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017fa  00000000  00000000  000269f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  000281f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00028990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d7  00000000  00000000  00029058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000856b  00000000  00000000  0004092f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080d7a  00000000  00000000  00048e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9c14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef4  00000000  00000000  000c9c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f10 	.word	0x08005f10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005f10 	.word	0x08005f10

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_Init+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_Init+0x28>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f92b 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f808 	bl	8000f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f001 ff44 	bl	8002dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40022000 	.word	0x40022000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x54>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x58>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f935 	bl	80011fe <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f90b 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x5c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b02      	ldr	r3, [pc, #8]	; (8001004 <HAL_GetTick+0x10>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr
 8001004:	200001f8 	.word	0x200001f8

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff fff0 	bl	8000ff4 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffe0 	bl	8000ff4 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff49 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff5e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff ffb0 	bl	800116c <SysTick_Config>
 800120c:	4603      	mov	r3, r0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b08b      	sub	sp, #44	; 0x2c
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122a:	e161      	b.n	80014f0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800122c:	2201      	movs	r2, #1
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	429a      	cmp	r2, r3
 8001246:	f040 8150 	bne.w	80014ea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a97      	ldr	r2, [pc, #604]	; (80014ac <HAL_GPIO_Init+0x294>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d05e      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001254:	4a95      	ldr	r2, [pc, #596]	; (80014ac <HAL_GPIO_Init+0x294>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d875      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800125a:	4a95      	ldr	r2, [pc, #596]	; (80014b0 <HAL_GPIO_Init+0x298>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d058      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001260:	4a93      	ldr	r2, [pc, #588]	; (80014b0 <HAL_GPIO_Init+0x298>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d86f      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001266:	4a93      	ldr	r2, [pc, #588]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d052      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 800126c:	4a91      	ldr	r2, [pc, #580]	; (80014b4 <HAL_GPIO_Init+0x29c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d869      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001272:	4a91      	ldr	r2, [pc, #580]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d04c      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001278:	4a8f      	ldr	r2, [pc, #572]	; (80014b8 <HAL_GPIO_Init+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d863      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800127e:	4a8f      	ldr	r2, [pc, #572]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d046      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
 8001284:	4a8d      	ldr	r2, [pc, #564]	; (80014bc <HAL_GPIO_Init+0x2a4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d85d      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 800128a:	2b12      	cmp	r3, #18
 800128c:	d82a      	bhi.n	80012e4 <HAL_GPIO_Init+0xcc>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d859      	bhi.n	8001346 <HAL_GPIO_Init+0x12e>
 8001292:	a201      	add	r2, pc, #4	; (adr r2, 8001298 <HAL_GPIO_Init+0x80>)
 8001294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001298:	08001313 	.word	0x08001313
 800129c:	080012ed 	.word	0x080012ed
 80012a0:	080012ff 	.word	0x080012ff
 80012a4:	08001341 	.word	0x08001341
 80012a8:	08001347 	.word	0x08001347
 80012ac:	08001347 	.word	0x08001347
 80012b0:	08001347 	.word	0x08001347
 80012b4:	08001347 	.word	0x08001347
 80012b8:	08001347 	.word	0x08001347
 80012bc:	08001347 	.word	0x08001347
 80012c0:	08001347 	.word	0x08001347
 80012c4:	08001347 	.word	0x08001347
 80012c8:	08001347 	.word	0x08001347
 80012cc:	08001347 	.word	0x08001347
 80012d0:	08001347 	.word	0x08001347
 80012d4:	08001347 	.word	0x08001347
 80012d8:	08001347 	.word	0x08001347
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	08001309 	.word	0x08001309
 80012e4:	4a76      	ldr	r2, [pc, #472]	; (80014c0 <HAL_GPIO_Init+0x2a8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e02c      	b.n	8001346 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	623b      	str	r3, [r7, #32]
          break;
 80012f2:	e029      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	3304      	adds	r3, #4
 80012fa:	623b      	str	r3, [r7, #32]
          break;
 80012fc:	e024      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	3308      	adds	r3, #8
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e01f      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	330c      	adds	r3, #12
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e01a      	b.n	8001348 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2304      	movs	r3, #4
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e013      	b.n	8001348 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001328:	2308      	movs	r3, #8
 800132a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	611a      	str	r2, [r3, #16]
          break;
 8001332:	e009      	b.n	8001348 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001334:	2308      	movs	r3, #8
 8001336:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	615a      	str	r2, [r3, #20]
          break;
 800133e:	e003      	b.n	8001348 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
          break;
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x130>
          break;
 8001346:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	; 0xff
 800134c:	d801      	bhi.n	8001352 <HAL_GPIO_Init+0x13a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	e001      	b.n	8001356 <HAL_GPIO_Init+0x13e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	; 0xff
 800135c:	d802      	bhi.n	8001364 <HAL_GPIO_Init+0x14c>
 800135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	e002      	b.n	800136a <HAL_GPIO_Init+0x152>
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	3b08      	subs	r3, #8
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	210f      	movs	r1, #15
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	401a      	ands	r2, r3
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	431a      	orrs	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80a9 	beq.w	80014ea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001398:	4b4a      	ldr	r3, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a49      	ldr	r2, [pc, #292]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_GPIO_Init+0x2ac>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b0:	4a45      	ldr	r2, [pc, #276]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	3302      	adds	r3, #2
 80013b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	220f      	movs	r2, #15
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3d      	ldr	r2, [pc, #244]	; (80014cc <HAL_GPIO_Init+0x2b4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d00d      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3c      	ldr	r2, [pc, #240]	; (80014d0 <HAL_GPIO_Init+0x2b8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d007      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a3b      	ldr	r2, [pc, #236]	; (80014d4 <HAL_GPIO_Init+0x2bc>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d101      	bne.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2303      	movs	r3, #3
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140a:	492f      	ldr	r1, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x2b0>)
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001424:	4b2c      	ldr	r3, [pc, #176]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	492b      	ldr	r1, [pc, #172]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	600b      	str	r3, [r1, #0]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800143c:	4013      	ands	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d006      	beq.n	800145a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	4921      	ldr	r1, [pc, #132]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
 8001458:	e006      	b.n	8001468 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	43db      	mvns	r3, r3
 8001462:	491d      	ldr	r1, [pc, #116]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001464:	4013      	ands	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4917      	ldr	r1, [pc, #92]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4913      	ldr	r1, [pc, #76]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800148c:	4013      	ands	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01f      	beq.n	80014dc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	490d      	ldr	r1, [pc, #52]	; (80014d8 <HAL_GPIO_Init+0x2c0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e01f      	b.n	80014ea <HAL_GPIO_Init+0x2d2>
 80014aa:	bf00      	nop
 80014ac:	10320000 	.word	0x10320000
 80014b0:	10310000 	.word	0x10310000
 80014b4:	10220000 	.word	0x10220000
 80014b8:	10210000 	.word	0x10210000
 80014bc:	10120000 	.word	0x10120000
 80014c0:	10110000 	.word	0x10110000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010000 	.word	0x40010000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40011000 	.word	0x40011000
 80014d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_GPIO_Init+0x2f4>)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4909      	ldr	r1, [pc, #36]	; (800150c <HAL_GPIO_Init+0x2f4>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f ae96 	bne.w	800122c <HAL_GPIO_Init+0x14>
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	372c      	adds	r7, #44	; 0x2c
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e272      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001560:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00c      	beq.n	8001586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156c:	4b8f      	ldr	r3, [pc, #572]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
 8001578:	4b8c      	ldr	r3, [pc, #560]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d10b      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	4b89      	ldr	r3, [pc, #548]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06c      	beq.n	800166c <HAL_RCC_OscConfig+0x12c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d168      	bne.n	800166c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e24c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x76>
 80015a8:	4b80      	ldr	r3, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a7f      	ldr	r2, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0xbc>
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a71      	ldr	r2, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fcea 	bl	8000ff4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fce6 	bl	8000ff4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e200      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xe4>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fcd6 	bl	8000ff4 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcd2 	bl	8000ff4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1ec      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x10c>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
 8001692:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4939      	ldr	r1, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff fc8b 	bl	8000ff4 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc87 	bl	8000ff4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4927      	ldr	r1, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fc6a 	bl	8000ff4 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fc66 	bl	8000ff4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e180      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff fc4a 	bl	8000ff4 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff fc46 	bl	8000ff4 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e160      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 faa6 	bl	8001cd4 <RCC_Delay>
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_RCC_OscConfig+0x274>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fc30 	bl	8000ff4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff fc2c 	bl	8000ff4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e146      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420000 	.word	0x42420000
 80017b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b92      	ldr	r3, [pc, #584]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e9      	bne.n	8001798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a6 	beq.w	800191e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a87      	ldr	r2, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b85      	ldr	r3, [pc, #532]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7e      	ldr	r2, [pc, #504]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fbed 	bl	8000ff4 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fbe9 	bl	8000ff4 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e103      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x312>
 8001844:	4b6f      	ldr	r3, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6e      	ldr	r2, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02d      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x334>
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a69      	ldr	r2, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a66      	ldr	r2, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x356>
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001896:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a5a      	ldr	r2, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fb9d 	bl	8000ff4 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7ff fb99 	bl	8000ff4 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x37e>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb87 	bl	8000ff4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7ff fb83 	bl	8000ff4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e09b      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a3b      	ldr	r2, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d061      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d146      	bne.n	80019ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb57 	bl	8000ff4 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fb53 	bl	8000ff4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e06d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4921      	ldr	r1, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a19      	ldr	r1, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	430b      	orrs	r3, r1
 8001996:	491b      	ldr	r1, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb27 	bl	8000ff4 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7ff fb23 	bl	8000ff4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x46a>
 80019c8:	e035      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb10 	bl	8000ff4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fb0c 	bl	8000ff4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e026      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x498>
 80019f6:	e01e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e019      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x500>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4965      	ldr	r1, [pc, #404]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fa5e 	bl	8000ff4 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff fa5a 	bl	8000ff4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4922      	ldr	r1, [pc, #136]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f9bc 	bl	8000f70 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08005f8c 	.word	0x08005f8c
 8001c10:	20000008 	.word	0x20000008
 8001c14:	20000000 	.word	0x20000000

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b490      	push	{r4, r7}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001c20:	1d3c      	adds	r4, r7, #4
 8001c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c28:	f240 2301 	movw	r3, #513	; 0x201
 8001c2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x40>
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d003      	beq.n	8001c5e <HAL_RCC_GetSysClockFreq+0x46>
 8001c56:	e02b      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c5a:	623b      	str	r3, [r7, #32]
      break;
 8001c5c:	e02b      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	0c9b      	lsrs	r3, r3, #18
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3328      	adds	r3, #40	; 0x28
 8001c68:	443b      	add	r3, r7
 8001c6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d012      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0c5b      	lsrs	r3, r3, #17
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	3328      	adds	r3, #40	; 0x28
 8001c86:	443b      	add	r3, r7
 8001c88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c92:	fb03 f202 	mul.w	r2, r3, r2
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	e004      	b.n	8001caa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	623b      	str	r3, [r7, #32]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb2:	623b      	str	r3, [r7, #32]
      break;
 8001cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3728      	adds	r7, #40	; 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc90      	pop	{r4, r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	08005f28 	.word	0x08005f28
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	007a1200 	.word	0x007a1200
 8001cd0:	003d0900 	.word	0x003d0900

08001cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <RCC_Delay+0x34>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <RCC_Delay+0x38>)
 8001ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce6:	0a5b      	lsrs	r3, r3, #9
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cf0:	bf00      	nop
  }
  while (Delay --);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	60fa      	str	r2, [r7, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f9      	bne.n	8001cf0 <RCC_Delay+0x1c>
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	10624dd3 	.word	0x10624dd3

08001d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e076      	b.n	8001e10 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d108      	bne.n	8001d3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d32:	d009      	beq.n	8001d48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
 8001d3a:	e005      	b.n	8001d48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f001 f874 	bl	8002e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	0c1a      	lsrs	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f002 0204 	and.w	r2, r2, #4
 8001dee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08c      	sub	sp, #48	; 0x30
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d101      	bne.n	8001e3e <HAL_SPI_TransmitReceive+0x26>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e18a      	b.n	8002154 <HAL_SPI_TransmitReceive+0x33c>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e46:	f7ff f8d5 	bl	8000ff4 <HAL_GetTick>
 8001e4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d00f      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x70>
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6e:	d107      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x68>
 8001e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d003      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
 8001e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e86:	e15b      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x82>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_TransmitReceive+0x82>
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ea0:	e14e      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	887a      	ldrh	r2, [r7, #2]
 8001ede:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef6:	2b40      	cmp	r3, #64	; 0x40
 8001ef8:	d007      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f12:	d178      	bne.n	8002006 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_SPI_TransmitReceive+0x10a>
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d166      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	1c9a      	adds	r2, r3, #2
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f46:	e053      	b.n	8001ff0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d11b      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x176>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_SPI_TransmitReceive+0x176>
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d113      	bne.n	8001f8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	881a      	ldrh	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	1c9a      	adds	r2, r3, #2
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d119      	bne.n	8001fd0 <HAL_SPI_TransmitReceive+0x1b8>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d014      	beq.n	8001fd0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	1c9a      	adds	r2, r3, #2
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fd0:	f7ff f810 	bl	8000ff4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d807      	bhi.n	8001ff0 <HAL_SPI_TransmitReceive+0x1d8>
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d003      	beq.n	8001ff0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fee:	e0a7      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1a6      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x130>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1a1      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x130>
 8002004:	e07c      	b.n	8002100 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x1fc>
 800200e:	8b7b      	ldrh	r3, [r7, #26]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d16b      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	330c      	adds	r3, #12
 800201e:	7812      	ldrb	r2, [r2, #0]
 8002020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800203a:	e057      	b.n	80020ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d11c      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x26c>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d017      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x26c>
 8002054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d114      	bne.n	8002084 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	330c      	adds	r3, #12
 8002064:	7812      	ldrb	r2, [r2, #0]
 8002066:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	d119      	bne.n	80020c6 <HAL_SPI_TransmitReceive+0x2ae>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002096:	b29b      	uxth	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d014      	beq.n	80020c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020c6:	f7fe ff95 	bl	8000ff4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d803      	bhi.n	80020de <HAL_SPI_TransmitReceive+0x2c6>
 80020d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d102      	bne.n	80020e4 <HAL_SPI_TransmitReceive+0x2cc>
 80020de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020ea:	e029      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1a2      	bne.n	800203c <HAL_SPI_TransmitReceive+0x224>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d19d      	bne.n	800203c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f8b1 	bl	800226c <SPI_EndRxTxTransaction>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800211c:	e010      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	e000      	b.n	8002140 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800213e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002154:	4618      	mov	r0, r3
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800216c:	f7fe ff42 	bl	8000ff4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800217c:	f7fe ff3a 	bl	8000ff4 <HAL_GetTick>
 8002180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	0d1b      	lsrs	r3, r3, #20
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002192:	e054      	b.n	800223e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d050      	beq.n	800223e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800219c:	f7fe ff2a 	bl	8000ff4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d902      	bls.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13d      	bne.n	800222e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ca:	d111      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d4:	d004      	beq.n	80021e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d107      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f8:	d10f      	bne.n	800221a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e017      	b.n	800225e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3b01      	subs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	429a      	cmp	r2, r3
 800225a:	d19b      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000008 	.word	0x20000008

0800226c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ff6a 	bl	800215c <SPI_WaitFlagStateUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e000      	b.n	80022a0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
           uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	; 0x38
 80022ac:	af0a      	add	r7, sp, #40	; 0x28
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <LiquidCrystal+0x90>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d019      	beq.n	80022fe <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80022ca:	8939      	ldrh	r1, [r7, #8]
 80022cc:	897a      	ldrh	r2, [r7, #10]
 80022ce:	2300      	movs	r3, #0
 80022d0:	9308      	str	r3, [sp, #32]
 80022d2:	2300      	movs	r3, #0
 80022d4:	9307      	str	r3, [sp, #28]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9306      	str	r3, [sp, #24]
 80022da:	2300      	movs	r3, #0
 80022dc:	9305      	str	r3, [sp, #20]
 80022de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	8c3b      	ldrh	r3, [r7, #32]
 80022e4:	9303      	str	r3, [sp, #12]
 80022e6:	8bbb      	ldrh	r3, [r7, #28]
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	8b3b      	ldrh	r3, [r7, #24]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	460b      	mov	r3, r1
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	2001      	movs	r0, #1
 80022f8:	f000 f820 	bl	800233c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80022fc:	e018      	b.n	8002330 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80022fe:	8939      	ldrh	r1, [r7, #8]
 8002300:	897a      	ldrh	r2, [r7, #10]
 8002302:	2300      	movs	r3, #0
 8002304:	9308      	str	r3, [sp, #32]
 8002306:	2300      	movs	r3, #0
 8002308:	9307      	str	r3, [sp, #28]
 800230a:	2300      	movs	r3, #0
 800230c:	9306      	str	r3, [sp, #24]
 800230e:	2300      	movs	r3, #0
 8002310:	9305      	str	r3, [sp, #20]
 8002312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002314:	9304      	str	r3, [sp, #16]
 8002316:	8c3b      	ldrh	r3, [r7, #32]
 8002318:	9303      	str	r3, [sp, #12]
 800231a:	8bbb      	ldrh	r3, [r7, #28]
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	8b3b      	ldrh	r3, [r7, #24]
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	460b      	mov	r3, r1
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f806 	bl	800233c <init>
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000005 	.word	0x20000005

0800233c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
       uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
       uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	4611      	mov	r1, r2
 8002346:	461a      	mov	r2, r3
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	460b      	mov	r3, r1
 800234e:	81bb      	strh	r3, [r7, #12]
 8002350:	4613      	mov	r3, r2
 8002352:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <init+0x80>)
 8002356:	89bb      	ldrh	r3, [r7, #12]
 8002358:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800235a:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <init+0x84>)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8002360:	4a18      	ldr	r2, [pc, #96]	; (80023c4 <init+0x88>)
 8002362:	8b3b      	ldrh	r3, [r7, #24]
 8002364:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <init+0x8c>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 800236c:	4a17      	ldr	r2, [pc, #92]	; (80023cc <init+0x90>)
 800236e:	8bbb      	ldrh	r3, [r7, #28]
 8002370:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 8002372:	4a16      	ldr	r2, [pc, #88]	; (80023cc <init+0x90>)
 8002374:	8c3b      	ldrh	r3, [r7, #32]
 8002376:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8002378:	4a14      	ldr	r2, [pc, #80]	; (80023cc <init+0x90>)
 800237a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800237c:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 800237e:	4a13      	ldr	r2, [pc, #76]	; (80023cc <init+0x90>)
 8002380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002382:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 8002384:	4a11      	ldr	r2, [pc, #68]	; (80023cc <init+0x90>)
 8002386:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002388:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <init+0x90>)
 800238c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800238e:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <init+0x90>)
 8002392:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002394:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 8002396:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <init+0x90>)
 8002398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800239a:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

 // begin(16, 2);
}
 80023a8:	e002      	b.n	80023b0 <init+0x74>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <init+0x94>)
 80023ac:	2210      	movs	r2, #16
 80023ae:	701a      	strb	r2, [r3, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	200001fe 	.word	0x200001fe
 80023c0:	20000200 	.word	0x20000200
 80023c4:	20000202 	.word	0x20000202
 80023c8:	20000214 	.word	0x20000214
 80023cc:	20000204 	.word	0x20000204
 80023d0:	20000218 	.word	0x20000218

080023d4 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	460a      	mov	r2, r1
 80023de:	71fb      	strb	r3, [r7, #7]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80023e4:	79bb      	ldrb	r3, [r7, #6]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d906      	bls.n	80023f8 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <begin+0x1f4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <begin+0x1f4>)
 80023f6:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80023f8:	4a74      	ldr	r2, [pc, #464]	; (80025cc <begin+0x1f8>)
 80023fa:	79bb      	ldrb	r3, [r7, #6]
 80023fc:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80023fe:	79fa      	ldrb	r2, [r7, #7]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	3340      	adds	r3, #64	; 0x40
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	2000      	movs	r0, #0
 8002408:	f000 f962 	bl	80026d0 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 800240c:	4b70      	ldr	r3, [pc, #448]	; (80025d0 <begin+0x1fc>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <begin+0x54>
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d106      	bne.n	8002428 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <begin+0x1f4>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	f043 0304 	orr.w	r3, r3, #4
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <begin+0x1f4>)
 8002426:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8002428:	f000 f8e4 	bl	80025f4 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 800242c:	2303      	movs	r3, #3
 800242e:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 8002434:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <begin+0x200>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <begin+0x204>)
 800243e:	881a      	ldrh	r2, [r3, #0]
 8002440:	4b66      	ldr	r3, [pc, #408]	; (80025dc <begin+0x208>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	b29a      	uxth	r2, r3
 8002448:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <begin+0x20c>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <begin+0x210>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	4313      	orrs	r3, r2
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <begin+0x210>)
 800245a:	885b      	ldrh	r3, [r3, #2]
 800245c:	4313      	orrs	r3, r2
 800245e:	b29a      	uxth	r2, r3
 8002460:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <begin+0x210>)
 8002462:	889b      	ldrh	r3, [r3, #4]
 8002464:	4313      	orrs	r3, r2
 8002466:	b29a      	uxth	r2, r3
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <begin+0x210>)
 800246a:	88db      	ldrh	r3, [r3, #6]
 800246c:	4313      	orrs	r3, r2
 800246e:	b29b      	uxth	r3, r3
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	e02a      	b.n	80024ca <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002474:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <begin+0x204>)
 8002476:	881a      	ldrh	r2, [r3, #0]
 8002478:	4b58      	ldr	r3, [pc, #352]	; (80025dc <begin+0x208>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	b29a      	uxth	r2, r3
 8002480:	4b57      	ldr	r3, [pc, #348]	; (80025e0 <begin+0x20c>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002488:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <begin+0x210>)
 800248a:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800248c:	4313      	orrs	r3, r2
 800248e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002490:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <begin+0x210>)
 8002492:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8002494:	4313      	orrs	r3, r2
 8002496:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8002498:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <begin+0x210>)
 800249a:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800249c:	4313      	orrs	r3, r2
 800249e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <begin+0x210>)
 80024a2:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <begin+0x210>)
 80024aa:	891b      	ldrh	r3, [r3, #8]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b4c      	ldr	r3, [pc, #304]	; (80025e4 <begin+0x210>)
 80024b2:	895b      	ldrh	r3, [r3, #10]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <begin+0x210>)
 80024ba:	899b      	ldrh	r3, [r3, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	b29a      	uxth	r2, r3
 80024c0:	4b48      	ldr	r3, [pc, #288]	; (80025e4 <begin+0x210>)
 80024c2:	89db      	ldrh	r3, [r3, #14]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80024c8:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <begin+0x214>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f107 0208 	add.w	r2, r7, #8
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fe9f 	bl	8001218 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80024da:	2032      	movs	r0, #50	; 0x32
 80024dc:	f7fe fd94 	bl	8001008 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80024e0:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <begin+0x214>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <begin+0x204>)
 80024e6:	8811      	ldrh	r1, [r2, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff f810 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <begin+0x214>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <begin+0x20c>)
 80024f6:	8811      	ldrh	r1, [r2, #0]
 80024f8:	2200      	movs	r2, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff f808 	bl	8001510 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8002500:	4b36      	ldr	r3, [pc, #216]	; (80025dc <begin+0x208>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	2bff      	cmp	r3, #255	; 0xff
 8002506:	d007      	beq.n	8002518 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <begin+0x214>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a33      	ldr	r2, [pc, #204]	; (80025dc <begin+0x208>)
 800250e:	8811      	ldrh	r1, [r2, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fffc 	bl	8001510 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8002518:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <begin+0x1f4>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d115      	bne.n	8002550 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8002524:	2003      	movs	r0, #3
 8002526:	f000 f9f3 	bl	8002910 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800252a:	2005      	movs	r0, #5
 800252c:	f7fe fd6c 	bl	8001008 <HAL_Delay>

    // second try
    write4bits(0x03);
 8002530:	2003      	movs	r0, #3
 8002532:	f000 f9ed 	bl	8002910 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8002536:	2005      	movs	r0, #5
 8002538:	f7fe fd66 	bl	8001008 <HAL_Delay>

    // third go!
    write4bits(0x03);
 800253c:	2003      	movs	r0, #3
 800253e:	f000 f9e7 	bl	8002910 <write4bits>
    HAL_Delay(1);
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fd60 	bl	8001008 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8002548:	2002      	movs	r0, #2
 800254a:	f000 f9e1 	bl	8002910 <write4bits>
 800254e:	e01d      	b.n	800258c <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <begin+0x1f4>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	b2db      	uxtb	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f953 	bl	8002806 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8002560:	2005      	movs	r0, #5
 8002562:	f7fe fd51 	bl	8001008 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <begin+0x1f4>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	f043 0320 	orr.w	r3, r3, #32
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f948 	bl	8002806 <command>
    HAL_Delay(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f7fe fd46 	bl	8001008 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <begin+0x1f4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	f043 0320 	orr.w	r3, r3, #32
 8002584:	b2db      	uxtb	r3, r3
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f93d 	bl	8002806 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <begin+0x1f4>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f043 0320 	orr.w	r3, r3, #32
 8002594:	b2db      	uxtb	r3, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f935 	bl	8002806 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <begin+0x218>)
 800259e:	2204      	movs	r2, #4
 80025a0:	701a      	strb	r2, [r3, #0]
  display();
 80025a2:	f000 f8ef 	bl	8002784 <display>

  // clear it off
  clear();
 80025a6:	f000 f8b1 	bl	800270c <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <begin+0x21c>)
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <begin+0x21c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f923 	bl	8002806 <command>

}
 80025c0:	bf00      	nop
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000218 	.word	0x20000218
 80025cc:	2000021b 	.word	0x2000021b
 80025d0:	200001fc 	.word	0x200001fc
 80025d4:	20000005 	.word	0x20000005
 80025d8:	200001fe 	.word	0x200001fe
 80025dc:	20000200 	.word	0x20000200
 80025e0:	20000202 	.word	0x20000202
 80025e4:	20000204 	.word	0x20000204
 80025e8:	20000214 	.word	0x20000214
 80025ec:	20000219 	.word	0x20000219
 80025f0:	2000021a 	.word	0x2000021a

080025f4 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <enableClock+0xc4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a2f      	ldr	r2, [pc, #188]	; (80026bc <enableClock+0xc8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d10c      	bne.n	800261e <enableClock+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <enableClock+0xcc>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <enableClock+0xcc>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <enableClock+0xcc>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if(_port == GPIOD)
    __HAL_RCC_GPIOD_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 800261c:	e046      	b.n	80026ac <enableClock+0xb8>
  else if(_port == GPIOB)
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <enableClock+0xc4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <enableClock+0xd0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10c      	bne.n	8002642 <enableClock+0x4e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <enableClock+0xcc>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <enableClock+0xcc>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <enableClock+0xcc>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
}
 8002640:	e034      	b.n	80026ac <enableClock+0xb8>
  else if(_port == GPIOB)
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <enableClock+0xc4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <enableClock+0xd0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10c      	bne.n	8002666 <enableClock+0x72>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <enableClock+0xcc>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <enableClock+0xcc>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <enableClock+0xcc>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	e022      	b.n	80026ac <enableClock+0xb8>
  else if(_port == GPIOC)
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <enableClock+0xc4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <enableClock+0xd4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d10c      	bne.n	800268a <enableClock+0x96>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <enableClock+0xcc>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <enableClock+0xcc>)
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <enableClock+0xcc>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
}
 8002688:	e010      	b.n	80026ac <enableClock+0xb8>
  else if(_port == GPIOD)
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <enableClock+0xc4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <enableClock+0xd8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d10b      	bne.n	80026ac <enableClock+0xb8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <enableClock+0xcc>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <enableClock+0xcc>)
 800269a:	f043 0320 	orr.w	r3, r3, #32
 800269e:	6193      	str	r3, [r2, #24]
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <enableClock+0xcc>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000214 	.word	0x20000214
 80026bc:	40010800 	.word	0x40010800
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010c00 	.word	0x40010c00
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40011400 	.word	0x40011400

080026d0 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
 80026dc:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <setRowOffsets+0x38>)
 80026e4:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <setRowOffsets+0x38>)
 80026ec:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <setRowOffsets+0x38>)
 80026f4:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b03      	ldr	r3, [pc, #12]	; (8002708 <setRowOffsets+0x38>)
 80026fc:	70da      	strb	r2, [r3, #3]
}
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	2000021c 	.word	0x2000021c

0800270c <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8002710:	2001      	movs	r0, #1
 8002712:	f000 f878 	bl	8002806 <command>
  HAL_Delay(2);  // this command takes a long time!
 8002716:	2002      	movs	r0, #2
 8002718:	f7fe fc76 	bl	8001008 <HAL_Delay>
}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}

08002720 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	460a      	mov	r2, r1
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	4613      	mov	r3, r2
 800272e:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8002730:	2304      	movs	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8002734:	79bb      	ldrb	r3, [r7, #6]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d803      	bhi.n	8002744 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <setCursor+0x5c>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	79ba      	ldrb	r2, [r7, #6]
 800274a:	429a      	cmp	r2, r3
 800274c:	d303      	bcc.n	8002756 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <setCursor+0x5c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	4a09      	ldr	r2, [pc, #36]	; (8002780 <setCursor+0x60>)
 800275a:	5cd2      	ldrb	r2, [r2, r3]
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	b25b      	sxtb	r3, r3
 8002764:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002768:	b25b      	sxtb	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f84a 	bl	8002806 <command>
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	2000021b 	.word	0x2000021b
 8002780:	2000021c 	.word	0x2000021c

08002784 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <display+0x28>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f043 0304 	orr.w	r3, r3, #4
 8002790:	b2da      	uxtb	r2, r3
 8002792:	4b06      	ldr	r3, [pc, #24]	; (80027ac <display+0x28>)
 8002794:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <display+0x28>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 f830 	bl	8002806 <command>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000219 	.word	0x20000219

080027b0 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <print+0x12>
 80027be:	2300      	movs	r3, #0
 80027c0:	e01d      	b.n	80027fe <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd fcc2 	bl	8000150 <strlen>
 80027cc:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80027d2:	e00c      	b.n	80027ee <print+0x3e>
    if (write(*buffer++)) n++;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	617a      	str	r2, [r7, #20]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f820 	bl	8002822 <write>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <print+0x4a>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
  while (size--) {
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1e5a      	subs	r2, r3, #1
 80027f2:	613a      	str	r2, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ed      	bne.n	80027d4 <print+0x24>
 80027f8:	e000      	b.n	80027fc <print+0x4c>
    else break;
 80027fa:	bf00      	nop
  }
  return n;
 80027fc:	68fb      	ldr	r3, [r7, #12]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f813 	bl	8002840 <send>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <write>:

inline size_t write(uint8_t value) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f805 	bl	8002840 <send>
  return 1; // assume sucess
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	460a      	mov	r2, r1
 800284a:	71fb      	strb	r3, [r7, #7]
 800284c:	4613      	mov	r3, r2
 800284e:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8002850:	4b16      	ldr	r3, [pc, #88]	; (80028ac <send+0x6c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a16      	ldr	r2, [pc, #88]	; (80028b0 <send+0x70>)
 8002856:	8811      	ldrh	r1, [r2, #0]
 8002858:	79ba      	ldrb	r2, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fe58 	bl	8001510 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <send+0x74>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	2bff      	cmp	r3, #255	; 0xff
 8002866:	d007      	beq.n	8002878 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8002868:	4b10      	ldr	r3, [pc, #64]	; (80028ac <send+0x6c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a11      	ldr	r2, [pc, #68]	; (80028b4 <send+0x74>)
 800286e:	8811      	ldrh	r1, [r2, #0]
 8002870:	2200      	movs	r2, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fe4c 	bl	8001510 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <send+0x78>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <send+0x4e>
    write8bits(value);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f86c 	bl	8002964 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800288c:	e009      	b.n	80028a2 <send+0x62>
    write4bits(value>>4);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4618      	mov	r0, r3
 8002896:	f000 f83b 	bl	8002910 <write4bits>
    write4bits(value);
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 f837 	bl	8002910 <write4bits>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000214 	.word	0x20000214
 80028b0:	200001fe 	.word	0x200001fe
 80028b4:	20000200 	.word	0x20000200
 80028b8:	20000218 	.word	0x20000218

080028bc <pulseEnable>:

void pulseEnable(void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <pulseEnable+0x4c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a11      	ldr	r2, [pc, #68]	; (800290c <pulseEnable+0x50>)
 80028c6:	8811      	ldrh	r1, [r2, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fe20 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fe fb99 	bl	8001008 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <pulseEnable+0x4c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a0c      	ldr	r2, [pc, #48]	; (800290c <pulseEnable+0x50>)
 80028dc:	8811      	ldrh	r1, [r2, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fe15 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fe fb8e 	bl	8001008 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <pulseEnable+0x4c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a06      	ldr	r2, [pc, #24]	; (800290c <pulseEnable+0x50>)
 80028f2:	8811      	ldrh	r1, [r2, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fe0a 	bl	8001510 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe fb83 	bl	8001008 <HAL_Delay>
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000214 	.word	0x20000214
 800290c:	20000202 	.word	0x20000202

08002910 <write4bits>:

void write4bits(uint8_t value) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	e013      	b.n	8002948 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002920:	4b0e      	ldr	r3, [pc, #56]	; (800295c <write4bits+0x4c>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	4a0e      	ldr	r2, [pc, #56]	; (8002960 <write4bits+0x50>)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	fa42 f303 	asr.w	r3, r2, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	f7fe fde7 	bl	8001510 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3301      	adds	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b03      	cmp	r3, #3
 800294c:	dde8      	ble.n	8002920 <write4bits+0x10>
  }

  pulseEnable();
 800294e:	f7ff ffb5 	bl	80028bc <pulseEnable>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000214 	.word	0x20000214
 8002960:	20000204 	.word	0x20000204

08002964 <write8bits>:

void write8bits(uint8_t value) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e013      	b.n	800299c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <write8bits+0x4c>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	4a0e      	ldr	r2, [pc, #56]	; (80029b4 <write8bits+0x50>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002980:	79fa      	ldrb	r2, [r7, #7]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	fa42 f303 	asr.w	r3, r2, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	f7fe fdbd 	bl	8001510 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3301      	adds	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b07      	cmp	r3, #7
 80029a0:	dde8      	ble.n	8002974 <write8bits+0x10>
  }

  pulseEnable();
 80029a2:	f7ff ff8b 	bl	80028bc <pulseEnable>
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000214 	.word	0x20000214
 80029b4:	20000204 	.word	0x20000204

080029b8 <MCP3008_Init>:
 * CPHA = 1 Edge
 * Prescaler = 8
 * First bit = MBS first
 * CPOL = Low
 */
void MCP3008_Init(MCP3008_SPI* spi, SPI_HandleTypeDef* hspi, GPIO_TypeDef* CS_PORT, uint16_t CS_PIN){
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	807b      	strh	r3, [r7, #2]
  spi->hspi = hspi;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	609a      	str	r2, [r3, #8]
  spi->CS_PORT = CS_PORT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	601a      	str	r2, [r3, #0]
  spi->CS_PIN = CS_PIN;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	887a      	ldrh	r2, [r7, #2]
 80029d6:	809a      	strh	r2, [r3, #4]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
	...

080029e4 <MCP3008_Read_Channel>:

// Read the channels from 0 to 7
uint16_t MCP3008_Read_Channel(MCP3008_SPI* spi, uint8_t channel){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]

	// Declare data that we will send
	uint8_t pTxData[3] = {0};
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <MCP3008_Read_Channel+0xa8>)
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	81bb      	strh	r3, [r7, #12]
 80029f6:	2300      	movs	r3, #0
 80029f8:	73bb      	strb	r3, [r7, #14]
	pTxData[0] = ((0x01 << 7)|		  // start bit
		     (1 << 6)|			// SGL
		     ((channel & 0x07) << 3)); 	// channel number
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	b25b      	sxtb	r3, r3
 8002a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a04:	b25b      	sxtb	r3, r3
		     (1 << 6)|			// SGL
 8002a06:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	b2db      	uxtb	r3, r3
	pTxData[0] = ((0x01 << 7)|		  // start bit
 8002a0e:	733b      	strb	r3, [r7, #12]
	pTxData[1] = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	737b      	strb	r3, [r7, #13]
	pTxData[2] = 0x00;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73bb      	strb	r3, [r7, #14]

	// Data that we will get
	uint8_t pRxData[3] = {0};
 8002a18:	4b1c      	ldr	r3, [pc, #112]	; (8002a8c <MCP3008_Read_Channel+0xa8>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	72bb      	strb	r3, [r7, #10]

	// CS low, Send and receive, CS high
	HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_RESET);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	889b      	ldrh	r3, [r3, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe fd6f 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(spi->hspi, pTxData, pRxData, 3, 10);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6898      	ldr	r0, [r3, #8]
 8002a36:	f107 0208 	add.w	r2, r7, #8
 8002a3a:	f107 010c 	add.w	r1, r7, #12
 8002a3e:	230a      	movs	r3, #10
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	2303      	movs	r3, #3
 8002a44:	f7ff f9e8 	bl	8001e18 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(spi->CS_PORT, spi->CS_PIN, GPIO_PIN_SET);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	889b      	ldrh	r3, [r3, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4619      	mov	r1, r3
 8002a54:	f7fe fd5c 	bl	8001510 <HAL_GPIO_WritePin>

	// Compute the ADC
	return 0x3FF & ((pRxData[0] & 0x01) << 9 | (pRxData[1] & 0xFF) << 1 | (pRxData[2] & 0x80) >> 7);
 8002a58:	7a3b      	ldrb	r3, [r7, #8]
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a62:	b21a      	sxth	r2, r3
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	7abb      	ldrb	r3, [r7, #10]
 8002a70:	09db      	lsrs	r3, r3, #7
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	b21b      	sxth	r3, r3
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b21b      	sxth	r3, r3
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a80:	b29b      	uxth	r3, r3
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	08005f38 	.word	0x08005f38

08002a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a96:	f7fe fa55 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a9a:	f000 f8fb 	bl	8002c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a9e:	f000 f96b 	bl	8002d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002aa2:	f000 f933 	bl	8002d0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  MCP3008_Init(&spi_mpc3008, &hspi1, GPIOA, GPIO_PIN_8);
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	4a65      	ldr	r2, [pc, #404]	; (8002c40 <main+0x1b0>)
 8002aac:	4965      	ldr	r1, [pc, #404]	; (8002c44 <main+0x1b4>)
 8002aae:	4866      	ldr	r0, [pc, #408]	; (8002c48 <main+0x1b8>)
 8002ab0:	f7ff ff82 	bl	80029b8 <MCP3008_Init>
  LiquidCrystal(GPIOB, GPIO_PIN_3,GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6 ,GPIO_PIN_7,GPIO_PIN_8,GPIO_PIN_9);
 8002ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab8:	9303      	str	r3, [sp, #12]
 8002aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002abe:	9302      	str	r3, [sp, #8]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2340      	movs	r3, #64	; 0x40
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2320      	movs	r3, #32
 8002aca:	2210      	movs	r2, #16
 8002acc:	2108      	movs	r1, #8
 8002ace:	485f      	ldr	r0, [pc, #380]	; (8002c4c <main+0x1bc>)
 8002ad0:	f7ff fbea 	bl	80022a8 <LiquidCrystal>
  begin(20, 4);
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	2014      	movs	r0, #20
 8002ad8:	f7ff fc7c 	bl	80023d4 <begin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Read ADC's
       adc0 = MCP3008_Read_Channel(&spi_mpc3008, 0); // Channel 0
 8002adc:	2100      	movs	r1, #0
 8002ade:	485a      	ldr	r0, [pc, #360]	; (8002c48 <main+0x1b8>)
 8002ae0:	f7ff ff80 	bl	80029e4 <MCP3008_Read_Channel>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b59      	ldr	r3, [pc, #356]	; (8002c50 <main+0x1c0>)
 8002aea:	801a      	strh	r2, [r3, #0]
       adc1 = MCP3008_Read_Channel(&spi_mpc3008, 1); // Channel 1
 8002aec:	2101      	movs	r1, #1
 8002aee:	4856      	ldr	r0, [pc, #344]	; (8002c48 <main+0x1b8>)
 8002af0:	f7ff ff78 	bl	80029e4 <MCP3008_Read_Channel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <main+0x1c4>)
 8002afa:	801a      	strh	r2, [r3, #0]
       adc2 = MCP3008_Read_Channel(&spi_mpc3008, 2); // Channel 2
 8002afc:	2102      	movs	r1, #2
 8002afe:	4852      	ldr	r0, [pc, #328]	; (8002c48 <main+0x1b8>)
 8002b00:	f7ff ff70 	bl	80029e4 <MCP3008_Read_Channel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <main+0x1c8>)
 8002b0a:	801a      	strh	r2, [r3, #0]
       adc3 = MCP3008_Read_Channel(&spi_mpc3008, 3); // Channel 3
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	484e      	ldr	r0, [pc, #312]	; (8002c48 <main+0x1b8>)
 8002b10:	f7ff ff68 	bl	80029e4 <MCP3008_Read_Channel>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <main+0x1cc>)
 8002b1a:	801a      	strh	r2, [r3, #0]

      result_0 = (float)adc0;
 8002b1c:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <main+0x1c0>)
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f867 	bl	8000bf4 <__aeabi_ui2f>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a4d      	ldr	r2, [pc, #308]	; (8002c60 <main+0x1d0>)
 8002b2a:	6013      	str	r3, [r2, #0]
      result_1 = (float)adc1;
 8002b2c:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <main+0x1c4>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f85f 	bl	8000bf4 <__aeabi_ui2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <main+0x1d4>)
 8002b3a:	6013      	str	r3, [r2, #0]
      result_2 = (float)adc2;
 8002b3c:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <main+0x1c8>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe f857 	bl	8000bf4 <__aeabi_ui2f>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a47      	ldr	r2, [pc, #284]	; (8002c68 <main+0x1d8>)
 8002b4a:	6013      	str	r3, [r2, #0]
      result_3 = (float)adc3;
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <main+0x1cc>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f84f 	bl	8000bf4 <__aeabi_ui2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a44      	ldr	r2, [pc, #272]	; (8002c6c <main+0x1dc>)
 8002b5a:	6013      	str	r3, [r2, #0]

      result_0=result_0/200;
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <main+0x1d0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4943      	ldr	r1, [pc, #268]	; (8002c70 <main+0x1e0>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe f952 	bl	8000e0c <__aeabi_fdiv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b3c      	ldr	r3, [pc, #240]	; (8002c60 <main+0x1d0>)
 8002b6e:	601a      	str	r2, [r3, #0]
      result_1=result_1/200;
 8002b70:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <main+0x1d4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	493e      	ldr	r1, [pc, #248]	; (8002c70 <main+0x1e0>)
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f948 	bl	8000e0c <__aeabi_fdiv>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <main+0x1d4>)
 8002b82:	601a      	str	r2, [r3, #0]
      result_2=result_2/200;
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <main+0x1d8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4939      	ldr	r1, [pc, #228]	; (8002c70 <main+0x1e0>)
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe f93e 	bl	8000e0c <__aeabi_fdiv>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <main+0x1d8>)
 8002b96:	601a      	str	r2, [r3, #0]
      result_3=result_3/200;
 8002b98:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <main+0x1dc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4934      	ldr	r1, [pc, #208]	; (8002c70 <main+0x1e0>)
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f934 	bl	8000e0c <__aeabi_fdiv>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <main+0x1dc>)
 8002baa:	601a      	str	r2, [r3, #0]

      sprintf(MSG_0,"ADC0 Value = %.2f",result_0);
 8002bac:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <main+0x1d0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fc39 	bl	8000428 <__aeabi_f2d>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	492e      	ldr	r1, [pc, #184]	; (8002c74 <main+0x1e4>)
 8002bbc:	482e      	ldr	r0, [pc, #184]	; (8002c78 <main+0x1e8>)
 8002bbe:	f000 ff2f 	bl	8003a20 <siprintf>
      setCursor(0,0);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff fdab 	bl	8002720 <setCursor>
      print(MSG_0);
 8002bca:	482b      	ldr	r0, [pc, #172]	; (8002c78 <main+0x1e8>)
 8002bcc:	f7ff fdf0 	bl	80027b0 <print>
      sprintf(MSG_1,"ADC1 Value = %.2f",result_1);
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <main+0x1d4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fd fc27 	bl	8000428 <__aeabi_f2d>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4927      	ldr	r1, [pc, #156]	; (8002c7c <main+0x1ec>)
 8002be0:	4827      	ldr	r0, [pc, #156]	; (8002c80 <main+0x1f0>)
 8002be2:	f000 ff1d 	bl	8003a20 <siprintf>
      setCursor(0,1);
 8002be6:	2101      	movs	r1, #1
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7ff fd99 	bl	8002720 <setCursor>
      print(MSG_1);
 8002bee:	4824      	ldr	r0, [pc, #144]	; (8002c80 <main+0x1f0>)
 8002bf0:	f7ff fdde 	bl	80027b0 <print>
      sprintf(MSG_2,"ADC2 Value = %.2f",result_2);
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <main+0x1d8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fc15 	bl	8000428 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4920      	ldr	r1, [pc, #128]	; (8002c84 <main+0x1f4>)
 8002c04:	4820      	ldr	r0, [pc, #128]	; (8002c88 <main+0x1f8>)
 8002c06:	f000 ff0b 	bl	8003a20 <siprintf>
      setCursor(0,2);
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff fd87 	bl	8002720 <setCursor>
      print(MSG_2);
 8002c12:	481d      	ldr	r0, [pc, #116]	; (8002c88 <main+0x1f8>)
 8002c14:	f7ff fdcc 	bl	80027b0 <print>
      sprintf(MSG_3,"ADC3 Value = %.2f",result_3);
 8002c18:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <main+0x1dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fc03 	bl	8000428 <__aeabi_f2d>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4919      	ldr	r1, [pc, #100]	; (8002c8c <main+0x1fc>)
 8002c28:	4819      	ldr	r0, [pc, #100]	; (8002c90 <main+0x200>)
 8002c2a:	f000 fef9 	bl	8003a20 <siprintf>
      setCursor(0,3);
 8002c2e:	2103      	movs	r1, #3
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff fd75 	bl	8002720 <setCursor>
      print(MSG_3);
 8002c36:	4816      	ldr	r0, [pc, #88]	; (8002c90 <main+0x200>)
 8002c38:	f7ff fdba 	bl	80027b0 <print>
       adc0 = MCP3008_Read_Channel(&spi_mpc3008, 0); // Channel 0
 8002c3c:	e74e      	b.n	8002adc <main+0x4c>
 8002c3e:	bf00      	nop
 8002c40:	40010800 	.word	0x40010800
 8002c44:	20000220 	.word	0x20000220
 8002c48:	20000278 	.word	0x20000278
 8002c4c:	40010c00 	.word	0x40010c00
 8002c50:	20000284 	.word	0x20000284
 8002c54:	20000286 	.word	0x20000286
 8002c58:	20000288 	.word	0x20000288
 8002c5c:	2000028a 	.word	0x2000028a
 8002c60:	200002dc 	.word	0x200002dc
 8002c64:	200002e0 	.word	0x200002e0
 8002c68:	200002e4 	.word	0x200002e4
 8002c6c:	200002e8 	.word	0x200002e8
 8002c70:	43480000 	.word	0x43480000
 8002c74:	08005f3c 	.word	0x08005f3c
 8002c78:	2000028c 	.word	0x2000028c
 8002c7c:	08005f50 	.word	0x08005f50
 8002c80:	200002a0 	.word	0x200002a0
 8002c84:	08005f64 	.word	0x08005f64
 8002c88:	200002b4 	.word	0x200002b4
 8002c8c:	08005f78 	.word	0x08005f78
 8002c90:	200002c8 	.word	0x200002c8

08002c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b090      	sub	sp, #64	; 0x40
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	2228      	movs	r2, #40	; 0x28
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fa54 	bl	8003150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
 8002cb4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc6:	f107 0318 	add.w	r3, r7, #24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fc38 	bl	8001540 <HAL_RCC_OscConfig>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002cd6:	f000 f883 	bl	8002de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cda:	230f      	movs	r3, #15
 8002cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fea6 	bl	8001a44 <HAL_RCC_ClockConfig>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002cfe:	f000 f86f 	bl	8002de0 <Error_Handler>
  }
}
 8002d02:	bf00      	nop
 8002d04:	3740      	adds	r7, #64	; 0x40
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d12:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <MX_SPI1_Init+0x68>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d36:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d58:	220a      	movs	r2, #10
 8002d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d5c:	4804      	ldr	r0, [pc, #16]	; (8002d70 <MX_SPI1_Init+0x64>)
 8002d5e:	f7fe ffd7 	bl	8001d10 <HAL_SPI_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d68:	f000 f83a 	bl	8002de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000220 	.word	0x20000220
 8002d74:	40013000 	.word	0x40013000

08002d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <MX_GPIO_Init+0x60>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <MX_GPIO_Init+0x60>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6193      	str	r3, [r2, #24]
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <MX_GPIO_Init+0x60>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002da4:	2200      	movs	r2, #0
 8002da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002daa:	480c      	ldr	r0, [pc, #48]	; (8002ddc <MX_GPIO_Init+0x64>)
 8002dac:	f7fe fbb0 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4804      	ldr	r0, [pc, #16]	; (8002ddc <MX_GPIO_Init+0x64>)
 8002dca:	f7fe fa25 	bl	8001218 <HAL_GPIO_Init>

}
 8002dce:	bf00      	nop
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010800 	.word	0x40010800

08002de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_MspInit+0x5c>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_MspInit+0x5c>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6193      	str	r3, [r2, #24]
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_MspInit+0x5c>)
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <HAL_MspInit+0x5c>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_MspInit+0x5c>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e14:	61d3      	str	r3, [r2, #28]
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_MspInit+0x5c>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	607b      	str	r3, [r7, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_MspInit+0x60>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <HAL_MspInit+0x60>)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010000 	.word	0x40010000

08002e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <HAL_SPI_MspInit+0x88>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d12f      	bne.n	8002ed0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	4a19      	ldr	r2, [pc, #100]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7a:	6193      	str	r3, [r2, #24]
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e8e:	f043 0304 	orr.w	r3, r3, #4
 8002e92:	6193      	str	r3, [r2, #24]
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_SPI_MspInit+0x8c>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ea0:	23a0      	movs	r3, #160	; 0xa0
 8002ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <HAL_SPI_MspInit+0x90>)
 8002eb4:	f7fe f9b0 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002eb8:	2340      	movs	r3, #64	; 0x40
 8002eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <HAL_SPI_MspInit+0x90>)
 8002ecc:	f7fe f9a4 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40013000 	.word	0x40013000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40010800 	.word	0x40010800

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <HardFault_Handler+0x4>

08002ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <MemManage_Handler+0x4>

08002efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <BusFault_Handler+0x4>

08002f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f06:	e7fe      	b.n	8002f06 <UsageFault_Handler+0x4>

08002f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f30:	f7fe f84e 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
	return 1;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <_kill>:

int _kill(int pid, int sig)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f50:	f000 f8d4 	bl	80030fc <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2216      	movs	r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
	return -1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <_exit>:

void _exit (int status)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffe7 	bl	8002f46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f78:	e7fe      	b.n	8002f78 <_exit+0x12>

08002f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	e00a      	b.n	8002fa2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f8c:	f3af 8000 	nop.w
 8002f90:	4601      	mov	r1, r0
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	60ba      	str	r2, [r7, #8]
 8002f98:	b2ca      	uxtb	r2, r1
 8002f9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	dbf0      	blt.n	8002f8c <_read+0x12>
	}

return len;
 8002faa:	687b      	ldr	r3, [r7, #4]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e009      	b.n	8002fda <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	60ba      	str	r2, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dbf1      	blt.n	8002fc6 <_write+0x12>
	}
	return len;
 8002fe2:	687b      	ldr	r3, [r7, #4]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <_close>:

int _close(int file)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003012:	605a      	str	r2, [r3, #4]
	return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <_isatty>:

int _isatty(int file)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	return 1;
 8003028:	2301      	movs	r3, #1
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
	return 0;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <_sbrk+0x50>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <_sbrk+0x16>
		heap_end = &end;
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <_sbrk+0x50>)
 800305e:	4a10      	ldr	r2, [pc, #64]	; (80030a0 <_sbrk+0x54>)
 8003060:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <_sbrk+0x50>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <_sbrk+0x50>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	466a      	mov	r2, sp
 8003072:	4293      	cmp	r3, r2
 8003074:	d907      	bls.n	8003086 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003076:	f000 f841 	bl	80030fc <__errno>
 800307a:	4603      	mov	r3, r0
 800307c:	220c      	movs	r2, #12
 800307e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e006      	b.n	8003094 <_sbrk+0x48>
	}

	heap_end += incr;
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <_sbrk+0x50>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <_sbrk+0x50>)
 8003090:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200002ec 	.word	0x200002ec
 80030a0:	20000300 	.word	0x20000300

080030a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030b2:	490d      	ldr	r1, [pc, #52]	; (80030e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030c8:	4c0a      	ldr	r4, [pc, #40]	; (80030f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030d6:	f7ff ffe5 	bl	80030a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030da:	f000 f815 	bl	8003108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030de:	f7ff fcd7 	bl	8002a90 <main>
  bx lr
 80030e2:	4770      	bx	lr
  ldr r0, =_sdata
 80030e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80030ec:	0800637c 	.word	0x0800637c
  ldr r2, =_sbss
 80030f0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80030f4:	20000300 	.word	0x20000300

080030f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f8:	e7fe      	b.n	80030f8 <ADC1_2_IRQHandler>
	...

080030fc <__errno>:
 80030fc:	4b01      	ldr	r3, [pc, #4]	; (8003104 <__errno+0x8>)
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c

08003108 <__libc_init_array>:
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	2600      	movs	r6, #0
 800310c:	4d0c      	ldr	r5, [pc, #48]	; (8003140 <__libc_init_array+0x38>)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <__libc_init_array+0x3c>)
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	42a6      	cmp	r6, r4
 8003116:	d109      	bne.n	800312c <__libc_init_array+0x24>
 8003118:	f002 fefa 	bl	8005f10 <_init>
 800311c:	2600      	movs	r6, #0
 800311e:	4d0a      	ldr	r5, [pc, #40]	; (8003148 <__libc_init_array+0x40>)
 8003120:	4c0a      	ldr	r4, [pc, #40]	; (800314c <__libc_init_array+0x44>)
 8003122:	1b64      	subs	r4, r4, r5
 8003124:	10a4      	asrs	r4, r4, #2
 8003126:	42a6      	cmp	r6, r4
 8003128:	d105      	bne.n	8003136 <__libc_init_array+0x2e>
 800312a:	bd70      	pop	{r4, r5, r6, pc}
 800312c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003130:	4798      	blx	r3
 8003132:	3601      	adds	r6, #1
 8003134:	e7ee      	b.n	8003114 <__libc_init_array+0xc>
 8003136:	f855 3b04 	ldr.w	r3, [r5], #4
 800313a:	4798      	blx	r3
 800313c:	3601      	adds	r6, #1
 800313e:	e7f2      	b.n	8003126 <__libc_init_array+0x1e>
 8003140:	08006374 	.word	0x08006374
 8003144:	08006374 	.word	0x08006374
 8003148:	08006374 	.word	0x08006374
 800314c:	08006378 	.word	0x08006378

08003150 <memset>:
 8003150:	4603      	mov	r3, r0
 8003152:	4402      	add	r2, r0
 8003154:	4293      	cmp	r3, r2
 8003156:	d100      	bne.n	800315a <memset+0xa>
 8003158:	4770      	bx	lr
 800315a:	f803 1b01 	strb.w	r1, [r3], #1
 800315e:	e7f9      	b.n	8003154 <memset+0x4>

08003160 <__cvt>:
 8003160:	2b00      	cmp	r3, #0
 8003162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003166:	461f      	mov	r7, r3
 8003168:	bfbb      	ittet	lt
 800316a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800316e:	461f      	movlt	r7, r3
 8003170:	2300      	movge	r3, #0
 8003172:	232d      	movlt	r3, #45	; 0x2d
 8003174:	b088      	sub	sp, #32
 8003176:	4614      	mov	r4, r2
 8003178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800317a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800317c:	7013      	strb	r3, [r2, #0]
 800317e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003180:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003184:	f023 0820 	bic.w	r8, r3, #32
 8003188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800318c:	d005      	beq.n	800319a <__cvt+0x3a>
 800318e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003192:	d100      	bne.n	8003196 <__cvt+0x36>
 8003194:	3501      	adds	r5, #1
 8003196:	2302      	movs	r3, #2
 8003198:	e000      	b.n	800319c <__cvt+0x3c>
 800319a:	2303      	movs	r3, #3
 800319c:	aa07      	add	r2, sp, #28
 800319e:	9204      	str	r2, [sp, #16]
 80031a0:	aa06      	add	r2, sp, #24
 80031a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031a6:	e9cd 3500 	strd	r3, r5, [sp]
 80031aa:	4622      	mov	r2, r4
 80031ac:	463b      	mov	r3, r7
 80031ae:	f000 fce3 	bl	8003b78 <_dtoa_r>
 80031b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031b6:	4606      	mov	r6, r0
 80031b8:	d102      	bne.n	80031c0 <__cvt+0x60>
 80031ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031bc:	07db      	lsls	r3, r3, #31
 80031be:	d522      	bpl.n	8003206 <__cvt+0xa6>
 80031c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031c4:	eb06 0905 	add.w	r9, r6, r5
 80031c8:	d110      	bne.n	80031ec <__cvt+0x8c>
 80031ca:	7833      	ldrb	r3, [r6, #0]
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d10a      	bne.n	80031e6 <__cvt+0x86>
 80031d0:	2200      	movs	r2, #0
 80031d2:	2300      	movs	r3, #0
 80031d4:	4620      	mov	r0, r4
 80031d6:	4639      	mov	r1, r7
 80031d8:	f7fd fbe6 	bl	80009a8 <__aeabi_dcmpeq>
 80031dc:	b918      	cbnz	r0, 80031e6 <__cvt+0x86>
 80031de:	f1c5 0501 	rsb	r5, r5, #1
 80031e2:	f8ca 5000 	str.w	r5, [sl]
 80031e6:	f8da 3000 	ldr.w	r3, [sl]
 80031ea:	4499      	add	r9, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	2300      	movs	r3, #0
 80031f0:	4620      	mov	r0, r4
 80031f2:	4639      	mov	r1, r7
 80031f4:	f7fd fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80031f8:	b108      	cbz	r0, 80031fe <__cvt+0x9e>
 80031fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80031fe:	2230      	movs	r2, #48	; 0x30
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	454b      	cmp	r3, r9
 8003204:	d307      	bcc.n	8003216 <__cvt+0xb6>
 8003206:	4630      	mov	r0, r6
 8003208:	9b07      	ldr	r3, [sp, #28]
 800320a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800320c:	1b9b      	subs	r3, r3, r6
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	b008      	add	sp, #32
 8003212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	9107      	str	r1, [sp, #28]
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e7f0      	b.n	8003200 <__cvt+0xa0>

0800321e <__exponent>:
 800321e:	4603      	mov	r3, r0
 8003220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003222:	2900      	cmp	r1, #0
 8003224:	f803 2b02 	strb.w	r2, [r3], #2
 8003228:	bfb6      	itet	lt
 800322a:	222d      	movlt	r2, #45	; 0x2d
 800322c:	222b      	movge	r2, #43	; 0x2b
 800322e:	4249      	neglt	r1, r1
 8003230:	2909      	cmp	r1, #9
 8003232:	7042      	strb	r2, [r0, #1]
 8003234:	dd2b      	ble.n	800328e <__exponent+0x70>
 8003236:	f10d 0407 	add.w	r4, sp, #7
 800323a:	46a4      	mov	ip, r4
 800323c:	270a      	movs	r7, #10
 800323e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003242:	460a      	mov	r2, r1
 8003244:	46a6      	mov	lr, r4
 8003246:	fb07 1516 	mls	r5, r7, r6, r1
 800324a:	2a63      	cmp	r2, #99	; 0x63
 800324c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003250:	4631      	mov	r1, r6
 8003252:	f104 34ff 	add.w	r4, r4, #4294967295
 8003256:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800325a:	dcf0      	bgt.n	800323e <__exponent+0x20>
 800325c:	3130      	adds	r1, #48	; 0x30
 800325e:	f1ae 0502 	sub.w	r5, lr, #2
 8003262:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003266:	4629      	mov	r1, r5
 8003268:	1c44      	adds	r4, r0, #1
 800326a:	4561      	cmp	r1, ip
 800326c:	d30a      	bcc.n	8003284 <__exponent+0x66>
 800326e:	f10d 0209 	add.w	r2, sp, #9
 8003272:	eba2 020e 	sub.w	r2, r2, lr
 8003276:	4565      	cmp	r5, ip
 8003278:	bf88      	it	hi
 800327a:	2200      	movhi	r2, #0
 800327c:	4413      	add	r3, r2
 800327e:	1a18      	subs	r0, r3, r0
 8003280:	b003      	add	sp, #12
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003284:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003288:	f804 2f01 	strb.w	r2, [r4, #1]!
 800328c:	e7ed      	b.n	800326a <__exponent+0x4c>
 800328e:	2330      	movs	r3, #48	; 0x30
 8003290:	3130      	adds	r1, #48	; 0x30
 8003292:	7083      	strb	r3, [r0, #2]
 8003294:	70c1      	strb	r1, [r0, #3]
 8003296:	1d03      	adds	r3, r0, #4
 8003298:	e7f1      	b.n	800327e <__exponent+0x60>
	...

0800329c <_printf_float>:
 800329c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a0:	b091      	sub	sp, #68	; 0x44
 80032a2:	460c      	mov	r4, r1
 80032a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80032a8:	4616      	mov	r6, r2
 80032aa:	461f      	mov	r7, r3
 80032ac:	4605      	mov	r5, r0
 80032ae:	f001 fa51 	bl	8004754 <_localeconv_r>
 80032b2:	6803      	ldr	r3, [r0, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	9309      	str	r3, [sp, #36]	; 0x24
 80032b8:	f7fc ff4a 	bl	8000150 <strlen>
 80032bc:	2300      	movs	r3, #0
 80032be:	930e      	str	r3, [sp, #56]	; 0x38
 80032c0:	f8d8 3000 	ldr.w	r3, [r8]
 80032c4:	900a      	str	r0, [sp, #40]	; 0x28
 80032c6:	3307      	adds	r3, #7
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	f103 0208 	add.w	r2, r3, #8
 80032d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80032d4:	f8d4 b000 	ldr.w	fp, [r4]
 80032d8:	f8c8 2000 	str.w	r2, [r8]
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032e4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80032e8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80032ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295
 80032f2:	4640      	mov	r0, r8
 80032f4:	4b9c      	ldr	r3, [pc, #624]	; (8003568 <_printf_float+0x2cc>)
 80032f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032f8:	f7fd fb88 	bl	8000a0c <__aeabi_dcmpun>
 80032fc:	bb70      	cbnz	r0, 800335c <_printf_float+0xc0>
 80032fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003302:	4640      	mov	r0, r8
 8003304:	4b98      	ldr	r3, [pc, #608]	; (8003568 <_printf_float+0x2cc>)
 8003306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003308:	f7fd fb62 	bl	80009d0 <__aeabi_dcmple>
 800330c:	bb30      	cbnz	r0, 800335c <_printf_float+0xc0>
 800330e:	2200      	movs	r2, #0
 8003310:	2300      	movs	r3, #0
 8003312:	4640      	mov	r0, r8
 8003314:	4651      	mov	r1, sl
 8003316:	f7fd fb51 	bl	80009bc <__aeabi_dcmplt>
 800331a:	b110      	cbz	r0, 8003322 <_printf_float+0x86>
 800331c:	232d      	movs	r3, #45	; 0x2d
 800331e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003322:	4b92      	ldr	r3, [pc, #584]	; (800356c <_printf_float+0x2d0>)
 8003324:	4892      	ldr	r0, [pc, #584]	; (8003570 <_printf_float+0x2d4>)
 8003326:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800332a:	bf94      	ite	ls
 800332c:	4698      	movls	r8, r3
 800332e:	4680      	movhi	r8, r0
 8003330:	2303      	movs	r3, #3
 8003332:	f04f 0a00 	mov.w	sl, #0
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	f02b 0304 	bic.w	r3, fp, #4
 800333c:	6023      	str	r3, [r4, #0]
 800333e:	4633      	mov	r3, r6
 8003340:	4621      	mov	r1, r4
 8003342:	4628      	mov	r0, r5
 8003344:	9700      	str	r7, [sp, #0]
 8003346:	aa0f      	add	r2, sp, #60	; 0x3c
 8003348:	f000 f9d4 	bl	80036f4 <_printf_common>
 800334c:	3001      	adds	r0, #1
 800334e:	f040 8090 	bne.w	8003472 <_printf_float+0x1d6>
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	b011      	add	sp, #68	; 0x44
 8003358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335c:	4642      	mov	r2, r8
 800335e:	4653      	mov	r3, sl
 8003360:	4640      	mov	r0, r8
 8003362:	4651      	mov	r1, sl
 8003364:	f7fd fb52 	bl	8000a0c <__aeabi_dcmpun>
 8003368:	b148      	cbz	r0, 800337e <_printf_float+0xe2>
 800336a:	f1ba 0f00 	cmp.w	sl, #0
 800336e:	bfb8      	it	lt
 8003370:	232d      	movlt	r3, #45	; 0x2d
 8003372:	4880      	ldr	r0, [pc, #512]	; (8003574 <_printf_float+0x2d8>)
 8003374:	bfb8      	it	lt
 8003376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800337a:	4b7f      	ldr	r3, [pc, #508]	; (8003578 <_printf_float+0x2dc>)
 800337c:	e7d3      	b.n	8003326 <_printf_float+0x8a>
 800337e:	6863      	ldr	r3, [r4, #4]
 8003380:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	d142      	bne.n	800340e <_printf_float+0x172>
 8003388:	2306      	movs	r3, #6
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	9206      	str	r2, [sp, #24]
 8003390:	aa0e      	add	r2, sp, #56	; 0x38
 8003392:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003396:	aa0d      	add	r2, sp, #52	; 0x34
 8003398:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800339c:	9203      	str	r2, [sp, #12]
 800339e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80033a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80033a6:	6023      	str	r3, [r4, #0]
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	4642      	mov	r2, r8
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4628      	mov	r0, r5
 80033b0:	4653      	mov	r3, sl
 80033b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80033b4:	f7ff fed4 	bl	8003160 <__cvt>
 80033b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033ba:	4680      	mov	r8, r0
 80033bc:	2947      	cmp	r1, #71	; 0x47
 80033be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033c0:	d108      	bne.n	80033d4 <_printf_float+0x138>
 80033c2:	1cc8      	adds	r0, r1, #3
 80033c4:	db02      	blt.n	80033cc <_printf_float+0x130>
 80033c6:	6863      	ldr	r3, [r4, #4]
 80033c8:	4299      	cmp	r1, r3
 80033ca:	dd40      	ble.n	800344e <_printf_float+0x1b2>
 80033cc:	f1a9 0902 	sub.w	r9, r9, #2
 80033d0:	fa5f f989 	uxtb.w	r9, r9
 80033d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033d8:	d81f      	bhi.n	800341a <_printf_float+0x17e>
 80033da:	464a      	mov	r2, r9
 80033dc:	3901      	subs	r1, #1
 80033de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033e2:	910d      	str	r1, [sp, #52]	; 0x34
 80033e4:	f7ff ff1b 	bl	800321e <__exponent>
 80033e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ea:	4682      	mov	sl, r0
 80033ec:	1813      	adds	r3, r2, r0
 80033ee:	2a01      	cmp	r2, #1
 80033f0:	6123      	str	r3, [r4, #16]
 80033f2:	dc02      	bgt.n	80033fa <_printf_float+0x15e>
 80033f4:	6822      	ldr	r2, [r4, #0]
 80033f6:	07d2      	lsls	r2, r2, #31
 80033f8:	d501      	bpl.n	80033fe <_printf_float+0x162>
 80033fa:	3301      	adds	r3, #1
 80033fc:	6123      	str	r3, [r4, #16]
 80033fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003402:	2b00      	cmp	r3, #0
 8003404:	d09b      	beq.n	800333e <_printf_float+0xa2>
 8003406:	232d      	movs	r3, #45	; 0x2d
 8003408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800340c:	e797      	b.n	800333e <_printf_float+0xa2>
 800340e:	2947      	cmp	r1, #71	; 0x47
 8003410:	d1bc      	bne.n	800338c <_printf_float+0xf0>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ba      	bne.n	800338c <_printf_float+0xf0>
 8003416:	2301      	movs	r3, #1
 8003418:	e7b7      	b.n	800338a <_printf_float+0xee>
 800341a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800341e:	d118      	bne.n	8003452 <_printf_float+0x1b6>
 8003420:	2900      	cmp	r1, #0
 8003422:	6863      	ldr	r3, [r4, #4]
 8003424:	dd0b      	ble.n	800343e <_printf_float+0x1a2>
 8003426:	6121      	str	r1, [r4, #16]
 8003428:	b913      	cbnz	r3, 8003430 <_printf_float+0x194>
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	07d0      	lsls	r0, r2, #31
 800342e:	d502      	bpl.n	8003436 <_printf_float+0x19a>
 8003430:	3301      	adds	r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	6123      	str	r3, [r4, #16]
 8003436:	f04f 0a00 	mov.w	sl, #0
 800343a:	65a1      	str	r1, [r4, #88]	; 0x58
 800343c:	e7df      	b.n	80033fe <_printf_float+0x162>
 800343e:	b913      	cbnz	r3, 8003446 <_printf_float+0x1aa>
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	07d2      	lsls	r2, r2, #31
 8003444:	d501      	bpl.n	800344a <_printf_float+0x1ae>
 8003446:	3302      	adds	r3, #2
 8003448:	e7f4      	b.n	8003434 <_printf_float+0x198>
 800344a:	2301      	movs	r3, #1
 800344c:	e7f2      	b.n	8003434 <_printf_float+0x198>
 800344e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003454:	4299      	cmp	r1, r3
 8003456:	db05      	blt.n	8003464 <_printf_float+0x1c8>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	6121      	str	r1, [r4, #16]
 800345c:	07d8      	lsls	r0, r3, #31
 800345e:	d5ea      	bpl.n	8003436 <_printf_float+0x19a>
 8003460:	1c4b      	adds	r3, r1, #1
 8003462:	e7e7      	b.n	8003434 <_printf_float+0x198>
 8003464:	2900      	cmp	r1, #0
 8003466:	bfcc      	ite	gt
 8003468:	2201      	movgt	r2, #1
 800346a:	f1c1 0202 	rsble	r2, r1, #2
 800346e:	4413      	add	r3, r2
 8003470:	e7e0      	b.n	8003434 <_printf_float+0x198>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	055a      	lsls	r2, r3, #21
 8003476:	d407      	bmi.n	8003488 <_printf_float+0x1ec>
 8003478:	6923      	ldr	r3, [r4, #16]
 800347a:	4642      	mov	r2, r8
 800347c:	4631      	mov	r1, r6
 800347e:	4628      	mov	r0, r5
 8003480:	47b8      	blx	r7
 8003482:	3001      	adds	r0, #1
 8003484:	d12b      	bne.n	80034de <_printf_float+0x242>
 8003486:	e764      	b.n	8003352 <_printf_float+0xb6>
 8003488:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800348c:	f240 80dd 	bls.w	800364a <_printf_float+0x3ae>
 8003490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003494:	2200      	movs	r2, #0
 8003496:	2300      	movs	r3, #0
 8003498:	f7fd fa86 	bl	80009a8 <__aeabi_dcmpeq>
 800349c:	2800      	cmp	r0, #0
 800349e:	d033      	beq.n	8003508 <_printf_float+0x26c>
 80034a0:	2301      	movs	r3, #1
 80034a2:	4631      	mov	r1, r6
 80034a4:	4628      	mov	r0, r5
 80034a6:	4a35      	ldr	r2, [pc, #212]	; (800357c <_printf_float+0x2e0>)
 80034a8:	47b8      	blx	r7
 80034aa:	3001      	adds	r0, #1
 80034ac:	f43f af51 	beq.w	8003352 <_printf_float+0xb6>
 80034b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034b4:	429a      	cmp	r2, r3
 80034b6:	db02      	blt.n	80034be <_printf_float+0x222>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	07d8      	lsls	r0, r3, #31
 80034bc:	d50f      	bpl.n	80034de <_printf_float+0x242>
 80034be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034c2:	4631      	mov	r1, r6
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b8      	blx	r7
 80034c8:	3001      	adds	r0, #1
 80034ca:	f43f af42 	beq.w	8003352 <_printf_float+0xb6>
 80034ce:	f04f 0800 	mov.w	r8, #0
 80034d2:	f104 091a 	add.w	r9, r4, #26
 80034d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034d8:	3b01      	subs	r3, #1
 80034da:	4543      	cmp	r3, r8
 80034dc:	dc09      	bgt.n	80034f2 <_printf_float+0x256>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	079b      	lsls	r3, r3, #30
 80034e2:	f100 8102 	bmi.w	80036ea <_printf_float+0x44e>
 80034e6:	68e0      	ldr	r0, [r4, #12]
 80034e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034ea:	4298      	cmp	r0, r3
 80034ec:	bfb8      	it	lt
 80034ee:	4618      	movlt	r0, r3
 80034f0:	e731      	b.n	8003356 <_printf_float+0xba>
 80034f2:	2301      	movs	r3, #1
 80034f4:	464a      	mov	r2, r9
 80034f6:	4631      	mov	r1, r6
 80034f8:	4628      	mov	r0, r5
 80034fa:	47b8      	blx	r7
 80034fc:	3001      	adds	r0, #1
 80034fe:	f43f af28 	beq.w	8003352 <_printf_float+0xb6>
 8003502:	f108 0801 	add.w	r8, r8, #1
 8003506:	e7e6      	b.n	80034d6 <_printf_float+0x23a>
 8003508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800350a:	2b00      	cmp	r3, #0
 800350c:	dc38      	bgt.n	8003580 <_printf_float+0x2e4>
 800350e:	2301      	movs	r3, #1
 8003510:	4631      	mov	r1, r6
 8003512:	4628      	mov	r0, r5
 8003514:	4a19      	ldr	r2, [pc, #100]	; (800357c <_printf_float+0x2e0>)
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	f43f af1a 	beq.w	8003352 <_printf_float+0xb6>
 800351e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003522:	4313      	orrs	r3, r2
 8003524:	d102      	bne.n	800352c <_printf_float+0x290>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	07d9      	lsls	r1, r3, #31
 800352a:	d5d8      	bpl.n	80034de <_printf_float+0x242>
 800352c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003530:	4631      	mov	r1, r6
 8003532:	4628      	mov	r0, r5
 8003534:	47b8      	blx	r7
 8003536:	3001      	adds	r0, #1
 8003538:	f43f af0b 	beq.w	8003352 <_printf_float+0xb6>
 800353c:	f04f 0900 	mov.w	r9, #0
 8003540:	f104 0a1a 	add.w	sl, r4, #26
 8003544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003546:	425b      	negs	r3, r3
 8003548:	454b      	cmp	r3, r9
 800354a:	dc01      	bgt.n	8003550 <_printf_float+0x2b4>
 800354c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800354e:	e794      	b.n	800347a <_printf_float+0x1de>
 8003550:	2301      	movs	r3, #1
 8003552:	4652      	mov	r2, sl
 8003554:	4631      	mov	r1, r6
 8003556:	4628      	mov	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	f43f aef9 	beq.w	8003352 <_printf_float+0xb6>
 8003560:	f109 0901 	add.w	r9, r9, #1
 8003564:	e7ee      	b.n	8003544 <_printf_float+0x2a8>
 8003566:	bf00      	nop
 8003568:	7fefffff 	.word	0x7fefffff
 800356c:	08005fa0 	.word	0x08005fa0
 8003570:	08005fa4 	.word	0x08005fa4
 8003574:	08005fac 	.word	0x08005fac
 8003578:	08005fa8 	.word	0x08005fa8
 800357c:	08005fb0 	.word	0x08005fb0
 8003580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003584:	429a      	cmp	r2, r3
 8003586:	bfa8      	it	ge
 8003588:	461a      	movge	r2, r3
 800358a:	2a00      	cmp	r2, #0
 800358c:	4691      	mov	r9, r2
 800358e:	dc37      	bgt.n	8003600 <_printf_float+0x364>
 8003590:	f04f 0b00 	mov.w	fp, #0
 8003594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003598:	f104 021a 	add.w	r2, r4, #26
 800359c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80035a0:	ebaa 0309 	sub.w	r3, sl, r9
 80035a4:	455b      	cmp	r3, fp
 80035a6:	dc33      	bgt.n	8003610 <_printf_float+0x374>
 80035a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035ac:	429a      	cmp	r2, r3
 80035ae:	db3b      	blt.n	8003628 <_printf_float+0x38c>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	07da      	lsls	r2, r3, #31
 80035b4:	d438      	bmi.n	8003628 <_printf_float+0x38c>
 80035b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ba:	eba3 020a 	sub.w	r2, r3, sl
 80035be:	eba3 0901 	sub.w	r9, r3, r1
 80035c2:	4591      	cmp	r9, r2
 80035c4:	bfa8      	it	ge
 80035c6:	4691      	movge	r9, r2
 80035c8:	f1b9 0f00 	cmp.w	r9, #0
 80035cc:	dc34      	bgt.n	8003638 <_printf_float+0x39c>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035d6:	f104 0a1a 	add.w	sl, r4, #26
 80035da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	eba3 0309 	sub.w	r3, r3, r9
 80035e4:	4543      	cmp	r3, r8
 80035e6:	f77f af7a 	ble.w	80034de <_printf_float+0x242>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4652      	mov	r2, sl
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b8      	blx	r7
 80035f4:	3001      	adds	r0, #1
 80035f6:	f43f aeac 	beq.w	8003352 <_printf_float+0xb6>
 80035fa:	f108 0801 	add.w	r8, r8, #1
 80035fe:	e7ec      	b.n	80035da <_printf_float+0x33e>
 8003600:	4613      	mov	r3, r2
 8003602:	4631      	mov	r1, r6
 8003604:	4642      	mov	r2, r8
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	d1c0      	bne.n	8003590 <_printf_float+0x2f4>
 800360e:	e6a0      	b.n	8003352 <_printf_float+0xb6>
 8003610:	2301      	movs	r3, #1
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	920b      	str	r2, [sp, #44]	; 0x2c
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f ae99 	beq.w	8003352 <_printf_float+0xb6>
 8003620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003622:	f10b 0b01 	add.w	fp, fp, #1
 8003626:	e7b9      	b.n	800359c <_printf_float+0x300>
 8003628:	4631      	mov	r1, r6
 800362a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	d1bf      	bne.n	80035b6 <_printf_float+0x31a>
 8003636:	e68c      	b.n	8003352 <_printf_float+0xb6>
 8003638:	464b      	mov	r3, r9
 800363a:	4631      	mov	r1, r6
 800363c:	4628      	mov	r0, r5
 800363e:	eb08 020a 	add.w	r2, r8, sl
 8003642:	47b8      	blx	r7
 8003644:	3001      	adds	r0, #1
 8003646:	d1c2      	bne.n	80035ce <_printf_float+0x332>
 8003648:	e683      	b.n	8003352 <_printf_float+0xb6>
 800364a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800364c:	2a01      	cmp	r2, #1
 800364e:	dc01      	bgt.n	8003654 <_printf_float+0x3b8>
 8003650:	07db      	lsls	r3, r3, #31
 8003652:	d537      	bpl.n	80036c4 <_printf_float+0x428>
 8003654:	2301      	movs	r3, #1
 8003656:	4642      	mov	r2, r8
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f ae77 	beq.w	8003352 <_printf_float+0xb6>
 8003664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003668:	4631      	mov	r1, r6
 800366a:	4628      	mov	r0, r5
 800366c:	47b8      	blx	r7
 800366e:	3001      	adds	r0, #1
 8003670:	f43f ae6f 	beq.w	8003352 <_printf_float+0xb6>
 8003674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003678:	2200      	movs	r2, #0
 800367a:	2300      	movs	r3, #0
 800367c:	f7fd f994 	bl	80009a8 <__aeabi_dcmpeq>
 8003680:	b9d8      	cbnz	r0, 80036ba <_printf_float+0x41e>
 8003682:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003684:	f108 0201 	add.w	r2, r8, #1
 8003688:	3b01      	subs	r3, #1
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	d10e      	bne.n	80036b2 <_printf_float+0x416>
 8003694:	e65d      	b.n	8003352 <_printf_float+0xb6>
 8003696:	2301      	movs	r3, #1
 8003698:	464a      	mov	r2, r9
 800369a:	4631      	mov	r1, r6
 800369c:	4628      	mov	r0, r5
 800369e:	47b8      	blx	r7
 80036a0:	3001      	adds	r0, #1
 80036a2:	f43f ae56 	beq.w	8003352 <_printf_float+0xb6>
 80036a6:	f108 0801 	add.w	r8, r8, #1
 80036aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036ac:	3b01      	subs	r3, #1
 80036ae:	4543      	cmp	r3, r8
 80036b0:	dcf1      	bgt.n	8003696 <_printf_float+0x3fa>
 80036b2:	4653      	mov	r3, sl
 80036b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036b8:	e6e0      	b.n	800347c <_printf_float+0x1e0>
 80036ba:	f04f 0800 	mov.w	r8, #0
 80036be:	f104 091a 	add.w	r9, r4, #26
 80036c2:	e7f2      	b.n	80036aa <_printf_float+0x40e>
 80036c4:	2301      	movs	r3, #1
 80036c6:	4642      	mov	r2, r8
 80036c8:	e7df      	b.n	800368a <_printf_float+0x3ee>
 80036ca:	2301      	movs	r3, #1
 80036cc:	464a      	mov	r2, r9
 80036ce:	4631      	mov	r1, r6
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	f43f ae3c 	beq.w	8003352 <_printf_float+0xb6>
 80036da:	f108 0801 	add.w	r8, r8, #1
 80036de:	68e3      	ldr	r3, [r4, #12]
 80036e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80036e2:	1a5b      	subs	r3, r3, r1
 80036e4:	4543      	cmp	r3, r8
 80036e6:	dcf0      	bgt.n	80036ca <_printf_float+0x42e>
 80036e8:	e6fd      	b.n	80034e6 <_printf_float+0x24a>
 80036ea:	f04f 0800 	mov.w	r8, #0
 80036ee:	f104 0919 	add.w	r9, r4, #25
 80036f2:	e7f4      	b.n	80036de <_printf_float+0x442>

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4616      	mov	r6, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4607      	mov	r7, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003714:	b10a      	cbz	r2, 800371a <_printf_common+0x26>
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	6833      	ldrmi	r3, [r6, #0]
 8003722:	3302      	addmi	r3, #2
 8003724:	6033      	strmi	r3, [r6, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	f015 0506 	ands.w	r5, r5, #6
 800372c:	d106      	bne.n	800373c <_printf_common+0x48>
 800372e:	f104 0a19 	add.w	sl, r4, #25
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	6832      	ldr	r2, [r6, #0]
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	42ab      	cmp	r3, r5
 800373a:	dc28      	bgt.n	800378e <_printf_common+0x9a>
 800373c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003740:	1e13      	subs	r3, r2, #0
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	bf18      	it	ne
 8003746:	2301      	movne	r3, #1
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d42d      	bmi.n	80037a8 <_printf_common+0xb4>
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003754:	47c0      	blx	r8
 8003756:	3001      	adds	r0, #1
 8003758:	d020      	beq.n	800379c <_printf_common+0xa8>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	68e5      	ldr	r5, [r4, #12]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf18      	it	ne
 8003766:	2500      	movne	r5, #0
 8003768:	6832      	ldr	r2, [r6, #0]
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	bf08      	it	eq
 8003772:	1aad      	subeq	r5, r5, r2
 8003774:	6922      	ldr	r2, [r4, #16]
 8003776:	bf08      	it	eq
 8003778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800377c:	4293      	cmp	r3, r2
 800377e:	bfc4      	itt	gt
 8003780:	1a9b      	subgt	r3, r3, r2
 8003782:	18ed      	addgt	r5, r5, r3
 8003784:	341a      	adds	r4, #26
 8003786:	42b5      	cmp	r5, r6
 8003788:	d11a      	bne.n	80037c0 <_printf_common+0xcc>
 800378a:	2000      	movs	r0, #0
 800378c:	e008      	b.n	80037a0 <_printf_common+0xac>
 800378e:	2301      	movs	r3, #1
 8003790:	4652      	mov	r2, sl
 8003792:	4649      	mov	r1, r9
 8003794:	4638      	mov	r0, r7
 8003796:	47c0      	blx	r8
 8003798:	3001      	adds	r0, #1
 800379a:	d103      	bne.n	80037a4 <_printf_common+0xb0>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a4:	3501      	adds	r5, #1
 80037a6:	e7c4      	b.n	8003732 <_printf_common+0x3e>
 80037a8:	2030      	movs	r0, #48	; 0x30
 80037aa:	18e1      	adds	r1, r4, r3
 80037ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037b6:	4422      	add	r2, r4
 80037b8:	3302      	adds	r3, #2
 80037ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037be:	e7c5      	b.n	800374c <_printf_common+0x58>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4622      	mov	r2, r4
 80037c4:	4649      	mov	r1, r9
 80037c6:	4638      	mov	r0, r7
 80037c8:	47c0      	blx	r8
 80037ca:	3001      	adds	r0, #1
 80037cc:	d0e6      	beq.n	800379c <_printf_common+0xa8>
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7d9      	b.n	8003786 <_printf_common+0x92>
	...

080037d4 <_printf_i>:
 80037d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	7e0f      	ldrb	r7, [r1, #24]
 80037da:	4691      	mov	r9, r2
 80037dc:	2f78      	cmp	r7, #120	; 0x78
 80037de:	4680      	mov	r8, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	469a      	mov	sl, r3
 80037e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037ea:	d807      	bhi.n	80037fc <_printf_i+0x28>
 80037ec:	2f62      	cmp	r7, #98	; 0x62
 80037ee:	d80a      	bhi.n	8003806 <_printf_i+0x32>
 80037f0:	2f00      	cmp	r7, #0
 80037f2:	f000 80d9 	beq.w	80039a8 <_printf_i+0x1d4>
 80037f6:	2f58      	cmp	r7, #88	; 0x58
 80037f8:	f000 80a4 	beq.w	8003944 <_printf_i+0x170>
 80037fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003804:	e03a      	b.n	800387c <_printf_i+0xa8>
 8003806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380a:	2b15      	cmp	r3, #21
 800380c:	d8f6      	bhi.n	80037fc <_printf_i+0x28>
 800380e:	a101      	add	r1, pc, #4	; (adr r1, 8003814 <_printf_i+0x40>)
 8003810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003814:	0800386d 	.word	0x0800386d
 8003818:	08003881 	.word	0x08003881
 800381c:	080037fd 	.word	0x080037fd
 8003820:	080037fd 	.word	0x080037fd
 8003824:	080037fd 	.word	0x080037fd
 8003828:	080037fd 	.word	0x080037fd
 800382c:	08003881 	.word	0x08003881
 8003830:	080037fd 	.word	0x080037fd
 8003834:	080037fd 	.word	0x080037fd
 8003838:	080037fd 	.word	0x080037fd
 800383c:	080037fd 	.word	0x080037fd
 8003840:	0800398f 	.word	0x0800398f
 8003844:	080038b1 	.word	0x080038b1
 8003848:	08003971 	.word	0x08003971
 800384c:	080037fd 	.word	0x080037fd
 8003850:	080037fd 	.word	0x080037fd
 8003854:	080039b1 	.word	0x080039b1
 8003858:	080037fd 	.word	0x080037fd
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080037fd 	.word	0x080037fd
 8003864:	080037fd 	.word	0x080037fd
 8003868:	08003979 	.word	0x08003979
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	602a      	str	r2, [r5, #0]
 8003874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e0a4      	b.n	80039ca <_printf_i+0x1f6>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	6829      	ldr	r1, [r5, #0]
 8003884:	0606      	lsls	r6, r0, #24
 8003886:	f101 0304 	add.w	r3, r1, #4
 800388a:	d50a      	bpl.n	80038a2 <_printf_i+0xce>
 800388c:	680e      	ldr	r6, [r1, #0]
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	2e00      	cmp	r6, #0
 8003892:	da03      	bge.n	800389c <_printf_i+0xc8>
 8003894:	232d      	movs	r3, #45	; 0x2d
 8003896:	4276      	negs	r6, r6
 8003898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800389c:	230a      	movs	r3, #10
 800389e:	485e      	ldr	r0, [pc, #376]	; (8003a18 <_printf_i+0x244>)
 80038a0:	e019      	b.n	80038d6 <_printf_i+0x102>
 80038a2:	680e      	ldr	r6, [r1, #0]
 80038a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038a8:	602b      	str	r3, [r5, #0]
 80038aa:	bf18      	it	ne
 80038ac:	b236      	sxthne	r6, r6
 80038ae:	e7ef      	b.n	8003890 <_printf_i+0xbc>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	1d19      	adds	r1, r3, #4
 80038b6:	6029      	str	r1, [r5, #0]
 80038b8:	0601      	lsls	r1, r0, #24
 80038ba:	d501      	bpl.n	80038c0 <_printf_i+0xec>
 80038bc:	681e      	ldr	r6, [r3, #0]
 80038be:	e002      	b.n	80038c6 <_printf_i+0xf2>
 80038c0:	0646      	lsls	r6, r0, #25
 80038c2:	d5fb      	bpl.n	80038bc <_printf_i+0xe8>
 80038c4:	881e      	ldrh	r6, [r3, #0]
 80038c6:	2f6f      	cmp	r7, #111	; 0x6f
 80038c8:	bf0c      	ite	eq
 80038ca:	2308      	moveq	r3, #8
 80038cc:	230a      	movne	r3, #10
 80038ce:	4852      	ldr	r0, [pc, #328]	; (8003a18 <_printf_i+0x244>)
 80038d0:	2100      	movs	r1, #0
 80038d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038d6:	6865      	ldr	r5, [r4, #4]
 80038d8:	2d00      	cmp	r5, #0
 80038da:	bfa8      	it	ge
 80038dc:	6821      	ldrge	r1, [r4, #0]
 80038de:	60a5      	str	r5, [r4, #8]
 80038e0:	bfa4      	itt	ge
 80038e2:	f021 0104 	bicge.w	r1, r1, #4
 80038e6:	6021      	strge	r1, [r4, #0]
 80038e8:	b90e      	cbnz	r6, 80038ee <_printf_i+0x11a>
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d04d      	beq.n	800398a <_printf_i+0x1b6>
 80038ee:	4615      	mov	r5, r2
 80038f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80038f4:	fb03 6711 	mls	r7, r3, r1, r6
 80038f8:	5dc7      	ldrb	r7, [r0, r7]
 80038fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038fe:	4637      	mov	r7, r6
 8003900:	42bb      	cmp	r3, r7
 8003902:	460e      	mov	r6, r1
 8003904:	d9f4      	bls.n	80038f0 <_printf_i+0x11c>
 8003906:	2b08      	cmp	r3, #8
 8003908:	d10b      	bne.n	8003922 <_printf_i+0x14e>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	07de      	lsls	r6, r3, #31
 800390e:	d508      	bpl.n	8003922 <_printf_i+0x14e>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	6861      	ldr	r1, [r4, #4]
 8003914:	4299      	cmp	r1, r3
 8003916:	bfde      	ittt	le
 8003918:	2330      	movle	r3, #48	; 0x30
 800391a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800391e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003922:	1b52      	subs	r2, r2, r5
 8003924:	6122      	str	r2, [r4, #16]
 8003926:	464b      	mov	r3, r9
 8003928:	4621      	mov	r1, r4
 800392a:	4640      	mov	r0, r8
 800392c:	f8cd a000 	str.w	sl, [sp]
 8003930:	aa03      	add	r2, sp, #12
 8003932:	f7ff fedf 	bl	80036f4 <_printf_common>
 8003936:	3001      	adds	r0, #1
 8003938:	d14c      	bne.n	80039d4 <_printf_i+0x200>
 800393a:	f04f 30ff 	mov.w	r0, #4294967295
 800393e:	b004      	add	sp, #16
 8003940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003944:	4834      	ldr	r0, [pc, #208]	; (8003a18 <_printf_i+0x244>)
 8003946:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800394a:	6829      	ldr	r1, [r5, #0]
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003952:	6029      	str	r1, [r5, #0]
 8003954:	061d      	lsls	r5, r3, #24
 8003956:	d514      	bpl.n	8003982 <_printf_i+0x1ae>
 8003958:	07df      	lsls	r7, r3, #31
 800395a:	bf44      	itt	mi
 800395c:	f043 0320 	orrmi.w	r3, r3, #32
 8003960:	6023      	strmi	r3, [r4, #0]
 8003962:	b91e      	cbnz	r6, 800396c <_printf_i+0x198>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	f023 0320 	bic.w	r3, r3, #32
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	2310      	movs	r3, #16
 800396e:	e7af      	b.n	80038d0 <_printf_i+0xfc>
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	f043 0320 	orr.w	r3, r3, #32
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	2378      	movs	r3, #120	; 0x78
 800397a:	4828      	ldr	r0, [pc, #160]	; (8003a1c <_printf_i+0x248>)
 800397c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003980:	e7e3      	b.n	800394a <_printf_i+0x176>
 8003982:	0659      	lsls	r1, r3, #25
 8003984:	bf48      	it	mi
 8003986:	b2b6      	uxthmi	r6, r6
 8003988:	e7e6      	b.n	8003958 <_printf_i+0x184>
 800398a:	4615      	mov	r5, r2
 800398c:	e7bb      	b.n	8003906 <_printf_i+0x132>
 800398e:	682b      	ldr	r3, [r5, #0]
 8003990:	6826      	ldr	r6, [r4, #0]
 8003992:	1d18      	adds	r0, r3, #4
 8003994:	6961      	ldr	r1, [r4, #20]
 8003996:	6028      	str	r0, [r5, #0]
 8003998:	0635      	lsls	r5, r6, #24
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	d501      	bpl.n	80039a2 <_printf_i+0x1ce>
 800399e:	6019      	str	r1, [r3, #0]
 80039a0:	e002      	b.n	80039a8 <_printf_i+0x1d4>
 80039a2:	0670      	lsls	r0, r6, #25
 80039a4:	d5fb      	bpl.n	800399e <_printf_i+0x1ca>
 80039a6:	8019      	strh	r1, [r3, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	4615      	mov	r5, r2
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	e7ba      	b.n	8003926 <_printf_i+0x152>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	2100      	movs	r1, #0
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	602a      	str	r2, [r5, #0]
 80039b8:	681d      	ldr	r5, [r3, #0]
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	4628      	mov	r0, r5
 80039be:	f000 fed5 	bl	800476c <memchr>
 80039c2:	b108      	cbz	r0, 80039c8 <_printf_i+0x1f4>
 80039c4:	1b40      	subs	r0, r0, r5
 80039c6:	6060      	str	r0, [r4, #4]
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	6123      	str	r3, [r4, #16]
 80039cc:	2300      	movs	r3, #0
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d2:	e7a8      	b.n	8003926 <_printf_i+0x152>
 80039d4:	462a      	mov	r2, r5
 80039d6:	4649      	mov	r1, r9
 80039d8:	4640      	mov	r0, r8
 80039da:	6923      	ldr	r3, [r4, #16]
 80039dc:	47d0      	blx	sl
 80039de:	3001      	adds	r0, #1
 80039e0:	d0ab      	beq.n	800393a <_printf_i+0x166>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	079b      	lsls	r3, r3, #30
 80039e6:	d413      	bmi.n	8003a10 <_printf_i+0x23c>
 80039e8:	68e0      	ldr	r0, [r4, #12]
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	4298      	cmp	r0, r3
 80039ee:	bfb8      	it	lt
 80039f0:	4618      	movlt	r0, r3
 80039f2:	e7a4      	b.n	800393e <_printf_i+0x16a>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4632      	mov	r2, r6
 80039f8:	4649      	mov	r1, r9
 80039fa:	4640      	mov	r0, r8
 80039fc:	47d0      	blx	sl
 80039fe:	3001      	adds	r0, #1
 8003a00:	d09b      	beq.n	800393a <_printf_i+0x166>
 8003a02:	3501      	adds	r5, #1
 8003a04:	68e3      	ldr	r3, [r4, #12]
 8003a06:	9903      	ldr	r1, [sp, #12]
 8003a08:	1a5b      	subs	r3, r3, r1
 8003a0a:	42ab      	cmp	r3, r5
 8003a0c:	dcf2      	bgt.n	80039f4 <_printf_i+0x220>
 8003a0e:	e7eb      	b.n	80039e8 <_printf_i+0x214>
 8003a10:	2500      	movs	r5, #0
 8003a12:	f104 0619 	add.w	r6, r4, #25
 8003a16:	e7f5      	b.n	8003a04 <_printf_i+0x230>
 8003a18:	08005fb2 	.word	0x08005fb2
 8003a1c:	08005fc3 	.word	0x08005fc3

08003a20 <siprintf>:
 8003a20:	b40e      	push	{r1, r2, r3}
 8003a22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a26:	b500      	push	{lr}
 8003a28:	b09c      	sub	sp, #112	; 0x70
 8003a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003a2c:	9002      	str	r0, [sp, #8]
 8003a2e:	9006      	str	r0, [sp, #24]
 8003a30:	9107      	str	r1, [sp, #28]
 8003a32:	9104      	str	r1, [sp, #16]
 8003a34:	4808      	ldr	r0, [pc, #32]	; (8003a58 <siprintf+0x38>)
 8003a36:	4909      	ldr	r1, [pc, #36]	; (8003a5c <siprintf+0x3c>)
 8003a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a3c:	9105      	str	r1, [sp, #20]
 8003a3e:	6800      	ldr	r0, [r0, #0]
 8003a40:	a902      	add	r1, sp, #8
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	f001 fb7c 	bl	8005140 <_svfiprintf_r>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	9b02      	ldr	r3, [sp, #8]
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	b01c      	add	sp, #112	; 0x70
 8003a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a54:	b003      	add	sp, #12
 8003a56:	4770      	bx	lr
 8003a58:	2000000c 	.word	0x2000000c
 8003a5c:	ffff0208 	.word	0xffff0208

08003a60 <quorem>:
 8003a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a64:	6903      	ldr	r3, [r0, #16]
 8003a66:	690c      	ldr	r4, [r1, #16]
 8003a68:	4607      	mov	r7, r0
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	f2c0 8082 	blt.w	8003b74 <quorem+0x114>
 8003a70:	3c01      	subs	r4, #1
 8003a72:	f100 0514 	add.w	r5, r0, #20
 8003a76:	f101 0814 	add.w	r8, r1, #20
 8003a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a98:	d331      	bcc.n	8003afe <quorem+0x9e>
 8003a9a:	f04f 0e00 	mov.w	lr, #0
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	46ac      	mov	ip, r5
 8003aa2:	46f2      	mov	sl, lr
 8003aa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8003aa8:	b293      	uxth	r3, r2
 8003aaa:	fb06 e303 	mla	r3, r6, r3, lr
 8003aae:	0c12      	lsrs	r2, r2, #16
 8003ab0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	fb06 e202 	mla	r2, r6, r2, lr
 8003aba:	ebaa 0303 	sub.w	r3, sl, r3
 8003abe:	f8dc a000 	ldr.w	sl, [ip]
 8003ac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ac6:	fa1f fa8a 	uxth.w	sl, sl
 8003aca:	4453      	add	r3, sl
 8003acc:	f8dc a000 	ldr.w	sl, [ip]
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003ad6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae0:	4581      	cmp	r9, r0
 8003ae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ae6:	f84c 3b04 	str.w	r3, [ip], #4
 8003aea:	d2db      	bcs.n	8003aa4 <quorem+0x44>
 8003aec:	f855 300b 	ldr.w	r3, [r5, fp]
 8003af0:	b92b      	cbnz	r3, 8003afe <quorem+0x9e>
 8003af2:	9b01      	ldr	r3, [sp, #4]
 8003af4:	3b04      	subs	r3, #4
 8003af6:	429d      	cmp	r5, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	d32f      	bcc.n	8003b5c <quorem+0xfc>
 8003afc:	613c      	str	r4, [r7, #16]
 8003afe:	4638      	mov	r0, r7
 8003b00:	f001 f8ce 	bl	8004ca0 <__mcmp>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	db25      	blt.n	8003b54 <quorem+0xf4>
 8003b08:	4628      	mov	r0, r5
 8003b0a:	f04f 0c00 	mov.w	ip, #0
 8003b0e:	3601      	adds	r6, #1
 8003b10:	f858 1b04 	ldr.w	r1, [r8], #4
 8003b14:	f8d0 e000 	ldr.w	lr, [r0]
 8003b18:	b28b      	uxth	r3, r1
 8003b1a:	ebac 0303 	sub.w	r3, ip, r3
 8003b1e:	fa1f f28e 	uxth.w	r2, lr
 8003b22:	4413      	add	r3, r2
 8003b24:	0c0a      	lsrs	r2, r1, #16
 8003b26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b34:	45c1      	cmp	r9, r8
 8003b36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b3a:	f840 3b04 	str.w	r3, [r0], #4
 8003b3e:	d2e7      	bcs.n	8003b10 <quorem+0xb0>
 8003b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b48:	b922      	cbnz	r2, 8003b54 <quorem+0xf4>
 8003b4a:	3b04      	subs	r3, #4
 8003b4c:	429d      	cmp	r5, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	d30a      	bcc.n	8003b68 <quorem+0x108>
 8003b52:	613c      	str	r4, [r7, #16]
 8003b54:	4630      	mov	r0, r6
 8003b56:	b003      	add	sp, #12
 8003b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	3b04      	subs	r3, #4
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d1cb      	bne.n	8003afc <quorem+0x9c>
 8003b64:	3c01      	subs	r4, #1
 8003b66:	e7c6      	b.n	8003af6 <quorem+0x96>
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	d1f0      	bne.n	8003b52 <quorem+0xf2>
 8003b70:	3c01      	subs	r4, #1
 8003b72:	e7eb      	b.n	8003b4c <quorem+0xec>
 8003b74:	2000      	movs	r0, #0
 8003b76:	e7ee      	b.n	8003b56 <quorem+0xf6>

08003b78 <_dtoa_r>:
 8003b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	4616      	mov	r6, r2
 8003b7e:	461f      	mov	r7, r3
 8003b80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b82:	b099      	sub	sp, #100	; 0x64
 8003b84:	4605      	mov	r5, r0
 8003b86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003b8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003b8e:	b974      	cbnz	r4, 8003bae <_dtoa_r+0x36>
 8003b90:	2010      	movs	r0, #16
 8003b92:	f000 fde3 	bl	800475c <malloc>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6268      	str	r0, [r5, #36]	; 0x24
 8003b9a:	b920      	cbnz	r0, 8003ba6 <_dtoa_r+0x2e>
 8003b9c:	21ea      	movs	r1, #234	; 0xea
 8003b9e:	4ba8      	ldr	r3, [pc, #672]	; (8003e40 <_dtoa_r+0x2c8>)
 8003ba0:	48a8      	ldr	r0, [pc, #672]	; (8003e44 <_dtoa_r+0x2cc>)
 8003ba2:	f001 fbdd 	bl	8005360 <__assert_func>
 8003ba6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003baa:	6004      	str	r4, [r0, #0]
 8003bac:	60c4      	str	r4, [r0, #12]
 8003bae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bb0:	6819      	ldr	r1, [r3, #0]
 8003bb2:	b151      	cbz	r1, 8003bca <_dtoa_r+0x52>
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	604a      	str	r2, [r1, #4]
 8003bbc:	608b      	str	r3, [r1, #8]
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 fe30 	bl	8004824 <_Bfree>
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	1e3b      	subs	r3, r7, #0
 8003bcc:	bfaf      	iteee	ge
 8003bce:	2300      	movge	r3, #0
 8003bd0:	2201      	movlt	r2, #1
 8003bd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003bd6:	9305      	strlt	r3, [sp, #20]
 8003bd8:	bfa8      	it	ge
 8003bda:	f8c8 3000 	strge.w	r3, [r8]
 8003bde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003be2:	4b99      	ldr	r3, [pc, #612]	; (8003e48 <_dtoa_r+0x2d0>)
 8003be4:	bfb8      	it	lt
 8003be6:	f8c8 2000 	strlt.w	r2, [r8]
 8003bea:	ea33 0309 	bics.w	r3, r3, r9
 8003bee:	d119      	bne.n	8003c24 <_dtoa_r+0xac>
 8003bf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bfc:	4333      	orrs	r3, r6
 8003bfe:	f000 857f 	beq.w	8004700 <_dtoa_r+0xb88>
 8003c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c04:	b953      	cbnz	r3, 8003c1c <_dtoa_r+0xa4>
 8003c06:	4b91      	ldr	r3, [pc, #580]	; (8003e4c <_dtoa_r+0x2d4>)
 8003c08:	e022      	b.n	8003c50 <_dtoa_r+0xd8>
 8003c0a:	4b91      	ldr	r3, [pc, #580]	; (8003e50 <_dtoa_r+0x2d8>)
 8003c0c:	9303      	str	r3, [sp, #12]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	9803      	ldr	r0, [sp, #12]
 8003c16:	b019      	add	sp, #100	; 0x64
 8003c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1c:	4b8b      	ldr	r3, [pc, #556]	; (8003e4c <_dtoa_r+0x2d4>)
 8003c1e:	9303      	str	r3, [sp, #12]
 8003c20:	3303      	adds	r3, #3
 8003c22:	e7f5      	b.n	8003c10 <_dtoa_r+0x98>
 8003c24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	2300      	movs	r3, #0
 8003c34:	f7fc feb8 	bl	80009a8 <__aeabi_dcmpeq>
 8003c38:	4680      	mov	r8, r0
 8003c3a:	b158      	cbz	r0, 8003c54 <_dtoa_r+0xdc>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8558 	beq.w	80046fa <_dtoa_r+0xb82>
 8003c4a:	4882      	ldr	r0, [pc, #520]	; (8003e54 <_dtoa_r+0x2dc>)
 8003c4c:	6018      	str	r0, [r3, #0]
 8003c4e:	1e43      	subs	r3, r0, #1
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	e7df      	b.n	8003c14 <_dtoa_r+0x9c>
 8003c54:	ab16      	add	r3, sp, #88	; 0x58
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	ab17      	add	r3, sp, #92	; 0x5c
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003c62:	f001 f8c5 	bl	8004df0 <__d2b>
 8003c66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003c6a:	4683      	mov	fp, r0
 8003c6c:	2c00      	cmp	r4, #0
 8003c6e:	d07f      	beq.n	8003d70 <_dtoa_r+0x1f8>
 8003c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003c82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003c86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <_dtoa_r+0x2e0>)
 8003c8e:	f7fc fa6b 	bl	8000168 <__aeabi_dsub>
 8003c92:	a365      	add	r3, pc, #404	; (adr r3, 8003e28 <_dtoa_r+0x2b0>)
 8003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c98:	f7fc fc1e 	bl	80004d8 <__aeabi_dmul>
 8003c9c:	a364      	add	r3, pc, #400	; (adr r3, 8003e30 <_dtoa_r+0x2b8>)
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f7fc fa63 	bl	800016c <__adddf3>
 8003ca6:	4606      	mov	r6, r0
 8003ca8:	4620      	mov	r0, r4
 8003caa:	460f      	mov	r7, r1
 8003cac:	f7fc fbaa 	bl	8000404 <__aeabi_i2d>
 8003cb0:	a361      	add	r3, pc, #388	; (adr r3, 8003e38 <_dtoa_r+0x2c0>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fc0f 	bl	80004d8 <__aeabi_dmul>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	f7fc fa53 	bl	800016c <__adddf3>
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460f      	mov	r7, r1
 8003cca:	f7fc feb5 	bl	8000a38 <__aeabi_d2iz>
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4682      	mov	sl, r0
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	f7fc fe70 	bl	80009bc <__aeabi_dcmplt>
 8003cdc:	b148      	cbz	r0, 8003cf2 <_dtoa_r+0x17a>
 8003cde:	4650      	mov	r0, sl
 8003ce0:	f7fc fb90 	bl	8000404 <__aeabi_i2d>
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	f7fc fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8003cec:	b908      	cbnz	r0, 8003cf2 <_dtoa_r+0x17a>
 8003cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003cf2:	f1ba 0f16 	cmp.w	sl, #22
 8003cf6:	d858      	bhi.n	8003daa <_dtoa_r+0x232>
 8003cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cfc:	4b57      	ldr	r3, [pc, #348]	; (8003e5c <_dtoa_r+0x2e4>)
 8003cfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fe59 	bl	80009bc <__aeabi_dcmplt>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d04f      	beq.n	8003dae <_dtoa_r+0x236>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d14:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d18:	1b1c      	subs	r4, r3, r4
 8003d1a:	1e63      	subs	r3, r4, #1
 8003d1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1e:	bf49      	itett	mi
 8003d20:	f1c4 0301 	rsbmi	r3, r4, #1
 8003d24:	2300      	movpl	r3, #0
 8003d26:	9306      	strmi	r3, [sp, #24]
 8003d28:	2300      	movmi	r3, #0
 8003d2a:	bf54      	ite	pl
 8003d2c:	9306      	strpl	r3, [sp, #24]
 8003d2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003d30:	f1ba 0f00 	cmp.w	sl, #0
 8003d34:	db3d      	blt.n	8003db2 <_dtoa_r+0x23a>
 8003d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003d3c:	4453      	add	r3, sl
 8003d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d40:	2300      	movs	r3, #0
 8003d42:	930a      	str	r3, [sp, #40]	; 0x28
 8003d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d46:	2b09      	cmp	r3, #9
 8003d48:	f200 808c 	bhi.w	8003e64 <_dtoa_r+0x2ec>
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	bfc4      	itt	gt
 8003d50:	3b04      	subgt	r3, #4
 8003d52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003d54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d56:	bfc8      	it	gt
 8003d58:	2400      	movgt	r4, #0
 8003d5a:	f1a3 0302 	sub.w	r3, r3, #2
 8003d5e:	bfd8      	it	le
 8003d60:	2401      	movle	r4, #1
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	f200 808a 	bhi.w	8003e7c <_dtoa_r+0x304>
 8003d68:	e8df f003 	tbb	[pc, r3]
 8003d6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003d70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003d74:	441c      	add	r4, r3
 8003d76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	bfc3      	ittte	gt
 8003d7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003d86:	fa09 f303 	lslgt.w	r3, r9, r3
 8003d8a:	f1c3 0320 	rsble	r3, r3, #32
 8003d8e:	bfc6      	itte	gt
 8003d90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d94:	4318      	orrgt	r0, r3
 8003d96:	fa06 f003 	lslle.w	r0, r6, r3
 8003d9a:	f7fc fb23 	bl	80003e4 <__aeabi_ui2d>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003da4:	3c01      	subs	r4, #1
 8003da6:	9313      	str	r3, [sp, #76]	; 0x4c
 8003da8:	e76f      	b.n	8003c8a <_dtoa_r+0x112>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e7b2      	b.n	8003d14 <_dtoa_r+0x19c>
 8003dae:	900f      	str	r0, [sp, #60]	; 0x3c
 8003db0:	e7b1      	b.n	8003d16 <_dtoa_r+0x19e>
 8003db2:	9b06      	ldr	r3, [sp, #24]
 8003db4:	eba3 030a 	sub.w	r3, r3, sl
 8003db8:	9306      	str	r3, [sp, #24]
 8003dba:	f1ca 0300 	rsb	r3, sl, #0
 8003dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8003dc4:	e7be      	b.n	8003d44 <_dtoa_r+0x1cc>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dc58      	bgt.n	8003e82 <_dtoa_r+0x30a>
 8003dd0:	f04f 0901 	mov.w	r9, #1
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	f8cd 9020 	str.w	r9, [sp, #32]
 8003dda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003dde:	2200      	movs	r2, #0
 8003de0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003de2:	6042      	str	r2, [r0, #4]
 8003de4:	2204      	movs	r2, #4
 8003de6:	f102 0614 	add.w	r6, r2, #20
 8003dea:	429e      	cmp	r6, r3
 8003dec:	6841      	ldr	r1, [r0, #4]
 8003dee:	d94e      	bls.n	8003e8e <_dtoa_r+0x316>
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 fcd7 	bl	80047a4 <_Balloc>
 8003df6:	9003      	str	r0, [sp, #12]
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d14c      	bne.n	8003e96 <_dtoa_r+0x31e>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <_dtoa_r+0x2e8>)
 8003e04:	e6cc      	b.n	8003ba0 <_dtoa_r+0x28>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e7de      	b.n	8003dc8 <_dtoa_r+0x250>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e10:	eb0a 0903 	add.w	r9, sl, r3
 8003e14:	f109 0301 	add.w	r3, r9, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	9308      	str	r3, [sp, #32]
 8003e1c:	bfb8      	it	lt
 8003e1e:	2301      	movlt	r3, #1
 8003e20:	e7dd      	b.n	8003dde <_dtoa_r+0x266>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e7f2      	b.n	8003e0c <_dtoa_r+0x294>
 8003e26:	bf00      	nop
 8003e28:	636f4361 	.word	0x636f4361
 8003e2c:	3fd287a7 	.word	0x3fd287a7
 8003e30:	8b60c8b3 	.word	0x8b60c8b3
 8003e34:	3fc68a28 	.word	0x3fc68a28
 8003e38:	509f79fb 	.word	0x509f79fb
 8003e3c:	3fd34413 	.word	0x3fd34413
 8003e40:	08005fe1 	.word	0x08005fe1
 8003e44:	08005ff8 	.word	0x08005ff8
 8003e48:	7ff00000 	.word	0x7ff00000
 8003e4c:	08005fdd 	.word	0x08005fdd
 8003e50:	08005fd4 	.word	0x08005fd4
 8003e54:	08005fb1 	.word	0x08005fb1
 8003e58:	3ff80000 	.word	0x3ff80000
 8003e5c:	080060e8 	.word	0x080060e8
 8003e60:	08006053 	.word	0x08006053
 8003e64:	2401      	movs	r4, #1
 8003e66:	2300      	movs	r3, #0
 8003e68:	940b      	str	r4, [sp, #44]	; 0x2c
 8003e6a:	9322      	str	r3, [sp, #136]	; 0x88
 8003e6c:	f04f 39ff 	mov.w	r9, #4294967295
 8003e70:	2200      	movs	r2, #0
 8003e72:	2312      	movs	r3, #18
 8003e74:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e78:	9223      	str	r2, [sp, #140]	; 0x8c
 8003e7a:	e7b0      	b.n	8003dde <_dtoa_r+0x266>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e80:	e7f4      	b.n	8003e6c <_dtoa_r+0x2f4>
 8003e82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003e86:	464b      	mov	r3, r9
 8003e88:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e8c:	e7a7      	b.n	8003dde <_dtoa_r+0x266>
 8003e8e:	3101      	adds	r1, #1
 8003e90:	6041      	str	r1, [r0, #4]
 8003e92:	0052      	lsls	r2, r2, #1
 8003e94:	e7a7      	b.n	8003de6 <_dtoa_r+0x26e>
 8003e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e98:	9a03      	ldr	r2, [sp, #12]
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	9b08      	ldr	r3, [sp, #32]
 8003e9e:	2b0e      	cmp	r3, #14
 8003ea0:	f200 80a8 	bhi.w	8003ff4 <_dtoa_r+0x47c>
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	f000 80a5 	beq.w	8003ff4 <_dtoa_r+0x47c>
 8003eaa:	f1ba 0f00 	cmp.w	sl, #0
 8003eae:	dd34      	ble.n	8003f1a <_dtoa_r+0x3a2>
 8003eb0:	4a9a      	ldr	r2, [pc, #616]	; (800411c <_dtoa_r+0x5a4>)
 8003eb2:	f00a 030f 	and.w	r3, sl, #15
 8003eb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003eba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003ebe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ec2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ec6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003eca:	d016      	beq.n	8003efa <_dtoa_r+0x382>
 8003ecc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003ed0:	4b93      	ldr	r3, [pc, #588]	; (8004120 <_dtoa_r+0x5a8>)
 8003ed2:	2703      	movs	r7, #3
 8003ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ed8:	f7fc fc28 	bl	800072c <__aeabi_ddiv>
 8003edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ee0:	f004 040f 	and.w	r4, r4, #15
 8003ee4:	4e8e      	ldr	r6, [pc, #568]	; (8004120 <_dtoa_r+0x5a8>)
 8003ee6:	b954      	cbnz	r4, 8003efe <_dtoa_r+0x386>
 8003ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003eec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ef0:	f7fc fc1c 	bl	800072c <__aeabi_ddiv>
 8003ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ef8:	e029      	b.n	8003f4e <_dtoa_r+0x3d6>
 8003efa:	2702      	movs	r7, #2
 8003efc:	e7f2      	b.n	8003ee4 <_dtoa_r+0x36c>
 8003efe:	07e1      	lsls	r1, r4, #31
 8003f00:	d508      	bpl.n	8003f14 <_dtoa_r+0x39c>
 8003f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f0a:	f7fc fae5 	bl	80004d8 <__aeabi_dmul>
 8003f0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f12:	3701      	adds	r7, #1
 8003f14:	1064      	asrs	r4, r4, #1
 8003f16:	3608      	adds	r6, #8
 8003f18:	e7e5      	b.n	8003ee6 <_dtoa_r+0x36e>
 8003f1a:	f000 80a5 	beq.w	8004068 <_dtoa_r+0x4f0>
 8003f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f22:	f1ca 0400 	rsb	r4, sl, #0
 8003f26:	4b7d      	ldr	r3, [pc, #500]	; (800411c <_dtoa_r+0x5a4>)
 8003f28:	f004 020f 	and.w	r2, r4, #15
 8003f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f7fc fad0 	bl	80004d8 <__aeabi_dmul>
 8003f38:	2702      	movs	r7, #2
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f40:	4e77      	ldr	r6, [pc, #476]	; (8004120 <_dtoa_r+0x5a8>)
 8003f42:	1124      	asrs	r4, r4, #4
 8003f44:	2c00      	cmp	r4, #0
 8003f46:	f040 8084 	bne.w	8004052 <_dtoa_r+0x4da>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1d2      	bne.n	8003ef4 <_dtoa_r+0x37c>
 8003f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 808b 	beq.w	800406c <_dtoa_r+0x4f4>
 8003f56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f62:	2200      	movs	r2, #0
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <_dtoa_r+0x5ac>)
 8003f66:	f7fc fd29 	bl	80009bc <__aeabi_dcmplt>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d07e      	beq.n	800406c <_dtoa_r+0x4f4>
 8003f6e:	9b08      	ldr	r3, [sp, #32]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d07b      	beq.n	800406c <_dtoa_r+0x4f4>
 8003f74:	f1b9 0f00 	cmp.w	r9, #0
 8003f78:	dd38      	ble.n	8003fec <_dtoa_r+0x474>
 8003f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4b69      	ldr	r3, [pc, #420]	; (8004128 <_dtoa_r+0x5b0>)
 8003f82:	f7fc faa9 	bl	80004d8 <__aeabi_dmul>
 8003f86:	464c      	mov	r4, r9
 8003f88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f8c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003f90:	3701      	adds	r7, #1
 8003f92:	4638      	mov	r0, r7
 8003f94:	f7fc fa36 	bl	8000404 <__aeabi_i2d>
 8003f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9c:	f7fc fa9c 	bl	80004d8 <__aeabi_dmul>
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	4b62      	ldr	r3, [pc, #392]	; (800412c <_dtoa_r+0x5b4>)
 8003fa4:	f7fc f8e2 	bl	800016c <__adddf3>
 8003fa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003fac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003fb0:	9611      	str	r6, [sp, #68]	; 0x44
 8003fb2:	2c00      	cmp	r4, #0
 8003fb4:	d15d      	bne.n	8004072 <_dtoa_r+0x4fa>
 8003fb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <_dtoa_r+0x5b8>)
 8003fbe:	f7fc f8d3 	bl	8000168 <__aeabi_dsub>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fca:	4633      	mov	r3, r6
 8003fcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003fce:	f7fc fd13 	bl	80009f8 <__aeabi_dcmpgt>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f040 829c 	bne.w	8004510 <_dtoa_r+0x998>
 8003fd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003fde:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003fe2:	f7fc fceb 	bl	80009bc <__aeabi_dcmplt>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f040 8290 	bne.w	800450c <_dtoa_r+0x994>
 8003fec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003ff0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ff4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f2c0 8152 	blt.w	80042a0 <_dtoa_r+0x728>
 8003ffc:	f1ba 0f0e 	cmp.w	sl, #14
 8004000:	f300 814e 	bgt.w	80042a0 <_dtoa_r+0x728>
 8004004:	4b45      	ldr	r3, [pc, #276]	; (800411c <_dtoa_r+0x5a4>)
 8004006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800400a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800400e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004012:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004014:	2b00      	cmp	r3, #0
 8004016:	f280 80db 	bge.w	80041d0 <_dtoa_r+0x658>
 800401a:	9b08      	ldr	r3, [sp, #32]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f300 80d7 	bgt.w	80041d0 <_dtoa_r+0x658>
 8004022:	f040 8272 	bne.w	800450a <_dtoa_r+0x992>
 8004026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800402a:	2200      	movs	r2, #0
 800402c:	4b40      	ldr	r3, [pc, #256]	; (8004130 <_dtoa_r+0x5b8>)
 800402e:	f7fc fa53 	bl	80004d8 <__aeabi_dmul>
 8004032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004036:	f7fc fcd5 	bl	80009e4 <__aeabi_dcmpge>
 800403a:	9c08      	ldr	r4, [sp, #32]
 800403c:	4626      	mov	r6, r4
 800403e:	2800      	cmp	r0, #0
 8004040:	f040 8248 	bne.w	80044d4 <_dtoa_r+0x95c>
 8004044:	2331      	movs	r3, #49	; 0x31
 8004046:	9f03      	ldr	r7, [sp, #12]
 8004048:	f10a 0a01 	add.w	sl, sl, #1
 800404c:	f807 3b01 	strb.w	r3, [r7], #1
 8004050:	e244      	b.n	80044dc <_dtoa_r+0x964>
 8004052:	07e2      	lsls	r2, r4, #31
 8004054:	d505      	bpl.n	8004062 <_dtoa_r+0x4ea>
 8004056:	e9d6 2300 	ldrd	r2, r3, [r6]
 800405a:	f7fc fa3d 	bl	80004d8 <__aeabi_dmul>
 800405e:	2301      	movs	r3, #1
 8004060:	3701      	adds	r7, #1
 8004062:	1064      	asrs	r4, r4, #1
 8004064:	3608      	adds	r6, #8
 8004066:	e76d      	b.n	8003f44 <_dtoa_r+0x3cc>
 8004068:	2702      	movs	r7, #2
 800406a:	e770      	b.n	8003f4e <_dtoa_r+0x3d6>
 800406c:	46d0      	mov	r8, sl
 800406e:	9c08      	ldr	r4, [sp, #32]
 8004070:	e78f      	b.n	8003f92 <_dtoa_r+0x41a>
 8004072:	9903      	ldr	r1, [sp, #12]
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <_dtoa_r+0x5a4>)
 8004076:	4421      	add	r1, r4
 8004078:	9112      	str	r1, [sp, #72]	; 0x48
 800407a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800407c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004080:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004084:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004088:	2900      	cmp	r1, #0
 800408a:	d055      	beq.n	8004138 <_dtoa_r+0x5c0>
 800408c:	2000      	movs	r0, #0
 800408e:	4929      	ldr	r1, [pc, #164]	; (8004134 <_dtoa_r+0x5bc>)
 8004090:	f7fc fb4c 	bl	800072c <__aeabi_ddiv>
 8004094:	463b      	mov	r3, r7
 8004096:	4632      	mov	r2, r6
 8004098:	f7fc f866 	bl	8000168 <__aeabi_dsub>
 800409c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040a0:	9f03      	ldr	r7, [sp, #12]
 80040a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040a6:	f7fc fcc7 	bl	8000a38 <__aeabi_d2iz>
 80040aa:	4604      	mov	r4, r0
 80040ac:	f7fc f9aa 	bl	8000404 <__aeabi_i2d>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040b8:	f7fc f856 	bl	8000168 <__aeabi_dsub>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	3430      	adds	r4, #48	; 0x30
 80040c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040ca:	f807 4b01 	strb.w	r4, [r7], #1
 80040ce:	f7fc fc75 	bl	80009bc <__aeabi_dcmplt>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d174      	bne.n	80041c0 <_dtoa_r+0x648>
 80040d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040da:	2000      	movs	r0, #0
 80040dc:	4911      	ldr	r1, [pc, #68]	; (8004124 <_dtoa_r+0x5ac>)
 80040de:	f7fc f843 	bl	8000168 <__aeabi_dsub>
 80040e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040e6:	f7fc fc69 	bl	80009bc <__aeabi_dcmplt>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	f040 80b7 	bne.w	800425e <_dtoa_r+0x6e6>
 80040f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80040f2:	429f      	cmp	r7, r3
 80040f4:	f43f af7a 	beq.w	8003fec <_dtoa_r+0x474>
 80040f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80040fc:	2200      	movs	r2, #0
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <_dtoa_r+0x5b0>)
 8004100:	f7fc f9ea 	bl	80004d8 <__aeabi_dmul>
 8004104:	2200      	movs	r2, #0
 8004106:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800410a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <_dtoa_r+0x5b0>)
 8004110:	f7fc f9e2 	bl	80004d8 <__aeabi_dmul>
 8004114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004118:	e7c3      	b.n	80040a2 <_dtoa_r+0x52a>
 800411a:	bf00      	nop
 800411c:	080060e8 	.word	0x080060e8
 8004120:	080060c0 	.word	0x080060c0
 8004124:	3ff00000 	.word	0x3ff00000
 8004128:	40240000 	.word	0x40240000
 800412c:	401c0000 	.word	0x401c0000
 8004130:	40140000 	.word	0x40140000
 8004134:	3fe00000 	.word	0x3fe00000
 8004138:	4630      	mov	r0, r6
 800413a:	4639      	mov	r1, r7
 800413c:	f7fc f9cc 	bl	80004d8 <__aeabi_dmul>
 8004140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004142:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004146:	9c03      	ldr	r4, [sp, #12]
 8004148:	9314      	str	r3, [sp, #80]	; 0x50
 800414a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800414e:	f7fc fc73 	bl	8000a38 <__aeabi_d2iz>
 8004152:	9015      	str	r0, [sp, #84]	; 0x54
 8004154:	f7fc f956 	bl	8000404 <__aeabi_i2d>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004160:	f7fc f802 	bl	8000168 <__aeabi_dsub>
 8004164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004166:	4606      	mov	r6, r0
 8004168:	3330      	adds	r3, #48	; 0x30
 800416a:	f804 3b01 	strb.w	r3, [r4], #1
 800416e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004170:	460f      	mov	r7, r1
 8004172:	429c      	cmp	r4, r3
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	d124      	bne.n	80041c4 <_dtoa_r+0x64c>
 800417a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800417e:	4bb0      	ldr	r3, [pc, #704]	; (8004440 <_dtoa_r+0x8c8>)
 8004180:	f7fb fff4 	bl	800016c <__adddf3>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4630      	mov	r0, r6
 800418a:	4639      	mov	r1, r7
 800418c:	f7fc fc34 	bl	80009f8 <__aeabi_dcmpgt>
 8004190:	2800      	cmp	r0, #0
 8004192:	d163      	bne.n	800425c <_dtoa_r+0x6e4>
 8004194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004198:	2000      	movs	r0, #0
 800419a:	49a9      	ldr	r1, [pc, #676]	; (8004440 <_dtoa_r+0x8c8>)
 800419c:	f7fb ffe4 	bl	8000168 <__aeabi_dsub>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4630      	mov	r0, r6
 80041a6:	4639      	mov	r1, r7
 80041a8:	f7fc fc08 	bl	80009bc <__aeabi_dcmplt>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	f43f af1d 	beq.w	8003fec <_dtoa_r+0x474>
 80041b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80041b4:	1e7b      	subs	r3, r7, #1
 80041b6:	9314      	str	r3, [sp, #80]	; 0x50
 80041b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80041bc:	2b30      	cmp	r3, #48	; 0x30
 80041be:	d0f8      	beq.n	80041b2 <_dtoa_r+0x63a>
 80041c0:	46c2      	mov	sl, r8
 80041c2:	e03b      	b.n	800423c <_dtoa_r+0x6c4>
 80041c4:	4b9f      	ldr	r3, [pc, #636]	; (8004444 <_dtoa_r+0x8cc>)
 80041c6:	f7fc f987 	bl	80004d8 <__aeabi_dmul>
 80041ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041ce:	e7bc      	b.n	800414a <_dtoa_r+0x5d2>
 80041d0:	9f03      	ldr	r7, [sp, #12]
 80041d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80041d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f7fc faa5 	bl	800072c <__aeabi_ddiv>
 80041e2:	f7fc fc29 	bl	8000a38 <__aeabi_d2iz>
 80041e6:	4604      	mov	r4, r0
 80041e8:	f7fc f90c 	bl	8000404 <__aeabi_i2d>
 80041ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041f0:	f7fc f972 	bl	80004d8 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4640      	mov	r0, r8
 80041fa:	4649      	mov	r1, r9
 80041fc:	f7fb ffb4 	bl	8000168 <__aeabi_dsub>
 8004200:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004204:	f807 6b01 	strb.w	r6, [r7], #1
 8004208:	9e03      	ldr	r6, [sp, #12]
 800420a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800420e:	1bbe      	subs	r6, r7, r6
 8004210:	45b4      	cmp	ip, r6
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	d136      	bne.n	8004286 <_dtoa_r+0x70e>
 8004218:	f7fb ffa8 	bl	800016c <__adddf3>
 800421c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004220:	4680      	mov	r8, r0
 8004222:	4689      	mov	r9, r1
 8004224:	f7fc fbe8 	bl	80009f8 <__aeabi_dcmpgt>
 8004228:	bb58      	cbnz	r0, 8004282 <_dtoa_r+0x70a>
 800422a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800422e:	4640      	mov	r0, r8
 8004230:	4649      	mov	r1, r9
 8004232:	f7fc fbb9 	bl	80009a8 <__aeabi_dcmpeq>
 8004236:	b108      	cbz	r0, 800423c <_dtoa_r+0x6c4>
 8004238:	07e1      	lsls	r1, r4, #31
 800423a:	d422      	bmi.n	8004282 <_dtoa_r+0x70a>
 800423c:	4628      	mov	r0, r5
 800423e:	4659      	mov	r1, fp
 8004240:	f000 faf0 	bl	8004824 <_Bfree>
 8004244:	2300      	movs	r3, #0
 8004246:	703b      	strb	r3, [r7, #0]
 8004248:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800424a:	f10a 0001 	add.w	r0, sl, #1
 800424e:	6018      	str	r0, [r3, #0]
 8004250:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004252:	2b00      	cmp	r3, #0
 8004254:	f43f acde 	beq.w	8003c14 <_dtoa_r+0x9c>
 8004258:	601f      	str	r7, [r3, #0]
 800425a:	e4db      	b.n	8003c14 <_dtoa_r+0x9c>
 800425c:	4627      	mov	r7, r4
 800425e:	463b      	mov	r3, r7
 8004260:	461f      	mov	r7, r3
 8004262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004266:	2a39      	cmp	r2, #57	; 0x39
 8004268:	d107      	bne.n	800427a <_dtoa_r+0x702>
 800426a:	9a03      	ldr	r2, [sp, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d1f7      	bne.n	8004260 <_dtoa_r+0x6e8>
 8004270:	2230      	movs	r2, #48	; 0x30
 8004272:	9903      	ldr	r1, [sp, #12]
 8004274:	f108 0801 	add.w	r8, r8, #1
 8004278:	700a      	strb	r2, [r1, #0]
 800427a:	781a      	ldrb	r2, [r3, #0]
 800427c:	3201      	adds	r2, #1
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e79e      	b.n	80041c0 <_dtoa_r+0x648>
 8004282:	46d0      	mov	r8, sl
 8004284:	e7eb      	b.n	800425e <_dtoa_r+0x6e6>
 8004286:	2200      	movs	r2, #0
 8004288:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <_dtoa_r+0x8cc>)
 800428a:	f7fc f925 	bl	80004d8 <__aeabi_dmul>
 800428e:	2200      	movs	r2, #0
 8004290:	2300      	movs	r3, #0
 8004292:	4680      	mov	r8, r0
 8004294:	4689      	mov	r9, r1
 8004296:	f7fc fb87 	bl	80009a8 <__aeabi_dcmpeq>
 800429a:	2800      	cmp	r0, #0
 800429c:	d09b      	beq.n	80041d6 <_dtoa_r+0x65e>
 800429e:	e7cd      	b.n	800423c <_dtoa_r+0x6c4>
 80042a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	f000 80d0 	beq.w	8004448 <_dtoa_r+0x8d0>
 80042a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80042aa:	2a01      	cmp	r2, #1
 80042ac:	f300 80ae 	bgt.w	800440c <_dtoa_r+0x894>
 80042b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042b2:	2a00      	cmp	r2, #0
 80042b4:	f000 80a6 	beq.w	8004404 <_dtoa_r+0x88c>
 80042b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80042bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80042be:	9f06      	ldr	r7, [sp, #24]
 80042c0:	9a06      	ldr	r2, [sp, #24]
 80042c2:	2101      	movs	r1, #1
 80042c4:	441a      	add	r2, r3
 80042c6:	9206      	str	r2, [sp, #24]
 80042c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042ca:	4628      	mov	r0, r5
 80042cc:	441a      	add	r2, r3
 80042ce:	9209      	str	r2, [sp, #36]	; 0x24
 80042d0:	f000 fb5e 	bl	8004990 <__i2b>
 80042d4:	4606      	mov	r6, r0
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	dd0c      	ble.n	80042f4 <_dtoa_r+0x77c>
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	dd09      	ble.n	80042f4 <_dtoa_r+0x77c>
 80042e0:	42bb      	cmp	r3, r7
 80042e2:	bfa8      	it	ge
 80042e4:	463b      	movge	r3, r7
 80042e6:	9a06      	ldr	r2, [sp, #24]
 80042e8:	1aff      	subs	r7, r7, r3
 80042ea:	1ad2      	subs	r2, r2, r3
 80042ec:	9206      	str	r2, [sp, #24]
 80042ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	9309      	str	r3, [sp, #36]	; 0x24
 80042f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f6:	b1f3      	cbz	r3, 8004336 <_dtoa_r+0x7be>
 80042f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80a8 	beq.w	8004450 <_dtoa_r+0x8d8>
 8004300:	2c00      	cmp	r4, #0
 8004302:	dd10      	ble.n	8004326 <_dtoa_r+0x7ae>
 8004304:	4631      	mov	r1, r6
 8004306:	4622      	mov	r2, r4
 8004308:	4628      	mov	r0, r5
 800430a:	f000 fbff 	bl	8004b0c <__pow5mult>
 800430e:	465a      	mov	r2, fp
 8004310:	4601      	mov	r1, r0
 8004312:	4606      	mov	r6, r0
 8004314:	4628      	mov	r0, r5
 8004316:	f000 fb51 	bl	80049bc <__multiply>
 800431a:	4680      	mov	r8, r0
 800431c:	4659      	mov	r1, fp
 800431e:	4628      	mov	r0, r5
 8004320:	f000 fa80 	bl	8004824 <_Bfree>
 8004324:	46c3      	mov	fp, r8
 8004326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004328:	1b1a      	subs	r2, r3, r4
 800432a:	d004      	beq.n	8004336 <_dtoa_r+0x7be>
 800432c:	4659      	mov	r1, fp
 800432e:	4628      	mov	r0, r5
 8004330:	f000 fbec 	bl	8004b0c <__pow5mult>
 8004334:	4683      	mov	fp, r0
 8004336:	2101      	movs	r1, #1
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fb29 	bl	8004990 <__i2b>
 800433e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004340:	4604      	mov	r4, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	f340 8086 	ble.w	8004454 <_dtoa_r+0x8dc>
 8004348:	461a      	mov	r2, r3
 800434a:	4601      	mov	r1, r0
 800434c:	4628      	mov	r0, r5
 800434e:	f000 fbdd 	bl	8004b0c <__pow5mult>
 8004352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004354:	4604      	mov	r4, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	dd7f      	ble.n	800445a <_dtoa_r+0x8e2>
 800435a:	f04f 0800 	mov.w	r8, #0
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004364:	6918      	ldr	r0, [r3, #16]
 8004366:	f000 fac5 	bl	80048f4 <__hi0bits>
 800436a:	f1c0 0020 	rsb	r0, r0, #32
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	4418      	add	r0, r3
 8004372:	f010 001f 	ands.w	r0, r0, #31
 8004376:	f000 8092 	beq.w	800449e <_dtoa_r+0x926>
 800437a:	f1c0 0320 	rsb	r3, r0, #32
 800437e:	2b04      	cmp	r3, #4
 8004380:	f340 808a 	ble.w	8004498 <_dtoa_r+0x920>
 8004384:	f1c0 001c 	rsb	r0, r0, #28
 8004388:	9b06      	ldr	r3, [sp, #24]
 800438a:	4407      	add	r7, r0
 800438c:	4403      	add	r3, r0
 800438e:	9306      	str	r3, [sp, #24]
 8004390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004392:	4403      	add	r3, r0
 8004394:	9309      	str	r3, [sp, #36]	; 0x24
 8004396:	9b06      	ldr	r3, [sp, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	dd05      	ble.n	80043a8 <_dtoa_r+0x830>
 800439c:	4659      	mov	r1, fp
 800439e:	461a      	mov	r2, r3
 80043a0:	4628      	mov	r0, r5
 80043a2:	f000 fc0d 	bl	8004bc0 <__lshift>
 80043a6:	4683      	mov	fp, r0
 80043a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	dd05      	ble.n	80043ba <_dtoa_r+0x842>
 80043ae:	4621      	mov	r1, r4
 80043b0:	461a      	mov	r2, r3
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 fc04 	bl	8004bc0 <__lshift>
 80043b8:	4604      	mov	r4, r0
 80043ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d070      	beq.n	80044a2 <_dtoa_r+0x92a>
 80043c0:	4621      	mov	r1, r4
 80043c2:	4658      	mov	r0, fp
 80043c4:	f000 fc6c 	bl	8004ca0 <__mcmp>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	da6a      	bge.n	80044a2 <_dtoa_r+0x92a>
 80043cc:	2300      	movs	r3, #0
 80043ce:	4659      	mov	r1, fp
 80043d0:	220a      	movs	r2, #10
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 fa48 	bl	8004868 <__multadd>
 80043d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043da:	4683      	mov	fp, r0
 80043dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8194 	beq.w	800470e <_dtoa_r+0xb96>
 80043e6:	4631      	mov	r1, r6
 80043e8:	2300      	movs	r3, #0
 80043ea:	220a      	movs	r2, #10
 80043ec:	4628      	mov	r0, r5
 80043ee:	f000 fa3b 	bl	8004868 <__multadd>
 80043f2:	f1b9 0f00 	cmp.w	r9, #0
 80043f6:	4606      	mov	r6, r0
 80043f8:	f300 8093 	bgt.w	8004522 <_dtoa_r+0x9aa>
 80043fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043fe:	2b02      	cmp	r3, #2
 8004400:	dc57      	bgt.n	80044b2 <_dtoa_r+0x93a>
 8004402:	e08e      	b.n	8004522 <_dtoa_r+0x9aa>
 8004404:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800440a:	e757      	b.n	80042bc <_dtoa_r+0x744>
 800440c:	9b08      	ldr	r3, [sp, #32]
 800440e:	1e5c      	subs	r4, r3, #1
 8004410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004412:	42a3      	cmp	r3, r4
 8004414:	bfb7      	itett	lt
 8004416:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004418:	1b1c      	subge	r4, r3, r4
 800441a:	1ae2      	sublt	r2, r4, r3
 800441c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800441e:	bfbe      	ittt	lt
 8004420:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004422:	189b      	addlt	r3, r3, r2
 8004424:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004426:	9b08      	ldr	r3, [sp, #32]
 8004428:	bfb8      	it	lt
 800442a:	2400      	movlt	r4, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	bfbb      	ittet	lt
 8004430:	9b06      	ldrlt	r3, [sp, #24]
 8004432:	9a08      	ldrlt	r2, [sp, #32]
 8004434:	9f06      	ldrge	r7, [sp, #24]
 8004436:	1a9f      	sublt	r7, r3, r2
 8004438:	bfac      	ite	ge
 800443a:	9b08      	ldrge	r3, [sp, #32]
 800443c:	2300      	movlt	r3, #0
 800443e:	e73f      	b.n	80042c0 <_dtoa_r+0x748>
 8004440:	3fe00000 	.word	0x3fe00000
 8004444:	40240000 	.word	0x40240000
 8004448:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800444a:	9f06      	ldr	r7, [sp, #24]
 800444c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800444e:	e742      	b.n	80042d6 <_dtoa_r+0x75e>
 8004450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004452:	e76b      	b.n	800432c <_dtoa_r+0x7b4>
 8004454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004456:	2b01      	cmp	r3, #1
 8004458:	dc19      	bgt.n	800448e <_dtoa_r+0x916>
 800445a:	9b04      	ldr	r3, [sp, #16]
 800445c:	b9bb      	cbnz	r3, 800448e <_dtoa_r+0x916>
 800445e:	9b05      	ldr	r3, [sp, #20]
 8004460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004464:	b99b      	cbnz	r3, 800448e <_dtoa_r+0x916>
 8004466:	9b05      	ldr	r3, [sp, #20]
 8004468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800446c:	0d1b      	lsrs	r3, r3, #20
 800446e:	051b      	lsls	r3, r3, #20
 8004470:	b183      	cbz	r3, 8004494 <_dtoa_r+0x91c>
 8004472:	f04f 0801 	mov.w	r8, #1
 8004476:	9b06      	ldr	r3, [sp, #24]
 8004478:	3301      	adds	r3, #1
 800447a:	9306      	str	r3, [sp, #24]
 800447c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447e:	3301      	adds	r3, #1
 8004480:	9309      	str	r3, [sp, #36]	; 0x24
 8004482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f af6a 	bne.w	800435e <_dtoa_r+0x7e6>
 800448a:	2001      	movs	r0, #1
 800448c:	e76f      	b.n	800436e <_dtoa_r+0x7f6>
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	e7f6      	b.n	8004482 <_dtoa_r+0x90a>
 8004494:	4698      	mov	r8, r3
 8004496:	e7f4      	b.n	8004482 <_dtoa_r+0x90a>
 8004498:	f43f af7d 	beq.w	8004396 <_dtoa_r+0x81e>
 800449c:	4618      	mov	r0, r3
 800449e:	301c      	adds	r0, #28
 80044a0:	e772      	b.n	8004388 <_dtoa_r+0x810>
 80044a2:	9b08      	ldr	r3, [sp, #32]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	dc36      	bgt.n	8004516 <_dtoa_r+0x99e>
 80044a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	dd33      	ble.n	8004516 <_dtoa_r+0x99e>
 80044ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044b2:	f1b9 0f00 	cmp.w	r9, #0
 80044b6:	d10d      	bne.n	80044d4 <_dtoa_r+0x95c>
 80044b8:	4621      	mov	r1, r4
 80044ba:	464b      	mov	r3, r9
 80044bc:	2205      	movs	r2, #5
 80044be:	4628      	mov	r0, r5
 80044c0:	f000 f9d2 	bl	8004868 <__multadd>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4658      	mov	r0, fp
 80044ca:	f000 fbe9 	bl	8004ca0 <__mcmp>
 80044ce:	2800      	cmp	r0, #0
 80044d0:	f73f adb8 	bgt.w	8004044 <_dtoa_r+0x4cc>
 80044d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044d6:	9f03      	ldr	r7, [sp, #12]
 80044d8:	ea6f 0a03 	mvn.w	sl, r3
 80044dc:	f04f 0800 	mov.w	r8, #0
 80044e0:	4621      	mov	r1, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f99e 	bl	8004824 <_Bfree>
 80044e8:	2e00      	cmp	r6, #0
 80044ea:	f43f aea7 	beq.w	800423c <_dtoa_r+0x6c4>
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	d005      	beq.n	8004500 <_dtoa_r+0x988>
 80044f4:	45b0      	cmp	r8, r6
 80044f6:	d003      	beq.n	8004500 <_dtoa_r+0x988>
 80044f8:	4641      	mov	r1, r8
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f992 	bl	8004824 <_Bfree>
 8004500:	4631      	mov	r1, r6
 8004502:	4628      	mov	r0, r5
 8004504:	f000 f98e 	bl	8004824 <_Bfree>
 8004508:	e698      	b.n	800423c <_dtoa_r+0x6c4>
 800450a:	2400      	movs	r4, #0
 800450c:	4626      	mov	r6, r4
 800450e:	e7e1      	b.n	80044d4 <_dtoa_r+0x95c>
 8004510:	46c2      	mov	sl, r8
 8004512:	4626      	mov	r6, r4
 8004514:	e596      	b.n	8004044 <_dtoa_r+0x4cc>
 8004516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004518:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80fd 	beq.w	800471c <_dtoa_r+0xba4>
 8004522:	2f00      	cmp	r7, #0
 8004524:	dd05      	ble.n	8004532 <_dtoa_r+0x9ba>
 8004526:	4631      	mov	r1, r6
 8004528:	463a      	mov	r2, r7
 800452a:	4628      	mov	r0, r5
 800452c:	f000 fb48 	bl	8004bc0 <__lshift>
 8004530:	4606      	mov	r6, r0
 8004532:	f1b8 0f00 	cmp.w	r8, #0
 8004536:	d05c      	beq.n	80045f2 <_dtoa_r+0xa7a>
 8004538:	4628      	mov	r0, r5
 800453a:	6871      	ldr	r1, [r6, #4]
 800453c:	f000 f932 	bl	80047a4 <_Balloc>
 8004540:	4607      	mov	r7, r0
 8004542:	b928      	cbnz	r0, 8004550 <_dtoa_r+0x9d8>
 8004544:	4602      	mov	r2, r0
 8004546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800454a:	4b7f      	ldr	r3, [pc, #508]	; (8004748 <_dtoa_r+0xbd0>)
 800454c:	f7ff bb28 	b.w	8003ba0 <_dtoa_r+0x28>
 8004550:	6932      	ldr	r2, [r6, #16]
 8004552:	f106 010c 	add.w	r1, r6, #12
 8004556:	3202      	adds	r2, #2
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	300c      	adds	r0, #12
 800455c:	f000 f914 	bl	8004788 <memcpy>
 8004560:	2201      	movs	r2, #1
 8004562:	4639      	mov	r1, r7
 8004564:	4628      	mov	r0, r5
 8004566:	f000 fb2b 	bl	8004bc0 <__lshift>
 800456a:	46b0      	mov	r8, r6
 800456c:	4606      	mov	r6, r0
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	9308      	str	r3, [sp, #32]
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	444b      	add	r3, r9
 8004578:	930a      	str	r3, [sp, #40]	; 0x28
 800457a:	9b04      	ldr	r3, [sp, #16]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	9b08      	ldr	r3, [sp, #32]
 8004584:	4621      	mov	r1, r4
 8004586:	3b01      	subs	r3, #1
 8004588:	4658      	mov	r0, fp
 800458a:	9304      	str	r3, [sp, #16]
 800458c:	f7ff fa68 	bl	8003a60 <quorem>
 8004590:	4603      	mov	r3, r0
 8004592:	4641      	mov	r1, r8
 8004594:	3330      	adds	r3, #48	; 0x30
 8004596:	9006      	str	r0, [sp, #24]
 8004598:	4658      	mov	r0, fp
 800459a:	930b      	str	r3, [sp, #44]	; 0x2c
 800459c:	f000 fb80 	bl	8004ca0 <__mcmp>
 80045a0:	4632      	mov	r2, r6
 80045a2:	4681      	mov	r9, r0
 80045a4:	4621      	mov	r1, r4
 80045a6:	4628      	mov	r0, r5
 80045a8:	f000 fb96 	bl	8004cd8 <__mdiff>
 80045ac:	68c2      	ldr	r2, [r0, #12]
 80045ae:	4607      	mov	r7, r0
 80045b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045b2:	bb02      	cbnz	r2, 80045f6 <_dtoa_r+0xa7e>
 80045b4:	4601      	mov	r1, r0
 80045b6:	4658      	mov	r0, fp
 80045b8:	f000 fb72 	bl	8004ca0 <__mcmp>
 80045bc:	4602      	mov	r2, r0
 80045be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045c0:	4639      	mov	r1, r7
 80045c2:	4628      	mov	r0, r5
 80045c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80045c8:	f000 f92c 	bl	8004824 <_Bfree>
 80045cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045d0:	9f08      	ldr	r7, [sp, #32]
 80045d2:	ea43 0102 	orr.w	r1, r3, r2
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	430b      	orrs	r3, r1
 80045da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045dc:	d10d      	bne.n	80045fa <_dtoa_r+0xa82>
 80045de:	2b39      	cmp	r3, #57	; 0x39
 80045e0:	d029      	beq.n	8004636 <_dtoa_r+0xabe>
 80045e2:	f1b9 0f00 	cmp.w	r9, #0
 80045e6:	dd01      	ble.n	80045ec <_dtoa_r+0xa74>
 80045e8:	9b06      	ldr	r3, [sp, #24]
 80045ea:	3331      	adds	r3, #49	; 0x31
 80045ec:	9a04      	ldr	r2, [sp, #16]
 80045ee:	7013      	strb	r3, [r2, #0]
 80045f0:	e776      	b.n	80044e0 <_dtoa_r+0x968>
 80045f2:	4630      	mov	r0, r6
 80045f4:	e7b9      	b.n	800456a <_dtoa_r+0x9f2>
 80045f6:	2201      	movs	r2, #1
 80045f8:	e7e2      	b.n	80045c0 <_dtoa_r+0xa48>
 80045fa:	f1b9 0f00 	cmp.w	r9, #0
 80045fe:	db06      	blt.n	800460e <_dtoa_r+0xa96>
 8004600:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004602:	ea41 0909 	orr.w	r9, r1, r9
 8004606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004608:	ea59 0101 	orrs.w	r1, r9, r1
 800460c:	d120      	bne.n	8004650 <_dtoa_r+0xad8>
 800460e:	2a00      	cmp	r2, #0
 8004610:	ddec      	ble.n	80045ec <_dtoa_r+0xa74>
 8004612:	4659      	mov	r1, fp
 8004614:	2201      	movs	r2, #1
 8004616:	4628      	mov	r0, r5
 8004618:	9308      	str	r3, [sp, #32]
 800461a:	f000 fad1 	bl	8004bc0 <__lshift>
 800461e:	4621      	mov	r1, r4
 8004620:	4683      	mov	fp, r0
 8004622:	f000 fb3d 	bl	8004ca0 <__mcmp>
 8004626:	2800      	cmp	r0, #0
 8004628:	9b08      	ldr	r3, [sp, #32]
 800462a:	dc02      	bgt.n	8004632 <_dtoa_r+0xaba>
 800462c:	d1de      	bne.n	80045ec <_dtoa_r+0xa74>
 800462e:	07da      	lsls	r2, r3, #31
 8004630:	d5dc      	bpl.n	80045ec <_dtoa_r+0xa74>
 8004632:	2b39      	cmp	r3, #57	; 0x39
 8004634:	d1d8      	bne.n	80045e8 <_dtoa_r+0xa70>
 8004636:	2339      	movs	r3, #57	; 0x39
 8004638:	9a04      	ldr	r2, [sp, #16]
 800463a:	7013      	strb	r3, [r2, #0]
 800463c:	463b      	mov	r3, r7
 800463e:	461f      	mov	r7, r3
 8004640:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004644:	3b01      	subs	r3, #1
 8004646:	2a39      	cmp	r2, #57	; 0x39
 8004648:	d050      	beq.n	80046ec <_dtoa_r+0xb74>
 800464a:	3201      	adds	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e747      	b.n	80044e0 <_dtoa_r+0x968>
 8004650:	2a00      	cmp	r2, #0
 8004652:	dd03      	ble.n	800465c <_dtoa_r+0xae4>
 8004654:	2b39      	cmp	r3, #57	; 0x39
 8004656:	d0ee      	beq.n	8004636 <_dtoa_r+0xabe>
 8004658:	3301      	adds	r3, #1
 800465a:	e7c7      	b.n	80045ec <_dtoa_r+0xa74>
 800465c:	9a08      	ldr	r2, [sp, #32]
 800465e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004660:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004664:	428a      	cmp	r2, r1
 8004666:	d02a      	beq.n	80046be <_dtoa_r+0xb46>
 8004668:	4659      	mov	r1, fp
 800466a:	2300      	movs	r3, #0
 800466c:	220a      	movs	r2, #10
 800466e:	4628      	mov	r0, r5
 8004670:	f000 f8fa 	bl	8004868 <__multadd>
 8004674:	45b0      	cmp	r8, r6
 8004676:	4683      	mov	fp, r0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	f04f 020a 	mov.w	r2, #10
 8004680:	4641      	mov	r1, r8
 8004682:	4628      	mov	r0, r5
 8004684:	d107      	bne.n	8004696 <_dtoa_r+0xb1e>
 8004686:	f000 f8ef 	bl	8004868 <__multadd>
 800468a:	4680      	mov	r8, r0
 800468c:	4606      	mov	r6, r0
 800468e:	9b08      	ldr	r3, [sp, #32]
 8004690:	3301      	adds	r3, #1
 8004692:	9308      	str	r3, [sp, #32]
 8004694:	e775      	b.n	8004582 <_dtoa_r+0xa0a>
 8004696:	f000 f8e7 	bl	8004868 <__multadd>
 800469a:	4631      	mov	r1, r6
 800469c:	4680      	mov	r8, r0
 800469e:	2300      	movs	r3, #0
 80046a0:	220a      	movs	r2, #10
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 f8e0 	bl	8004868 <__multadd>
 80046a8:	4606      	mov	r6, r0
 80046aa:	e7f0      	b.n	800468e <_dtoa_r+0xb16>
 80046ac:	f1b9 0f00 	cmp.w	r9, #0
 80046b0:	bfcc      	ite	gt
 80046b2:	464f      	movgt	r7, r9
 80046b4:	2701      	movle	r7, #1
 80046b6:	f04f 0800 	mov.w	r8, #0
 80046ba:	9a03      	ldr	r2, [sp, #12]
 80046bc:	4417      	add	r7, r2
 80046be:	4659      	mov	r1, fp
 80046c0:	2201      	movs	r2, #1
 80046c2:	4628      	mov	r0, r5
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	f000 fa7b 	bl	8004bc0 <__lshift>
 80046ca:	4621      	mov	r1, r4
 80046cc:	4683      	mov	fp, r0
 80046ce:	f000 fae7 	bl	8004ca0 <__mcmp>
 80046d2:	2800      	cmp	r0, #0
 80046d4:	dcb2      	bgt.n	800463c <_dtoa_r+0xac4>
 80046d6:	d102      	bne.n	80046de <_dtoa_r+0xb66>
 80046d8:	9b08      	ldr	r3, [sp, #32]
 80046da:	07db      	lsls	r3, r3, #31
 80046dc:	d4ae      	bmi.n	800463c <_dtoa_r+0xac4>
 80046de:	463b      	mov	r3, r7
 80046e0:	461f      	mov	r7, r3
 80046e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046e6:	2a30      	cmp	r2, #48	; 0x30
 80046e8:	d0fa      	beq.n	80046e0 <_dtoa_r+0xb68>
 80046ea:	e6f9      	b.n	80044e0 <_dtoa_r+0x968>
 80046ec:	9a03      	ldr	r2, [sp, #12]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d1a5      	bne.n	800463e <_dtoa_r+0xac6>
 80046f2:	2331      	movs	r3, #49	; 0x31
 80046f4:	f10a 0a01 	add.w	sl, sl, #1
 80046f8:	e779      	b.n	80045ee <_dtoa_r+0xa76>
 80046fa:	4b14      	ldr	r3, [pc, #80]	; (800474c <_dtoa_r+0xbd4>)
 80046fc:	f7ff baa8 	b.w	8003c50 <_dtoa_r+0xd8>
 8004700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004702:	2b00      	cmp	r3, #0
 8004704:	f47f aa81 	bne.w	8003c0a <_dtoa_r+0x92>
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <_dtoa_r+0xbd8>)
 800470a:	f7ff baa1 	b.w	8003c50 <_dtoa_r+0xd8>
 800470e:	f1b9 0f00 	cmp.w	r9, #0
 8004712:	dc03      	bgt.n	800471c <_dtoa_r+0xba4>
 8004714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004716:	2b02      	cmp	r3, #2
 8004718:	f73f aecb 	bgt.w	80044b2 <_dtoa_r+0x93a>
 800471c:	9f03      	ldr	r7, [sp, #12]
 800471e:	4621      	mov	r1, r4
 8004720:	4658      	mov	r0, fp
 8004722:	f7ff f99d 	bl	8003a60 <quorem>
 8004726:	9a03      	ldr	r2, [sp, #12]
 8004728:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800472c:	f807 3b01 	strb.w	r3, [r7], #1
 8004730:	1aba      	subs	r2, r7, r2
 8004732:	4591      	cmp	r9, r2
 8004734:	ddba      	ble.n	80046ac <_dtoa_r+0xb34>
 8004736:	4659      	mov	r1, fp
 8004738:	2300      	movs	r3, #0
 800473a:	220a      	movs	r2, #10
 800473c:	4628      	mov	r0, r5
 800473e:	f000 f893 	bl	8004868 <__multadd>
 8004742:	4683      	mov	fp, r0
 8004744:	e7eb      	b.n	800471e <_dtoa_r+0xba6>
 8004746:	bf00      	nop
 8004748:	08006053 	.word	0x08006053
 800474c:	08005fb0 	.word	0x08005fb0
 8004750:	08005fd4 	.word	0x08005fd4

08004754 <_localeconv_r>:
 8004754:	4800      	ldr	r0, [pc, #0]	; (8004758 <_localeconv_r+0x4>)
 8004756:	4770      	bx	lr
 8004758:	20000160 	.word	0x20000160

0800475c <malloc>:
 800475c:	4b02      	ldr	r3, [pc, #8]	; (8004768 <malloc+0xc>)
 800475e:	4601      	mov	r1, r0
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	f000 bc1d 	b.w	8004fa0 <_malloc_r>
 8004766:	bf00      	nop
 8004768:	2000000c 	.word	0x2000000c

0800476c <memchr>:
 800476c:	4603      	mov	r3, r0
 800476e:	b510      	push	{r4, lr}
 8004770:	b2c9      	uxtb	r1, r1
 8004772:	4402      	add	r2, r0
 8004774:	4293      	cmp	r3, r2
 8004776:	4618      	mov	r0, r3
 8004778:	d101      	bne.n	800477e <memchr+0x12>
 800477a:	2000      	movs	r0, #0
 800477c:	e003      	b.n	8004786 <memchr+0x1a>
 800477e:	7804      	ldrb	r4, [r0, #0]
 8004780:	3301      	adds	r3, #1
 8004782:	428c      	cmp	r4, r1
 8004784:	d1f6      	bne.n	8004774 <memchr+0x8>
 8004786:	bd10      	pop	{r4, pc}

08004788 <memcpy>:
 8004788:	440a      	add	r2, r1
 800478a:	4291      	cmp	r1, r2
 800478c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004790:	d100      	bne.n	8004794 <memcpy+0xc>
 8004792:	4770      	bx	lr
 8004794:	b510      	push	{r4, lr}
 8004796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479a:	4291      	cmp	r1, r2
 800479c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a0:	d1f9      	bne.n	8004796 <memcpy+0xe>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <_Balloc>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047a8:	4604      	mov	r4, r0
 80047aa:	460d      	mov	r5, r1
 80047ac:	b976      	cbnz	r6, 80047cc <_Balloc+0x28>
 80047ae:	2010      	movs	r0, #16
 80047b0:	f7ff ffd4 	bl	800475c <malloc>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6260      	str	r0, [r4, #36]	; 0x24
 80047b8:	b920      	cbnz	r0, 80047c4 <_Balloc+0x20>
 80047ba:	2166      	movs	r1, #102	; 0x66
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <_Balloc+0x78>)
 80047be:	4818      	ldr	r0, [pc, #96]	; (8004820 <_Balloc+0x7c>)
 80047c0:	f000 fdce 	bl	8005360 <__assert_func>
 80047c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80047c8:	6006      	str	r6, [r0, #0]
 80047ca:	60c6      	str	r6, [r0, #12]
 80047cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80047ce:	68f3      	ldr	r3, [r6, #12]
 80047d0:	b183      	cbz	r3, 80047f4 <_Balloc+0x50>
 80047d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80047da:	b9b8      	cbnz	r0, 800480c <_Balloc+0x68>
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f605 	lsl.w	r6, r1, r5
 80047e2:	1d72      	adds	r2, r6, #5
 80047e4:	4620      	mov	r0, r4
 80047e6:	0092      	lsls	r2, r2, #2
 80047e8:	f000 fb5e 	bl	8004ea8 <_calloc_r>
 80047ec:	b160      	cbz	r0, 8004808 <_Balloc+0x64>
 80047ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80047f2:	e00e      	b.n	8004812 <_Balloc+0x6e>
 80047f4:	2221      	movs	r2, #33	; 0x21
 80047f6:	2104      	movs	r1, #4
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 fb55 	bl	8004ea8 <_calloc_r>
 80047fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004800:	60f0      	str	r0, [r6, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <_Balloc+0x2e>
 8004808:	2000      	movs	r0, #0
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	6802      	ldr	r2, [r0, #0]
 800480e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004812:	2300      	movs	r3, #0
 8004814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004818:	e7f7      	b.n	800480a <_Balloc+0x66>
 800481a:	bf00      	nop
 800481c:	08005fe1 	.word	0x08005fe1
 8004820:	08006064 	.word	0x08006064

08004824 <_Bfree>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004828:	4605      	mov	r5, r0
 800482a:	460c      	mov	r4, r1
 800482c:	b976      	cbnz	r6, 800484c <_Bfree+0x28>
 800482e:	2010      	movs	r0, #16
 8004830:	f7ff ff94 	bl	800475c <malloc>
 8004834:	4602      	mov	r2, r0
 8004836:	6268      	str	r0, [r5, #36]	; 0x24
 8004838:	b920      	cbnz	r0, 8004844 <_Bfree+0x20>
 800483a:	218a      	movs	r1, #138	; 0x8a
 800483c:	4b08      	ldr	r3, [pc, #32]	; (8004860 <_Bfree+0x3c>)
 800483e:	4809      	ldr	r0, [pc, #36]	; (8004864 <_Bfree+0x40>)
 8004840:	f000 fd8e 	bl	8005360 <__assert_func>
 8004844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004848:	6006      	str	r6, [r0, #0]
 800484a:	60c6      	str	r6, [r0, #12]
 800484c:	b13c      	cbz	r4, 800485e <_Bfree+0x3a>
 800484e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004850:	6862      	ldr	r2, [r4, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004858:	6021      	str	r1, [r4, #0]
 800485a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800485e:	bd70      	pop	{r4, r5, r6, pc}
 8004860:	08005fe1 	.word	0x08005fe1
 8004864:	08006064 	.word	0x08006064

08004868 <__multadd>:
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	461e      	mov	r6, r3
 8004872:	2000      	movs	r0, #0
 8004874:	690d      	ldr	r5, [r1, #16]
 8004876:	f101 0c14 	add.w	ip, r1, #20
 800487a:	f8dc 3000 	ldr.w	r3, [ip]
 800487e:	3001      	adds	r0, #1
 8004880:	b299      	uxth	r1, r3
 8004882:	fb02 6101 	mla	r1, r2, r1, r6
 8004886:	0c1e      	lsrs	r6, r3, #16
 8004888:	0c0b      	lsrs	r3, r1, #16
 800488a:	fb02 3306 	mla	r3, r2, r6, r3
 800488e:	b289      	uxth	r1, r1
 8004890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004894:	4285      	cmp	r5, r0
 8004896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800489a:	f84c 1b04 	str.w	r1, [ip], #4
 800489e:	dcec      	bgt.n	800487a <__multadd+0x12>
 80048a0:	b30e      	cbz	r6, 80048e6 <__multadd+0x7e>
 80048a2:	68a3      	ldr	r3, [r4, #8]
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dc19      	bgt.n	80048dc <__multadd+0x74>
 80048a8:	6861      	ldr	r1, [r4, #4]
 80048aa:	4638      	mov	r0, r7
 80048ac:	3101      	adds	r1, #1
 80048ae:	f7ff ff79 	bl	80047a4 <_Balloc>
 80048b2:	4680      	mov	r8, r0
 80048b4:	b928      	cbnz	r0, 80048c2 <__multadd+0x5a>
 80048b6:	4602      	mov	r2, r0
 80048b8:	21b5      	movs	r1, #181	; 0xb5
 80048ba:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <__multadd+0x84>)
 80048bc:	480c      	ldr	r0, [pc, #48]	; (80048f0 <__multadd+0x88>)
 80048be:	f000 fd4f 	bl	8005360 <__assert_func>
 80048c2:	6922      	ldr	r2, [r4, #16]
 80048c4:	f104 010c 	add.w	r1, r4, #12
 80048c8:	3202      	adds	r2, #2
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	300c      	adds	r0, #12
 80048ce:	f7ff ff5b 	bl	8004788 <memcpy>
 80048d2:	4621      	mov	r1, r4
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ffa5 	bl	8004824 <_Bfree>
 80048da:	4644      	mov	r4, r8
 80048dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80048e0:	3501      	adds	r5, #1
 80048e2:	615e      	str	r6, [r3, #20]
 80048e4:	6125      	str	r5, [r4, #16]
 80048e6:	4620      	mov	r0, r4
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	08006053 	.word	0x08006053
 80048f0:	08006064 	.word	0x08006064

080048f4 <__hi0bits>:
 80048f4:	0c02      	lsrs	r2, r0, #16
 80048f6:	0412      	lsls	r2, r2, #16
 80048f8:	4603      	mov	r3, r0
 80048fa:	b9ca      	cbnz	r2, 8004930 <__hi0bits+0x3c>
 80048fc:	0403      	lsls	r3, r0, #16
 80048fe:	2010      	movs	r0, #16
 8004900:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004904:	bf04      	itt	eq
 8004906:	021b      	lsleq	r3, r3, #8
 8004908:	3008      	addeq	r0, #8
 800490a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800490e:	bf04      	itt	eq
 8004910:	011b      	lsleq	r3, r3, #4
 8004912:	3004      	addeq	r0, #4
 8004914:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004918:	bf04      	itt	eq
 800491a:	009b      	lsleq	r3, r3, #2
 800491c:	3002      	addeq	r0, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	db05      	blt.n	800492e <__hi0bits+0x3a>
 8004922:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004926:	f100 0001 	add.w	r0, r0, #1
 800492a:	bf08      	it	eq
 800492c:	2020      	moveq	r0, #32
 800492e:	4770      	bx	lr
 8004930:	2000      	movs	r0, #0
 8004932:	e7e5      	b.n	8004900 <__hi0bits+0xc>

08004934 <__lo0bits>:
 8004934:	6803      	ldr	r3, [r0, #0]
 8004936:	4602      	mov	r2, r0
 8004938:	f013 0007 	ands.w	r0, r3, #7
 800493c:	d00b      	beq.n	8004956 <__lo0bits+0x22>
 800493e:	07d9      	lsls	r1, r3, #31
 8004940:	d421      	bmi.n	8004986 <__lo0bits+0x52>
 8004942:	0798      	lsls	r0, r3, #30
 8004944:	bf49      	itett	mi
 8004946:	085b      	lsrmi	r3, r3, #1
 8004948:	089b      	lsrpl	r3, r3, #2
 800494a:	2001      	movmi	r0, #1
 800494c:	6013      	strmi	r3, [r2, #0]
 800494e:	bf5c      	itt	pl
 8004950:	2002      	movpl	r0, #2
 8004952:	6013      	strpl	r3, [r2, #0]
 8004954:	4770      	bx	lr
 8004956:	b299      	uxth	r1, r3
 8004958:	b909      	cbnz	r1, 800495e <__lo0bits+0x2a>
 800495a:	2010      	movs	r0, #16
 800495c:	0c1b      	lsrs	r3, r3, #16
 800495e:	b2d9      	uxtb	r1, r3
 8004960:	b909      	cbnz	r1, 8004966 <__lo0bits+0x32>
 8004962:	3008      	adds	r0, #8
 8004964:	0a1b      	lsrs	r3, r3, #8
 8004966:	0719      	lsls	r1, r3, #28
 8004968:	bf04      	itt	eq
 800496a:	091b      	lsreq	r3, r3, #4
 800496c:	3004      	addeq	r0, #4
 800496e:	0799      	lsls	r1, r3, #30
 8004970:	bf04      	itt	eq
 8004972:	089b      	lsreq	r3, r3, #2
 8004974:	3002      	addeq	r0, #2
 8004976:	07d9      	lsls	r1, r3, #31
 8004978:	d403      	bmi.n	8004982 <__lo0bits+0x4e>
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	f100 0001 	add.w	r0, r0, #1
 8004980:	d003      	beq.n	800498a <__lo0bits+0x56>
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4770      	bx	lr
 8004986:	2000      	movs	r0, #0
 8004988:	4770      	bx	lr
 800498a:	2020      	movs	r0, #32
 800498c:	4770      	bx	lr
	...

08004990 <__i2b>:
 8004990:	b510      	push	{r4, lr}
 8004992:	460c      	mov	r4, r1
 8004994:	2101      	movs	r1, #1
 8004996:	f7ff ff05 	bl	80047a4 <_Balloc>
 800499a:	4602      	mov	r2, r0
 800499c:	b928      	cbnz	r0, 80049aa <__i2b+0x1a>
 800499e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049a2:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__i2b+0x24>)
 80049a4:	4804      	ldr	r0, [pc, #16]	; (80049b8 <__i2b+0x28>)
 80049a6:	f000 fcdb 	bl	8005360 <__assert_func>
 80049aa:	2301      	movs	r3, #1
 80049ac:	6144      	str	r4, [r0, #20]
 80049ae:	6103      	str	r3, [r0, #16]
 80049b0:	bd10      	pop	{r4, pc}
 80049b2:	bf00      	nop
 80049b4:	08006053 	.word	0x08006053
 80049b8:	08006064 	.word	0x08006064

080049bc <__multiply>:
 80049bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c0:	4691      	mov	r9, r2
 80049c2:	690a      	ldr	r2, [r1, #16]
 80049c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80049c8:	460c      	mov	r4, r1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bfbe      	ittt	lt
 80049ce:	460b      	movlt	r3, r1
 80049d0:	464c      	movlt	r4, r9
 80049d2:	4699      	movlt	r9, r3
 80049d4:	6927      	ldr	r7, [r4, #16]
 80049d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80049da:	68a3      	ldr	r3, [r4, #8]
 80049dc:	6861      	ldr	r1, [r4, #4]
 80049de:	eb07 060a 	add.w	r6, r7, sl
 80049e2:	42b3      	cmp	r3, r6
 80049e4:	b085      	sub	sp, #20
 80049e6:	bfb8      	it	lt
 80049e8:	3101      	addlt	r1, #1
 80049ea:	f7ff fedb 	bl	80047a4 <_Balloc>
 80049ee:	b930      	cbnz	r0, 80049fe <__multiply+0x42>
 80049f0:	4602      	mov	r2, r0
 80049f2:	f240 115d 	movw	r1, #349	; 0x15d
 80049f6:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <__multiply+0x148>)
 80049f8:	4843      	ldr	r0, [pc, #268]	; (8004b08 <__multiply+0x14c>)
 80049fa:	f000 fcb1 	bl	8005360 <__assert_func>
 80049fe:	f100 0514 	add.w	r5, r0, #20
 8004a02:	462b      	mov	r3, r5
 8004a04:	2200      	movs	r2, #0
 8004a06:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a0a:	4543      	cmp	r3, r8
 8004a0c:	d321      	bcc.n	8004a52 <__multiply+0x96>
 8004a0e:	f104 0314 	add.w	r3, r4, #20
 8004a12:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a16:	f109 0314 	add.w	r3, r9, #20
 8004a1a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004a1e:	9202      	str	r2, [sp, #8]
 8004a20:	1b3a      	subs	r2, r7, r4
 8004a22:	3a15      	subs	r2, #21
 8004a24:	f022 0203 	bic.w	r2, r2, #3
 8004a28:	3204      	adds	r2, #4
 8004a2a:	f104 0115 	add.w	r1, r4, #21
 8004a2e:	428f      	cmp	r7, r1
 8004a30:	bf38      	it	cc
 8004a32:	2204      	movcc	r2, #4
 8004a34:	9201      	str	r2, [sp, #4]
 8004a36:	9a02      	ldr	r2, [sp, #8]
 8004a38:	9303      	str	r3, [sp, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d80c      	bhi.n	8004a58 <__multiply+0x9c>
 8004a3e:	2e00      	cmp	r6, #0
 8004a40:	dd03      	ble.n	8004a4a <__multiply+0x8e>
 8004a42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d059      	beq.n	8004afe <__multiply+0x142>
 8004a4a:	6106      	str	r6, [r0, #16]
 8004a4c:	b005      	add	sp, #20
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	f843 2b04 	str.w	r2, [r3], #4
 8004a56:	e7d8      	b.n	8004a0a <__multiply+0x4e>
 8004a58:	f8b3 a000 	ldrh.w	sl, [r3]
 8004a5c:	f1ba 0f00 	cmp.w	sl, #0
 8004a60:	d023      	beq.n	8004aaa <__multiply+0xee>
 8004a62:	46a9      	mov	r9, r5
 8004a64:	f04f 0c00 	mov.w	ip, #0
 8004a68:	f104 0e14 	add.w	lr, r4, #20
 8004a6c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004a70:	f8d9 1000 	ldr.w	r1, [r9]
 8004a74:	fa1f fb82 	uxth.w	fp, r2
 8004a78:	b289      	uxth	r1, r1
 8004a7a:	fb0a 110b 	mla	r1, sl, fp, r1
 8004a7e:	4461      	add	r1, ip
 8004a80:	f8d9 c000 	ldr.w	ip, [r9]
 8004a84:	0c12      	lsrs	r2, r2, #16
 8004a86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004a8a:	fb0a c202 	mla	r2, sl, r2, ip
 8004a8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004a92:	b289      	uxth	r1, r1
 8004a94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a98:	4577      	cmp	r7, lr
 8004a9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004a9e:	f849 1b04 	str.w	r1, [r9], #4
 8004aa2:	d8e3      	bhi.n	8004a6c <__multiply+0xb0>
 8004aa4:	9a01      	ldr	r2, [sp, #4]
 8004aa6:	f845 c002 	str.w	ip, [r5, r2]
 8004aaa:	9a03      	ldr	r2, [sp, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	d020      	beq.n	8004afa <__multiply+0x13e>
 8004ab8:	46ae      	mov	lr, r5
 8004aba:	f04f 0a00 	mov.w	sl, #0
 8004abe:	6829      	ldr	r1, [r5, #0]
 8004ac0:	f104 0c14 	add.w	ip, r4, #20
 8004ac4:	f8bc b000 	ldrh.w	fp, [ip]
 8004ac8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004acc:	b289      	uxth	r1, r1
 8004ace:	fb09 220b 	mla	r2, r9, fp, r2
 8004ad2:	4492      	add	sl, r2
 8004ad4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004ad8:	f84e 1b04 	str.w	r1, [lr], #4
 8004adc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004ae0:	f8be 1000 	ldrh.w	r1, [lr]
 8004ae4:	0c12      	lsrs	r2, r2, #16
 8004ae6:	fb09 1102 	mla	r1, r9, r2, r1
 8004aea:	4567      	cmp	r7, ip
 8004aec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004af0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004af4:	d8e6      	bhi.n	8004ac4 <__multiply+0x108>
 8004af6:	9a01      	ldr	r2, [sp, #4]
 8004af8:	50a9      	str	r1, [r5, r2]
 8004afa:	3504      	adds	r5, #4
 8004afc:	e79b      	b.n	8004a36 <__multiply+0x7a>
 8004afe:	3e01      	subs	r6, #1
 8004b00:	e79d      	b.n	8004a3e <__multiply+0x82>
 8004b02:	bf00      	nop
 8004b04:	08006053 	.word	0x08006053
 8004b08:	08006064 	.word	0x08006064

08004b0c <__pow5mult>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4615      	mov	r5, r2
 8004b12:	f012 0203 	ands.w	r2, r2, #3
 8004b16:	4606      	mov	r6, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	d007      	beq.n	8004b2c <__pow5mult+0x20>
 8004b1c:	4c25      	ldr	r4, [pc, #148]	; (8004bb4 <__pow5mult+0xa8>)
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	2300      	movs	r3, #0
 8004b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b26:	f7ff fe9f 	bl	8004868 <__multadd>
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	10ad      	asrs	r5, r5, #2
 8004b2e:	d03d      	beq.n	8004bac <__pow5mult+0xa0>
 8004b30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b32:	b97c      	cbnz	r4, 8004b54 <__pow5mult+0x48>
 8004b34:	2010      	movs	r0, #16
 8004b36:	f7ff fe11 	bl	800475c <malloc>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6270      	str	r0, [r6, #36]	; 0x24
 8004b3e:	b928      	cbnz	r0, 8004b4c <__pow5mult+0x40>
 8004b40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <__pow5mult+0xac>)
 8004b46:	481d      	ldr	r0, [pc, #116]	; (8004bbc <__pow5mult+0xb0>)
 8004b48:	f000 fc0a 	bl	8005360 <__assert_func>
 8004b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b50:	6004      	str	r4, [r0, #0]
 8004b52:	60c4      	str	r4, [r0, #12]
 8004b54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b5c:	b94c      	cbnz	r4, 8004b72 <__pow5mult+0x66>
 8004b5e:	f240 2171 	movw	r1, #625	; 0x271
 8004b62:	4630      	mov	r0, r6
 8004b64:	f7ff ff14 	bl	8004990 <__i2b>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004b70:	6003      	str	r3, [r0, #0]
 8004b72:	f04f 0900 	mov.w	r9, #0
 8004b76:	07eb      	lsls	r3, r5, #31
 8004b78:	d50a      	bpl.n	8004b90 <__pow5mult+0x84>
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f7ff ff1c 	bl	80049bc <__multiply>
 8004b84:	4680      	mov	r8, r0
 8004b86:	4639      	mov	r1, r7
 8004b88:	4630      	mov	r0, r6
 8004b8a:	f7ff fe4b 	bl	8004824 <_Bfree>
 8004b8e:	4647      	mov	r7, r8
 8004b90:	106d      	asrs	r5, r5, #1
 8004b92:	d00b      	beq.n	8004bac <__pow5mult+0xa0>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	b938      	cbnz	r0, 8004ba8 <__pow5mult+0x9c>
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	f7ff ff0d 	bl	80049bc <__multiply>
 8004ba2:	6020      	str	r0, [r4, #0]
 8004ba4:	f8c0 9000 	str.w	r9, [r0]
 8004ba8:	4604      	mov	r4, r0
 8004baa:	e7e4      	b.n	8004b76 <__pow5mult+0x6a>
 8004bac:	4638      	mov	r0, r7
 8004bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bb2:	bf00      	nop
 8004bb4:	080061b0 	.word	0x080061b0
 8004bb8:	08005fe1 	.word	0x08005fe1
 8004bbc:	08006064 	.word	0x08006064

08004bc0 <__lshift>:
 8004bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	4607      	mov	r7, r0
 8004bc8:	4691      	mov	r9, r2
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	6849      	ldr	r1, [r1, #4]
 8004bce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004bd2:	68a3      	ldr	r3, [r4, #8]
 8004bd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bd8:	f108 0601 	add.w	r6, r8, #1
 8004bdc:	42b3      	cmp	r3, r6
 8004bde:	db0b      	blt.n	8004bf8 <__lshift+0x38>
 8004be0:	4638      	mov	r0, r7
 8004be2:	f7ff fddf 	bl	80047a4 <_Balloc>
 8004be6:	4605      	mov	r5, r0
 8004be8:	b948      	cbnz	r0, 8004bfe <__lshift+0x3e>
 8004bea:	4602      	mov	r2, r0
 8004bec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004bf0:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <__lshift+0xd8>)
 8004bf2:	482a      	ldr	r0, [pc, #168]	; (8004c9c <__lshift+0xdc>)
 8004bf4:	f000 fbb4 	bl	8005360 <__assert_func>
 8004bf8:	3101      	adds	r1, #1
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	e7ee      	b.n	8004bdc <__lshift+0x1c>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f100 0114 	add.w	r1, r0, #20
 8004c04:	f100 0210 	add.w	r2, r0, #16
 8004c08:	4618      	mov	r0, r3
 8004c0a:	4553      	cmp	r3, sl
 8004c0c:	db37      	blt.n	8004c7e <__lshift+0xbe>
 8004c0e:	6920      	ldr	r0, [r4, #16]
 8004c10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c14:	f104 0314 	add.w	r3, r4, #20
 8004c18:	f019 091f 	ands.w	r9, r9, #31
 8004c1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c24:	d02f      	beq.n	8004c86 <__lshift+0xc6>
 8004c26:	468a      	mov	sl, r1
 8004c28:	f04f 0c00 	mov.w	ip, #0
 8004c2c:	f1c9 0e20 	rsb	lr, r9, #32
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	fa02 f209 	lsl.w	r2, r2, r9
 8004c36:	ea42 020c 	orr.w	r2, r2, ip
 8004c3a:	f84a 2b04 	str.w	r2, [sl], #4
 8004c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c42:	4298      	cmp	r0, r3
 8004c44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004c48:	d8f2      	bhi.n	8004c30 <__lshift+0x70>
 8004c4a:	1b03      	subs	r3, r0, r4
 8004c4c:	3b15      	subs	r3, #21
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	3304      	adds	r3, #4
 8004c54:	f104 0215 	add.w	r2, r4, #21
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	bf38      	it	cc
 8004c5c:	2304      	movcc	r3, #4
 8004c5e:	f841 c003 	str.w	ip, [r1, r3]
 8004c62:	f1bc 0f00 	cmp.w	ip, #0
 8004c66:	d001      	beq.n	8004c6c <__lshift+0xac>
 8004c68:	f108 0602 	add.w	r6, r8, #2
 8004c6c:	3e01      	subs	r6, #1
 8004c6e:	4638      	mov	r0, r7
 8004c70:	4621      	mov	r1, r4
 8004c72:	612e      	str	r6, [r5, #16]
 8004c74:	f7ff fdd6 	bl	8004824 <_Bfree>
 8004c78:	4628      	mov	r0, r5
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004c82:	3301      	adds	r3, #1
 8004c84:	e7c1      	b.n	8004c0a <__lshift+0x4a>
 8004c86:	3904      	subs	r1, #4
 8004c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c92:	d8f9      	bhi.n	8004c88 <__lshift+0xc8>
 8004c94:	e7ea      	b.n	8004c6c <__lshift+0xac>
 8004c96:	bf00      	nop
 8004c98:	08006053 	.word	0x08006053
 8004c9c:	08006064 	.word	0x08006064

08004ca0 <__mcmp>:
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	690a      	ldr	r2, [r1, #16]
 8004ca4:	6900      	ldr	r0, [r0, #16]
 8004ca6:	b530      	push	{r4, r5, lr}
 8004ca8:	1a80      	subs	r0, r0, r2
 8004caa:	d10d      	bne.n	8004cc8 <__mcmp+0x28>
 8004cac:	3314      	adds	r3, #20
 8004cae:	3114      	adds	r1, #20
 8004cb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004cb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004cb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004cbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cc0:	4295      	cmp	r5, r2
 8004cc2:	d002      	beq.n	8004cca <__mcmp+0x2a>
 8004cc4:	d304      	bcc.n	8004cd0 <__mcmp+0x30>
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	bd30      	pop	{r4, r5, pc}
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	d3f4      	bcc.n	8004cb8 <__mcmp+0x18>
 8004cce:	e7fb      	b.n	8004cc8 <__mcmp+0x28>
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	e7f8      	b.n	8004cc8 <__mcmp+0x28>
	...

08004cd8 <__mdiff>:
 8004cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cdc:	460d      	mov	r5, r1
 8004cde:	4607      	mov	r7, r0
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	f7ff ffdb 	bl	8004ca0 <__mcmp>
 8004cea:	1e06      	subs	r6, r0, #0
 8004cec:	d111      	bne.n	8004d12 <__mdiff+0x3a>
 8004cee:	4631      	mov	r1, r6
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f7ff fd57 	bl	80047a4 <_Balloc>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	b928      	cbnz	r0, 8004d06 <__mdiff+0x2e>
 8004cfa:	f240 2132 	movw	r1, #562	; 0x232
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <__mdiff+0x110>)
 8004d00:	483a      	ldr	r0, [pc, #232]	; (8004dec <__mdiff+0x114>)
 8004d02:	f000 fb2d 	bl	8005360 <__assert_func>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d12:	bfa4      	itt	ge
 8004d14:	4623      	movge	r3, r4
 8004d16:	462c      	movge	r4, r5
 8004d18:	4638      	mov	r0, r7
 8004d1a:	6861      	ldr	r1, [r4, #4]
 8004d1c:	bfa6      	itte	ge
 8004d1e:	461d      	movge	r5, r3
 8004d20:	2600      	movge	r6, #0
 8004d22:	2601      	movlt	r6, #1
 8004d24:	f7ff fd3e 	bl	80047a4 <_Balloc>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	b918      	cbnz	r0, 8004d34 <__mdiff+0x5c>
 8004d2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004d30:	4b2d      	ldr	r3, [pc, #180]	; (8004de8 <__mdiff+0x110>)
 8004d32:	e7e5      	b.n	8004d00 <__mdiff+0x28>
 8004d34:	f102 0814 	add.w	r8, r2, #20
 8004d38:	46c2      	mov	sl, r8
 8004d3a:	f04f 0c00 	mov.w	ip, #0
 8004d3e:	6927      	ldr	r7, [r4, #16]
 8004d40:	60c6      	str	r6, [r0, #12]
 8004d42:	692e      	ldr	r6, [r5, #16]
 8004d44:	f104 0014 	add.w	r0, r4, #20
 8004d48:	f105 0914 	add.w	r9, r5, #20
 8004d4c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004d50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004d54:	3410      	adds	r4, #16
 8004d56:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004d5a:	f859 3b04 	ldr.w	r3, [r9], #4
 8004d5e:	fa1f f18b 	uxth.w	r1, fp
 8004d62:	448c      	add	ip, r1
 8004d64:	b299      	uxth	r1, r3
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	ebac 0101 	sub.w	r1, ip, r1
 8004d6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004d70:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d74:	b289      	uxth	r1, r1
 8004d76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d7a:	454e      	cmp	r6, r9
 8004d7c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d80:	f84a 3b04 	str.w	r3, [sl], #4
 8004d84:	d8e7      	bhi.n	8004d56 <__mdiff+0x7e>
 8004d86:	1b73      	subs	r3, r6, r5
 8004d88:	3b15      	subs	r3, #21
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	3515      	adds	r5, #21
 8004d90:	3304      	adds	r3, #4
 8004d92:	42ae      	cmp	r6, r5
 8004d94:	bf38      	it	cc
 8004d96:	2304      	movcc	r3, #4
 8004d98:	4418      	add	r0, r3
 8004d9a:	4443      	add	r3, r8
 8004d9c:	461e      	mov	r6, r3
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4575      	cmp	r5, lr
 8004da2:	d30e      	bcc.n	8004dc2 <__mdiff+0xea>
 8004da4:	f10e 0103 	add.w	r1, lr, #3
 8004da8:	1a09      	subs	r1, r1, r0
 8004daa:	f021 0103 	bic.w	r1, r1, #3
 8004dae:	3803      	subs	r0, #3
 8004db0:	4586      	cmp	lr, r0
 8004db2:	bf38      	it	cc
 8004db4:	2100      	movcc	r1, #0
 8004db6:	4419      	add	r1, r3
 8004db8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004dbc:	b18b      	cbz	r3, 8004de2 <__mdiff+0x10a>
 8004dbe:	6117      	str	r7, [r2, #16]
 8004dc0:	e7a4      	b.n	8004d0c <__mdiff+0x34>
 8004dc2:	f855 8b04 	ldr.w	r8, [r5], #4
 8004dc6:	fa1f f188 	uxth.w	r1, r8
 8004dca:	4461      	add	r1, ip
 8004dcc:	140c      	asrs	r4, r1, #16
 8004dce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004dd2:	b289      	uxth	r1, r1
 8004dd4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004dd8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004ddc:	f846 1b04 	str.w	r1, [r6], #4
 8004de0:	e7de      	b.n	8004da0 <__mdiff+0xc8>
 8004de2:	3f01      	subs	r7, #1
 8004de4:	e7e8      	b.n	8004db8 <__mdiff+0xe0>
 8004de6:	bf00      	nop
 8004de8:	08006053 	.word	0x08006053
 8004dec:	08006064 	.word	0x08006064

08004df0 <__d2b>:
 8004df0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004df4:	2101      	movs	r1, #1
 8004df6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004dfa:	4690      	mov	r8, r2
 8004dfc:	461d      	mov	r5, r3
 8004dfe:	f7ff fcd1 	bl	80047a4 <_Balloc>
 8004e02:	4604      	mov	r4, r0
 8004e04:	b930      	cbnz	r0, 8004e14 <__d2b+0x24>
 8004e06:	4602      	mov	r2, r0
 8004e08:	f240 310a 	movw	r1, #778	; 0x30a
 8004e0c:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <__d2b+0xb0>)
 8004e0e:	4825      	ldr	r0, [pc, #148]	; (8004ea4 <__d2b+0xb4>)
 8004e10:	f000 faa6 	bl	8005360 <__assert_func>
 8004e14:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e18:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004e1c:	bb2d      	cbnz	r5, 8004e6a <__d2b+0x7a>
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	f1b8 0300 	subs.w	r3, r8, #0
 8004e24:	d026      	beq.n	8004e74 <__d2b+0x84>
 8004e26:	4668      	mov	r0, sp
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	f7ff fd83 	bl	8004934 <__lo0bits>
 8004e2e:	9900      	ldr	r1, [sp, #0]
 8004e30:	b1f0      	cbz	r0, 8004e70 <__d2b+0x80>
 8004e32:	9a01      	ldr	r2, [sp, #4]
 8004e34:	f1c0 0320 	rsb	r3, r0, #32
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	40c2      	lsrs	r2, r0
 8004e40:	6163      	str	r3, [r4, #20]
 8004e42:	9201      	str	r2, [sp, #4]
 8004e44:	9b01      	ldr	r3, [sp, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf14      	ite	ne
 8004e4a:	2102      	movne	r1, #2
 8004e4c:	2101      	moveq	r1, #1
 8004e4e:	61a3      	str	r3, [r4, #24]
 8004e50:	6121      	str	r1, [r4, #16]
 8004e52:	b1c5      	cbz	r5, 8004e86 <__d2b+0x96>
 8004e54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004e58:	4405      	add	r5, r0
 8004e5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e5e:	603d      	str	r5, [r7, #0]
 8004e60:	6030      	str	r0, [r6, #0]
 8004e62:	4620      	mov	r0, r4
 8004e64:	b002      	add	sp, #8
 8004e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e6e:	e7d6      	b.n	8004e1e <__d2b+0x2e>
 8004e70:	6161      	str	r1, [r4, #20]
 8004e72:	e7e7      	b.n	8004e44 <__d2b+0x54>
 8004e74:	a801      	add	r0, sp, #4
 8004e76:	f7ff fd5d 	bl	8004934 <__lo0bits>
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	6121      	str	r1, [r4, #16]
 8004e80:	6163      	str	r3, [r4, #20]
 8004e82:	3020      	adds	r0, #32
 8004e84:	e7e5      	b.n	8004e52 <__d2b+0x62>
 8004e86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004e8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e8e:	6038      	str	r0, [r7, #0]
 8004e90:	6918      	ldr	r0, [r3, #16]
 8004e92:	f7ff fd2f 	bl	80048f4 <__hi0bits>
 8004e96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004e9a:	6031      	str	r1, [r6, #0]
 8004e9c:	e7e1      	b.n	8004e62 <__d2b+0x72>
 8004e9e:	bf00      	nop
 8004ea0:	08006053 	.word	0x08006053
 8004ea4:	08006064 	.word	0x08006064

08004ea8 <_calloc_r>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	fba1 5402 	umull	r5, r4, r1, r2
 8004eae:	b934      	cbnz	r4, 8004ebe <_calloc_r+0x16>
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f000 f875 	bl	8004fa0 <_malloc_r>
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	b928      	cbnz	r0, 8004ec6 <_calloc_r+0x1e>
 8004eba:	4630      	mov	r0, r6
 8004ebc:	bd70      	pop	{r4, r5, r6, pc}
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	6002      	str	r2, [r0, #0]
 8004ec4:	e7f9      	b.n	8004eba <_calloc_r+0x12>
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	4621      	mov	r1, r4
 8004eca:	f7fe f941 	bl	8003150 <memset>
 8004ece:	e7f4      	b.n	8004eba <_calloc_r+0x12>

08004ed0 <_free_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d040      	beq.n	8004f5a <_free_r+0x8a>
 8004ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004edc:	1f0c      	subs	r4, r1, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bfb8      	it	lt
 8004ee2:	18e4      	addlt	r4, r4, r3
 8004ee4:	f000 fa98 	bl	8005418 <__malloc_lock>
 8004ee8:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <_free_r+0x8c>)
 8004eea:	6813      	ldr	r3, [r2, #0]
 8004eec:	b933      	cbnz	r3, 8004efc <_free_r+0x2c>
 8004eee:	6063      	str	r3, [r4, #4]
 8004ef0:	6014      	str	r4, [r2, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ef8:	f000 ba94 	b.w	8005424 <__malloc_unlock>
 8004efc:	42a3      	cmp	r3, r4
 8004efe:	d908      	bls.n	8004f12 <_free_r+0x42>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	1821      	adds	r1, r4, r0
 8004f04:	428b      	cmp	r3, r1
 8004f06:	bf01      	itttt	eq
 8004f08:	6819      	ldreq	r1, [r3, #0]
 8004f0a:	685b      	ldreq	r3, [r3, #4]
 8004f0c:	1809      	addeq	r1, r1, r0
 8004f0e:	6021      	streq	r1, [r4, #0]
 8004f10:	e7ed      	b.n	8004eee <_free_r+0x1e>
 8004f12:	461a      	mov	r2, r3
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	b10b      	cbz	r3, 8004f1c <_free_r+0x4c>
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	d9fa      	bls.n	8004f12 <_free_r+0x42>
 8004f1c:	6811      	ldr	r1, [r2, #0]
 8004f1e:	1850      	adds	r0, r2, r1
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d10b      	bne.n	8004f3c <_free_r+0x6c>
 8004f24:	6820      	ldr	r0, [r4, #0]
 8004f26:	4401      	add	r1, r0
 8004f28:	1850      	adds	r0, r2, r1
 8004f2a:	4283      	cmp	r3, r0
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	d1e0      	bne.n	8004ef2 <_free_r+0x22>
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4401      	add	r1, r0
 8004f36:	6011      	str	r1, [r2, #0]
 8004f38:	6053      	str	r3, [r2, #4]
 8004f3a:	e7da      	b.n	8004ef2 <_free_r+0x22>
 8004f3c:	d902      	bls.n	8004f44 <_free_r+0x74>
 8004f3e:	230c      	movs	r3, #12
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	e7d6      	b.n	8004ef2 <_free_r+0x22>
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	1821      	adds	r1, r4, r0
 8004f48:	428b      	cmp	r3, r1
 8004f4a:	bf01      	itttt	eq
 8004f4c:	6819      	ldreq	r1, [r3, #0]
 8004f4e:	685b      	ldreq	r3, [r3, #4]
 8004f50:	1809      	addeq	r1, r1, r0
 8004f52:	6021      	streq	r1, [r4, #0]
 8004f54:	6063      	str	r3, [r4, #4]
 8004f56:	6054      	str	r4, [r2, #4]
 8004f58:	e7cb      	b.n	8004ef2 <_free_r+0x22>
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	200002f0 	.word	0x200002f0

08004f60 <sbrk_aligned>:
 8004f60:	b570      	push	{r4, r5, r6, lr}
 8004f62:	4e0e      	ldr	r6, [pc, #56]	; (8004f9c <sbrk_aligned+0x3c>)
 8004f64:	460c      	mov	r4, r1
 8004f66:	6831      	ldr	r1, [r6, #0]
 8004f68:	4605      	mov	r5, r0
 8004f6a:	b911      	cbnz	r1, 8004f72 <sbrk_aligned+0x12>
 8004f6c:	f000 f9e8 	bl	8005340 <_sbrk_r>
 8004f70:	6030      	str	r0, [r6, #0]
 8004f72:	4621      	mov	r1, r4
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f9e3 	bl	8005340 <_sbrk_r>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d00a      	beq.n	8004f94 <sbrk_aligned+0x34>
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d007      	beq.n	8004f98 <sbrk_aligned+0x38>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f9d8 	bl	8005340 <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d101      	bne.n	8004f98 <sbrk_aligned+0x38>
 8004f94:	f04f 34ff 	mov.w	r4, #4294967295
 8004f98:	4620      	mov	r0, r4
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	200002f4 	.word	0x200002f4

08004fa0 <_malloc_r>:
 8004fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa4:	1ccd      	adds	r5, r1, #3
 8004fa6:	f025 0503 	bic.w	r5, r5, #3
 8004faa:	3508      	adds	r5, #8
 8004fac:	2d0c      	cmp	r5, #12
 8004fae:	bf38      	it	cc
 8004fb0:	250c      	movcc	r5, #12
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	db01      	blt.n	8004fbc <_malloc_r+0x1c>
 8004fb8:	42a9      	cmp	r1, r5
 8004fba:	d905      	bls.n	8004fc8 <_malloc_r+0x28>
 8004fbc:	230c      	movs	r3, #12
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc8:	4e2e      	ldr	r6, [pc, #184]	; (8005084 <_malloc_r+0xe4>)
 8004fca:	f000 fa25 	bl	8005418 <__malloc_lock>
 8004fce:	6833      	ldr	r3, [r6, #0]
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	bb34      	cbnz	r4, 8005022 <_malloc_r+0x82>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f7ff ffc2 	bl	8004f60 <sbrk_aligned>
 8004fdc:	1c43      	adds	r3, r0, #1
 8004fde:	4604      	mov	r4, r0
 8004fe0:	d14d      	bne.n	800507e <_malloc_r+0xde>
 8004fe2:	6834      	ldr	r4, [r6, #0]
 8004fe4:	4626      	mov	r6, r4
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d140      	bne.n	800506c <_malloc_r+0xcc>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	4631      	mov	r1, r6
 8004fee:	4638      	mov	r0, r7
 8004ff0:	eb04 0803 	add.w	r8, r4, r3
 8004ff4:	f000 f9a4 	bl	8005340 <_sbrk_r>
 8004ff8:	4580      	cmp	r8, r0
 8004ffa:	d13a      	bne.n	8005072 <_malloc_r+0xd2>
 8004ffc:	6821      	ldr	r1, [r4, #0]
 8004ffe:	3503      	adds	r5, #3
 8005000:	1a6d      	subs	r5, r5, r1
 8005002:	f025 0503 	bic.w	r5, r5, #3
 8005006:	3508      	adds	r5, #8
 8005008:	2d0c      	cmp	r5, #12
 800500a:	bf38      	it	cc
 800500c:	250c      	movcc	r5, #12
 800500e:	4638      	mov	r0, r7
 8005010:	4629      	mov	r1, r5
 8005012:	f7ff ffa5 	bl	8004f60 <sbrk_aligned>
 8005016:	3001      	adds	r0, #1
 8005018:	d02b      	beq.n	8005072 <_malloc_r+0xd2>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	442b      	add	r3, r5
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	e00e      	b.n	8005040 <_malloc_r+0xa0>
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	1b52      	subs	r2, r2, r5
 8005026:	d41e      	bmi.n	8005066 <_malloc_r+0xc6>
 8005028:	2a0b      	cmp	r2, #11
 800502a:	d916      	bls.n	800505a <_malloc_r+0xba>
 800502c:	1961      	adds	r1, r4, r5
 800502e:	42a3      	cmp	r3, r4
 8005030:	6025      	str	r5, [r4, #0]
 8005032:	bf18      	it	ne
 8005034:	6059      	strne	r1, [r3, #4]
 8005036:	6863      	ldr	r3, [r4, #4]
 8005038:	bf08      	it	eq
 800503a:	6031      	streq	r1, [r6, #0]
 800503c:	5162      	str	r2, [r4, r5]
 800503e:	604b      	str	r3, [r1, #4]
 8005040:	4638      	mov	r0, r7
 8005042:	f104 060b 	add.w	r6, r4, #11
 8005046:	f000 f9ed 	bl	8005424 <__malloc_unlock>
 800504a:	f026 0607 	bic.w	r6, r6, #7
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	1af2      	subs	r2, r6, r3
 8005052:	d0b6      	beq.n	8004fc2 <_malloc_r+0x22>
 8005054:	1b9b      	subs	r3, r3, r6
 8005056:	50a3      	str	r3, [r4, r2]
 8005058:	e7b3      	b.n	8004fc2 <_malloc_r+0x22>
 800505a:	6862      	ldr	r2, [r4, #4]
 800505c:	42a3      	cmp	r3, r4
 800505e:	bf0c      	ite	eq
 8005060:	6032      	streq	r2, [r6, #0]
 8005062:	605a      	strne	r2, [r3, #4]
 8005064:	e7ec      	b.n	8005040 <_malloc_r+0xa0>
 8005066:	4623      	mov	r3, r4
 8005068:	6864      	ldr	r4, [r4, #4]
 800506a:	e7b2      	b.n	8004fd2 <_malloc_r+0x32>
 800506c:	4634      	mov	r4, r6
 800506e:	6876      	ldr	r6, [r6, #4]
 8005070:	e7b9      	b.n	8004fe6 <_malloc_r+0x46>
 8005072:	230c      	movs	r3, #12
 8005074:	4638      	mov	r0, r7
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	f000 f9d4 	bl	8005424 <__malloc_unlock>
 800507c:	e7a1      	b.n	8004fc2 <_malloc_r+0x22>
 800507e:	6025      	str	r5, [r4, #0]
 8005080:	e7de      	b.n	8005040 <_malloc_r+0xa0>
 8005082:	bf00      	nop
 8005084:	200002f0 	.word	0x200002f0

08005088 <__ssputs_r>:
 8005088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	688e      	ldr	r6, [r1, #8]
 800508e:	4682      	mov	sl, r0
 8005090:	429e      	cmp	r6, r3
 8005092:	460c      	mov	r4, r1
 8005094:	4690      	mov	r8, r2
 8005096:	461f      	mov	r7, r3
 8005098:	d838      	bhi.n	800510c <__ssputs_r+0x84>
 800509a:	898a      	ldrh	r2, [r1, #12]
 800509c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050a0:	d032      	beq.n	8005108 <__ssputs_r+0x80>
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	6909      	ldr	r1, [r1, #16]
 80050a6:	3301      	adds	r3, #1
 80050a8:	eba5 0901 	sub.w	r9, r5, r1
 80050ac:	6965      	ldr	r5, [r4, #20]
 80050ae:	444b      	add	r3, r9
 80050b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050b8:	106d      	asrs	r5, r5, #1
 80050ba:	429d      	cmp	r5, r3
 80050bc:	bf38      	it	cc
 80050be:	461d      	movcc	r5, r3
 80050c0:	0553      	lsls	r3, r2, #21
 80050c2:	d531      	bpl.n	8005128 <__ssputs_r+0xa0>
 80050c4:	4629      	mov	r1, r5
 80050c6:	f7ff ff6b 	bl	8004fa0 <_malloc_r>
 80050ca:	4606      	mov	r6, r0
 80050cc:	b950      	cbnz	r0, 80050e4 <__ssputs_r+0x5c>
 80050ce:	230c      	movs	r3, #12
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	f8ca 3000 	str.w	r3, [sl]
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050de:	81a3      	strh	r3, [r4, #12]
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	464a      	mov	r2, r9
 80050e6:	6921      	ldr	r1, [r4, #16]
 80050e8:	f7ff fb4e 	bl	8004788 <memcpy>
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f6:	81a3      	strh	r3, [r4, #12]
 80050f8:	6126      	str	r6, [r4, #16]
 80050fa:	444e      	add	r6, r9
 80050fc:	6026      	str	r6, [r4, #0]
 80050fe:	463e      	mov	r6, r7
 8005100:	6165      	str	r5, [r4, #20]
 8005102:	eba5 0509 	sub.w	r5, r5, r9
 8005106:	60a5      	str	r5, [r4, #8]
 8005108:	42be      	cmp	r6, r7
 800510a:	d900      	bls.n	800510e <__ssputs_r+0x86>
 800510c:	463e      	mov	r6, r7
 800510e:	4632      	mov	r2, r6
 8005110:	4641      	mov	r1, r8
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	f000 f966 	bl	80053e4 <memmove>
 8005118:	68a3      	ldr	r3, [r4, #8]
 800511a:	2000      	movs	r0, #0
 800511c:	1b9b      	subs	r3, r3, r6
 800511e:	60a3      	str	r3, [r4, #8]
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	4433      	add	r3, r6
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	e7db      	b.n	80050e0 <__ssputs_r+0x58>
 8005128:	462a      	mov	r2, r5
 800512a:	f000 f981 	bl	8005430 <_realloc_r>
 800512e:	4606      	mov	r6, r0
 8005130:	2800      	cmp	r0, #0
 8005132:	d1e1      	bne.n	80050f8 <__ssputs_r+0x70>
 8005134:	4650      	mov	r0, sl
 8005136:	6921      	ldr	r1, [r4, #16]
 8005138:	f7ff feca 	bl	8004ed0 <_free_r>
 800513c:	e7c7      	b.n	80050ce <__ssputs_r+0x46>
	...

08005140 <_svfiprintf_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4698      	mov	r8, r3
 8005146:	898b      	ldrh	r3, [r1, #12]
 8005148:	4607      	mov	r7, r0
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	460d      	mov	r5, r1
 800514e:	4614      	mov	r4, r2
 8005150:	b09d      	sub	sp, #116	; 0x74
 8005152:	d50e      	bpl.n	8005172 <_svfiprintf_r+0x32>
 8005154:	690b      	ldr	r3, [r1, #16]
 8005156:	b963      	cbnz	r3, 8005172 <_svfiprintf_r+0x32>
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	f7ff ff21 	bl	8004fa0 <_malloc_r>
 800515e:	6028      	str	r0, [r5, #0]
 8005160:	6128      	str	r0, [r5, #16]
 8005162:	b920      	cbnz	r0, 800516e <_svfiprintf_r+0x2e>
 8005164:	230c      	movs	r3, #12
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e0d1      	b.n	8005312 <_svfiprintf_r+0x1d2>
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	616b      	str	r3, [r5, #20]
 8005172:	2300      	movs	r3, #0
 8005174:	9309      	str	r3, [sp, #36]	; 0x24
 8005176:	2320      	movs	r3, #32
 8005178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800517c:	2330      	movs	r3, #48	; 0x30
 800517e:	f04f 0901 	mov.w	r9, #1
 8005182:	f8cd 800c 	str.w	r8, [sp, #12]
 8005186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800532c <_svfiprintf_r+0x1ec>
 800518a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800518e:	4623      	mov	r3, r4
 8005190:	469a      	mov	sl, r3
 8005192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005196:	b10a      	cbz	r2, 800519c <_svfiprintf_r+0x5c>
 8005198:	2a25      	cmp	r2, #37	; 0x25
 800519a:	d1f9      	bne.n	8005190 <_svfiprintf_r+0x50>
 800519c:	ebba 0b04 	subs.w	fp, sl, r4
 80051a0:	d00b      	beq.n	80051ba <_svfiprintf_r+0x7a>
 80051a2:	465b      	mov	r3, fp
 80051a4:	4622      	mov	r2, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ff6d 	bl	8005088 <__ssputs_r>
 80051ae:	3001      	adds	r0, #1
 80051b0:	f000 80aa 	beq.w	8005308 <_svfiprintf_r+0x1c8>
 80051b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b6:	445a      	add	r2, fp
 80051b8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ba:	f89a 3000 	ldrb.w	r3, [sl]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a2 	beq.w	8005308 <_svfiprintf_r+0x1c8>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ce:	f10a 0a01 	add.w	sl, sl, #1
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	9307      	str	r3, [sp, #28]
 80051d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051da:	931a      	str	r3, [sp, #104]	; 0x68
 80051dc:	4654      	mov	r4, sl
 80051de:	2205      	movs	r2, #5
 80051e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e4:	4851      	ldr	r0, [pc, #324]	; (800532c <_svfiprintf_r+0x1ec>)
 80051e6:	f7ff fac1 	bl	800476c <memchr>
 80051ea:	9a04      	ldr	r2, [sp, #16]
 80051ec:	b9d8      	cbnz	r0, 8005226 <_svfiprintf_r+0xe6>
 80051ee:	06d0      	lsls	r0, r2, #27
 80051f0:	bf44      	itt	mi
 80051f2:	2320      	movmi	r3, #32
 80051f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f8:	0711      	lsls	r1, r2, #28
 80051fa:	bf44      	itt	mi
 80051fc:	232b      	movmi	r3, #43	; 0x2b
 80051fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005202:	f89a 3000 	ldrb.w	r3, [sl]
 8005206:	2b2a      	cmp	r3, #42	; 0x2a
 8005208:	d015      	beq.n	8005236 <_svfiprintf_r+0xf6>
 800520a:	4654      	mov	r4, sl
 800520c:	2000      	movs	r0, #0
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	9a07      	ldr	r2, [sp, #28]
 8005214:	4621      	mov	r1, r4
 8005216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800521a:	3b30      	subs	r3, #48	; 0x30
 800521c:	2b09      	cmp	r3, #9
 800521e:	d94e      	bls.n	80052be <_svfiprintf_r+0x17e>
 8005220:	b1b0      	cbz	r0, 8005250 <_svfiprintf_r+0x110>
 8005222:	9207      	str	r2, [sp, #28]
 8005224:	e014      	b.n	8005250 <_svfiprintf_r+0x110>
 8005226:	eba0 0308 	sub.w	r3, r0, r8
 800522a:	fa09 f303 	lsl.w	r3, r9, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	46a2      	mov	sl, r4
 8005232:	9304      	str	r3, [sp, #16]
 8005234:	e7d2      	b.n	80051dc <_svfiprintf_r+0x9c>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	1d19      	adds	r1, r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbb      	ittet	lt
 8005242:	425b      	neglt	r3, r3
 8005244:	f042 0202 	orrlt.w	r2, r2, #2
 8005248:	9307      	strge	r3, [sp, #28]
 800524a:	9307      	strlt	r3, [sp, #28]
 800524c:	bfb8      	it	lt
 800524e:	9204      	strlt	r2, [sp, #16]
 8005250:	7823      	ldrb	r3, [r4, #0]
 8005252:	2b2e      	cmp	r3, #46	; 0x2e
 8005254:	d10c      	bne.n	8005270 <_svfiprintf_r+0x130>
 8005256:	7863      	ldrb	r3, [r4, #1]
 8005258:	2b2a      	cmp	r3, #42	; 0x2a
 800525a:	d135      	bne.n	80052c8 <_svfiprintf_r+0x188>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3402      	adds	r4, #2
 8005260:	1d1a      	adds	r2, r3, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	9203      	str	r2, [sp, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	bfb8      	it	lt
 800526a:	f04f 33ff 	movlt.w	r3, #4294967295
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005330 <_svfiprintf_r+0x1f0>
 8005274:	2203      	movs	r2, #3
 8005276:	4650      	mov	r0, sl
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	f7ff fa77 	bl	800476c <memchr>
 800527e:	b140      	cbz	r0, 8005292 <_svfiprintf_r+0x152>
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	eba0 000a 	sub.w	r0, r0, sl
 8005286:	fa03 f000 	lsl.w	r0, r3, r0
 800528a:	9b04      	ldr	r3, [sp, #16]
 800528c:	3401      	adds	r4, #1
 800528e:	4303      	orrs	r3, r0
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005296:	2206      	movs	r2, #6
 8005298:	4826      	ldr	r0, [pc, #152]	; (8005334 <_svfiprintf_r+0x1f4>)
 800529a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529e:	f7ff fa65 	bl	800476c <memchr>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d038      	beq.n	8005318 <_svfiprintf_r+0x1d8>
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <_svfiprintf_r+0x1f8>)
 80052a8:	bb1b      	cbnz	r3, 80052f2 <_svfiprintf_r+0x1b2>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	3307      	adds	r3, #7
 80052ae:	f023 0307 	bic.w	r3, r3, #7
 80052b2:	3308      	adds	r3, #8
 80052b4:	9303      	str	r3, [sp, #12]
 80052b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b8:	4433      	add	r3, r6
 80052ba:	9309      	str	r3, [sp, #36]	; 0x24
 80052bc:	e767      	b.n	800518e <_svfiprintf_r+0x4e>
 80052be:	460c      	mov	r4, r1
 80052c0:	2001      	movs	r0, #1
 80052c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c6:	e7a5      	b.n	8005214 <_svfiprintf_r+0xd4>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f04f 0c0a 	mov.w	ip, #10
 80052ce:	4619      	mov	r1, r3
 80052d0:	3401      	adds	r4, #1
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	4620      	mov	r0, r4
 80052d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052da:	3a30      	subs	r2, #48	; 0x30
 80052dc:	2a09      	cmp	r2, #9
 80052de:	d903      	bls.n	80052e8 <_svfiprintf_r+0x1a8>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0c5      	beq.n	8005270 <_svfiprintf_r+0x130>
 80052e4:	9105      	str	r1, [sp, #20]
 80052e6:	e7c3      	b.n	8005270 <_svfiprintf_r+0x130>
 80052e8:	4604      	mov	r4, r0
 80052ea:	2301      	movs	r3, #1
 80052ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f0:	e7f0      	b.n	80052d4 <_svfiprintf_r+0x194>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4638      	mov	r0, r7
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <_svfiprintf_r+0x1fc>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	f7fd ffcd 	bl	800329c <_printf_float>
 8005302:	1c42      	adds	r2, r0, #1
 8005304:	4606      	mov	r6, r0
 8005306:	d1d6      	bne.n	80052b6 <_svfiprintf_r+0x176>
 8005308:	89ab      	ldrh	r3, [r5, #12]
 800530a:	065b      	lsls	r3, r3, #25
 800530c:	f53f af2c 	bmi.w	8005168 <_svfiprintf_r+0x28>
 8005310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005312:	b01d      	add	sp, #116	; 0x74
 8005314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	ab03      	add	r3, sp, #12
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	462a      	mov	r2, r5
 800531e:	4638      	mov	r0, r7
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <_svfiprintf_r+0x1fc>)
 8005322:	a904      	add	r1, sp, #16
 8005324:	f7fe fa56 	bl	80037d4 <_printf_i>
 8005328:	e7eb      	b.n	8005302 <_svfiprintf_r+0x1c2>
 800532a:	bf00      	nop
 800532c:	080061bc 	.word	0x080061bc
 8005330:	080061c2 	.word	0x080061c2
 8005334:	080061c6 	.word	0x080061c6
 8005338:	0800329d 	.word	0x0800329d
 800533c:	08005089 	.word	0x08005089

08005340 <_sbrk_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	2300      	movs	r3, #0
 8005344:	4d05      	ldr	r5, [pc, #20]	; (800535c <_sbrk_r+0x1c>)
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fd fe7e 	bl	800304c <_sbrk>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_sbrk_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_sbrk_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	200002f8 	.word	0x200002f8

08005360 <__assert_func>:
 8005360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005362:	4614      	mov	r4, r2
 8005364:	461a      	mov	r2, r3
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <__assert_func+0x2c>)
 8005368:	4605      	mov	r5, r0
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68d8      	ldr	r0, [r3, #12]
 800536e:	b14c      	cbz	r4, 8005384 <__assert_func+0x24>
 8005370:	4b07      	ldr	r3, [pc, #28]	; (8005390 <__assert_func+0x30>)
 8005372:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005376:	9100      	str	r1, [sp, #0]
 8005378:	462b      	mov	r3, r5
 800537a:	4906      	ldr	r1, [pc, #24]	; (8005394 <__assert_func+0x34>)
 800537c:	f000 f80e 	bl	800539c <fiprintf>
 8005380:	f000 faaa 	bl	80058d8 <abort>
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__assert_func+0x38>)
 8005386:	461c      	mov	r4, r3
 8005388:	e7f3      	b.n	8005372 <__assert_func+0x12>
 800538a:	bf00      	nop
 800538c:	2000000c 	.word	0x2000000c
 8005390:	080061cd 	.word	0x080061cd
 8005394:	080061da 	.word	0x080061da
 8005398:	08006208 	.word	0x08006208

0800539c <fiprintf>:
 800539c:	b40e      	push	{r1, r2, r3}
 800539e:	b503      	push	{r0, r1, lr}
 80053a0:	4601      	mov	r1, r0
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <fiprintf+0x20>)
 80053a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	f000 f895 	bl	80054dc <_vfiprintf_r>
 80053b2:	b002      	add	sp, #8
 80053b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053b8:	b003      	add	sp, #12
 80053ba:	4770      	bx	lr
 80053bc:	2000000c 	.word	0x2000000c

080053c0 <__ascii_mbtowc>:
 80053c0:	b082      	sub	sp, #8
 80053c2:	b901      	cbnz	r1, 80053c6 <__ascii_mbtowc+0x6>
 80053c4:	a901      	add	r1, sp, #4
 80053c6:	b142      	cbz	r2, 80053da <__ascii_mbtowc+0x1a>
 80053c8:	b14b      	cbz	r3, 80053de <__ascii_mbtowc+0x1e>
 80053ca:	7813      	ldrb	r3, [r2, #0]
 80053cc:	600b      	str	r3, [r1, #0]
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	1e10      	subs	r0, r2, #0
 80053d2:	bf18      	it	ne
 80053d4:	2001      	movne	r0, #1
 80053d6:	b002      	add	sp, #8
 80053d8:	4770      	bx	lr
 80053da:	4610      	mov	r0, r2
 80053dc:	e7fb      	b.n	80053d6 <__ascii_mbtowc+0x16>
 80053de:	f06f 0001 	mvn.w	r0, #1
 80053e2:	e7f8      	b.n	80053d6 <__ascii_mbtowc+0x16>

080053e4 <memmove>:
 80053e4:	4288      	cmp	r0, r1
 80053e6:	b510      	push	{r4, lr}
 80053e8:	eb01 0402 	add.w	r4, r1, r2
 80053ec:	d902      	bls.n	80053f4 <memmove+0x10>
 80053ee:	4284      	cmp	r4, r0
 80053f0:	4623      	mov	r3, r4
 80053f2:	d807      	bhi.n	8005404 <memmove+0x20>
 80053f4:	1e43      	subs	r3, r0, #1
 80053f6:	42a1      	cmp	r1, r4
 80053f8:	d008      	beq.n	800540c <memmove+0x28>
 80053fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005402:	e7f8      	b.n	80053f6 <memmove+0x12>
 8005404:	4601      	mov	r1, r0
 8005406:	4402      	add	r2, r0
 8005408:	428a      	cmp	r2, r1
 800540a:	d100      	bne.n	800540e <memmove+0x2a>
 800540c:	bd10      	pop	{r4, pc}
 800540e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005416:	e7f7      	b.n	8005408 <memmove+0x24>

08005418 <__malloc_lock>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__malloc_lock+0x8>)
 800541a:	f000 bc19 	b.w	8005c50 <__retarget_lock_acquire_recursive>
 800541e:	bf00      	nop
 8005420:	200002fc 	.word	0x200002fc

08005424 <__malloc_unlock>:
 8005424:	4801      	ldr	r0, [pc, #4]	; (800542c <__malloc_unlock+0x8>)
 8005426:	f000 bc14 	b.w	8005c52 <__retarget_lock_release_recursive>
 800542a:	bf00      	nop
 800542c:	200002fc 	.word	0x200002fc

08005430 <_realloc_r>:
 8005430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005434:	4680      	mov	r8, r0
 8005436:	4614      	mov	r4, r2
 8005438:	460e      	mov	r6, r1
 800543a:	b921      	cbnz	r1, 8005446 <_realloc_r+0x16>
 800543c:	4611      	mov	r1, r2
 800543e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005442:	f7ff bdad 	b.w	8004fa0 <_malloc_r>
 8005446:	b92a      	cbnz	r2, 8005454 <_realloc_r+0x24>
 8005448:	f7ff fd42 	bl	8004ed0 <_free_r>
 800544c:	4625      	mov	r5, r4
 800544e:	4628      	mov	r0, r5
 8005450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005454:	f000 fc64 	bl	8005d20 <_malloc_usable_size_r>
 8005458:	4284      	cmp	r4, r0
 800545a:	4607      	mov	r7, r0
 800545c:	d802      	bhi.n	8005464 <_realloc_r+0x34>
 800545e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005462:	d812      	bhi.n	800548a <_realloc_r+0x5a>
 8005464:	4621      	mov	r1, r4
 8005466:	4640      	mov	r0, r8
 8005468:	f7ff fd9a 	bl	8004fa0 <_malloc_r>
 800546c:	4605      	mov	r5, r0
 800546e:	2800      	cmp	r0, #0
 8005470:	d0ed      	beq.n	800544e <_realloc_r+0x1e>
 8005472:	42bc      	cmp	r4, r7
 8005474:	4622      	mov	r2, r4
 8005476:	4631      	mov	r1, r6
 8005478:	bf28      	it	cs
 800547a:	463a      	movcs	r2, r7
 800547c:	f7ff f984 	bl	8004788 <memcpy>
 8005480:	4631      	mov	r1, r6
 8005482:	4640      	mov	r0, r8
 8005484:	f7ff fd24 	bl	8004ed0 <_free_r>
 8005488:	e7e1      	b.n	800544e <_realloc_r+0x1e>
 800548a:	4635      	mov	r5, r6
 800548c:	e7df      	b.n	800544e <_realloc_r+0x1e>

0800548e <__sfputc_r>:
 800548e:	6893      	ldr	r3, [r2, #8]
 8005490:	b410      	push	{r4}
 8005492:	3b01      	subs	r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	6093      	str	r3, [r2, #8]
 8005498:	da07      	bge.n	80054aa <__sfputc_r+0x1c>
 800549a:	6994      	ldr	r4, [r2, #24]
 800549c:	42a3      	cmp	r3, r4
 800549e:	db01      	blt.n	80054a4 <__sfputc_r+0x16>
 80054a0:	290a      	cmp	r1, #10
 80054a2:	d102      	bne.n	80054aa <__sfputc_r+0x1c>
 80054a4:	bc10      	pop	{r4}
 80054a6:	f000 b949 	b.w	800573c <__swbuf_r>
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	1c58      	adds	r0, r3, #1
 80054ae:	6010      	str	r0, [r2, #0]
 80054b0:	7019      	strb	r1, [r3, #0]
 80054b2:	4608      	mov	r0, r1
 80054b4:	bc10      	pop	{r4}
 80054b6:	4770      	bx	lr

080054b8 <__sfputs_r>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	4606      	mov	r6, r0
 80054bc:	460f      	mov	r7, r1
 80054be:	4614      	mov	r4, r2
 80054c0:	18d5      	adds	r5, r2, r3
 80054c2:	42ac      	cmp	r4, r5
 80054c4:	d101      	bne.n	80054ca <__sfputs_r+0x12>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e007      	b.n	80054da <__sfputs_r+0x22>
 80054ca:	463a      	mov	r2, r7
 80054cc:	4630      	mov	r0, r6
 80054ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d2:	f7ff ffdc 	bl	800548e <__sfputc_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d1f3      	bne.n	80054c2 <__sfputs_r+0xa>
 80054da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080054dc <_vfiprintf_r>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	460d      	mov	r5, r1
 80054e2:	4614      	mov	r4, r2
 80054e4:	4698      	mov	r8, r3
 80054e6:	4606      	mov	r6, r0
 80054e8:	b09d      	sub	sp, #116	; 0x74
 80054ea:	b118      	cbz	r0, 80054f4 <_vfiprintf_r+0x18>
 80054ec:	6983      	ldr	r3, [r0, #24]
 80054ee:	b90b      	cbnz	r3, 80054f4 <_vfiprintf_r+0x18>
 80054f0:	f000 fb10 	bl	8005b14 <__sinit>
 80054f4:	4b89      	ldr	r3, [pc, #548]	; (800571c <_vfiprintf_r+0x240>)
 80054f6:	429d      	cmp	r5, r3
 80054f8:	d11b      	bne.n	8005532 <_vfiprintf_r+0x56>
 80054fa:	6875      	ldr	r5, [r6, #4]
 80054fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fe:	07d9      	lsls	r1, r3, #31
 8005500:	d405      	bmi.n	800550e <_vfiprintf_r+0x32>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	059a      	lsls	r2, r3, #22
 8005506:	d402      	bmi.n	800550e <_vfiprintf_r+0x32>
 8005508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550a:	f000 fba1 	bl	8005c50 <__retarget_lock_acquire_recursive>
 800550e:	89ab      	ldrh	r3, [r5, #12]
 8005510:	071b      	lsls	r3, r3, #28
 8005512:	d501      	bpl.n	8005518 <_vfiprintf_r+0x3c>
 8005514:	692b      	ldr	r3, [r5, #16]
 8005516:	b9eb      	cbnz	r3, 8005554 <_vfiprintf_r+0x78>
 8005518:	4629      	mov	r1, r5
 800551a:	4630      	mov	r0, r6
 800551c:	f000 f96e 	bl	80057fc <__swsetup_r>
 8005520:	b1c0      	cbz	r0, 8005554 <_vfiprintf_r+0x78>
 8005522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005524:	07dc      	lsls	r4, r3, #31
 8005526:	d50e      	bpl.n	8005546 <_vfiprintf_r+0x6a>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	b01d      	add	sp, #116	; 0x74
 800552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005532:	4b7b      	ldr	r3, [pc, #492]	; (8005720 <_vfiprintf_r+0x244>)
 8005534:	429d      	cmp	r5, r3
 8005536:	d101      	bne.n	800553c <_vfiprintf_r+0x60>
 8005538:	68b5      	ldr	r5, [r6, #8]
 800553a:	e7df      	b.n	80054fc <_vfiprintf_r+0x20>
 800553c:	4b79      	ldr	r3, [pc, #484]	; (8005724 <_vfiprintf_r+0x248>)
 800553e:	429d      	cmp	r5, r3
 8005540:	bf08      	it	eq
 8005542:	68f5      	ldreq	r5, [r6, #12]
 8005544:	e7da      	b.n	80054fc <_vfiprintf_r+0x20>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	0598      	lsls	r0, r3, #22
 800554a:	d4ed      	bmi.n	8005528 <_vfiprintf_r+0x4c>
 800554c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800554e:	f000 fb80 	bl	8005c52 <__retarget_lock_release_recursive>
 8005552:	e7e9      	b.n	8005528 <_vfiprintf_r+0x4c>
 8005554:	2300      	movs	r3, #0
 8005556:	9309      	str	r3, [sp, #36]	; 0x24
 8005558:	2320      	movs	r3, #32
 800555a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800555e:	2330      	movs	r3, #48	; 0x30
 8005560:	f04f 0901 	mov.w	r9, #1
 8005564:	f8cd 800c 	str.w	r8, [sp, #12]
 8005568:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005728 <_vfiprintf_r+0x24c>
 800556c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005570:	4623      	mov	r3, r4
 8005572:	469a      	mov	sl, r3
 8005574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005578:	b10a      	cbz	r2, 800557e <_vfiprintf_r+0xa2>
 800557a:	2a25      	cmp	r2, #37	; 0x25
 800557c:	d1f9      	bne.n	8005572 <_vfiprintf_r+0x96>
 800557e:	ebba 0b04 	subs.w	fp, sl, r4
 8005582:	d00b      	beq.n	800559c <_vfiprintf_r+0xc0>
 8005584:	465b      	mov	r3, fp
 8005586:	4622      	mov	r2, r4
 8005588:	4629      	mov	r1, r5
 800558a:	4630      	mov	r0, r6
 800558c:	f7ff ff94 	bl	80054b8 <__sfputs_r>
 8005590:	3001      	adds	r0, #1
 8005592:	f000 80aa 	beq.w	80056ea <_vfiprintf_r+0x20e>
 8005596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005598:	445a      	add	r2, fp
 800559a:	9209      	str	r2, [sp, #36]	; 0x24
 800559c:	f89a 3000 	ldrb.w	r3, [sl]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80a2 	beq.w	80056ea <_vfiprintf_r+0x20e>
 80055a6:	2300      	movs	r3, #0
 80055a8:	f04f 32ff 	mov.w	r2, #4294967295
 80055ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b0:	f10a 0a01 	add.w	sl, sl, #1
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055bc:	931a      	str	r3, [sp, #104]	; 0x68
 80055be:	4654      	mov	r4, sl
 80055c0:	2205      	movs	r2, #5
 80055c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c6:	4858      	ldr	r0, [pc, #352]	; (8005728 <_vfiprintf_r+0x24c>)
 80055c8:	f7ff f8d0 	bl	800476c <memchr>
 80055cc:	9a04      	ldr	r2, [sp, #16]
 80055ce:	b9d8      	cbnz	r0, 8005608 <_vfiprintf_r+0x12c>
 80055d0:	06d1      	lsls	r1, r2, #27
 80055d2:	bf44      	itt	mi
 80055d4:	2320      	movmi	r3, #32
 80055d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055da:	0713      	lsls	r3, r2, #28
 80055dc:	bf44      	itt	mi
 80055de:	232b      	movmi	r3, #43	; 0x2b
 80055e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e4:	f89a 3000 	ldrb.w	r3, [sl]
 80055e8:	2b2a      	cmp	r3, #42	; 0x2a
 80055ea:	d015      	beq.n	8005618 <_vfiprintf_r+0x13c>
 80055ec:	4654      	mov	r4, sl
 80055ee:	2000      	movs	r0, #0
 80055f0:	f04f 0c0a 	mov.w	ip, #10
 80055f4:	9a07      	ldr	r2, [sp, #28]
 80055f6:	4621      	mov	r1, r4
 80055f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055fc:	3b30      	subs	r3, #48	; 0x30
 80055fe:	2b09      	cmp	r3, #9
 8005600:	d94e      	bls.n	80056a0 <_vfiprintf_r+0x1c4>
 8005602:	b1b0      	cbz	r0, 8005632 <_vfiprintf_r+0x156>
 8005604:	9207      	str	r2, [sp, #28]
 8005606:	e014      	b.n	8005632 <_vfiprintf_r+0x156>
 8005608:	eba0 0308 	sub.w	r3, r0, r8
 800560c:	fa09 f303 	lsl.w	r3, r9, r3
 8005610:	4313      	orrs	r3, r2
 8005612:	46a2      	mov	sl, r4
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	e7d2      	b.n	80055be <_vfiprintf_r+0xe2>
 8005618:	9b03      	ldr	r3, [sp, #12]
 800561a:	1d19      	adds	r1, r3, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	9103      	str	r1, [sp, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	bfbb      	ittet	lt
 8005624:	425b      	neglt	r3, r3
 8005626:	f042 0202 	orrlt.w	r2, r2, #2
 800562a:	9307      	strge	r3, [sp, #28]
 800562c:	9307      	strlt	r3, [sp, #28]
 800562e:	bfb8      	it	lt
 8005630:	9204      	strlt	r2, [sp, #16]
 8005632:	7823      	ldrb	r3, [r4, #0]
 8005634:	2b2e      	cmp	r3, #46	; 0x2e
 8005636:	d10c      	bne.n	8005652 <_vfiprintf_r+0x176>
 8005638:	7863      	ldrb	r3, [r4, #1]
 800563a:	2b2a      	cmp	r3, #42	; 0x2a
 800563c:	d135      	bne.n	80056aa <_vfiprintf_r+0x1ce>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	3402      	adds	r4, #2
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	9203      	str	r2, [sp, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	bfb8      	it	lt
 800564c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005650:	9305      	str	r3, [sp, #20]
 8005652:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800572c <_vfiprintf_r+0x250>
 8005656:	2203      	movs	r2, #3
 8005658:	4650      	mov	r0, sl
 800565a:	7821      	ldrb	r1, [r4, #0]
 800565c:	f7ff f886 	bl	800476c <memchr>
 8005660:	b140      	cbz	r0, 8005674 <_vfiprintf_r+0x198>
 8005662:	2340      	movs	r3, #64	; 0x40
 8005664:	eba0 000a 	sub.w	r0, r0, sl
 8005668:	fa03 f000 	lsl.w	r0, r3, r0
 800566c:	9b04      	ldr	r3, [sp, #16]
 800566e:	3401      	adds	r4, #1
 8005670:	4303      	orrs	r3, r0
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005678:	2206      	movs	r2, #6
 800567a:	482d      	ldr	r0, [pc, #180]	; (8005730 <_vfiprintf_r+0x254>)
 800567c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005680:	f7ff f874 	bl	800476c <memchr>
 8005684:	2800      	cmp	r0, #0
 8005686:	d03f      	beq.n	8005708 <_vfiprintf_r+0x22c>
 8005688:	4b2a      	ldr	r3, [pc, #168]	; (8005734 <_vfiprintf_r+0x258>)
 800568a:	bb1b      	cbnz	r3, 80056d4 <_vfiprintf_r+0x1f8>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	3307      	adds	r3, #7
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	3308      	adds	r3, #8
 8005696:	9303      	str	r3, [sp, #12]
 8005698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569a:	443b      	add	r3, r7
 800569c:	9309      	str	r3, [sp, #36]	; 0x24
 800569e:	e767      	b.n	8005570 <_vfiprintf_r+0x94>
 80056a0:	460c      	mov	r4, r1
 80056a2:	2001      	movs	r0, #1
 80056a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a8:	e7a5      	b.n	80055f6 <_vfiprintf_r+0x11a>
 80056aa:	2300      	movs	r3, #0
 80056ac:	f04f 0c0a 	mov.w	ip, #10
 80056b0:	4619      	mov	r1, r3
 80056b2:	3401      	adds	r4, #1
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	4620      	mov	r0, r4
 80056b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056bc:	3a30      	subs	r2, #48	; 0x30
 80056be:	2a09      	cmp	r2, #9
 80056c0:	d903      	bls.n	80056ca <_vfiprintf_r+0x1ee>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c5      	beq.n	8005652 <_vfiprintf_r+0x176>
 80056c6:	9105      	str	r1, [sp, #20]
 80056c8:	e7c3      	b.n	8005652 <_vfiprintf_r+0x176>
 80056ca:	4604      	mov	r4, r0
 80056cc:	2301      	movs	r3, #1
 80056ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d2:	e7f0      	b.n	80056b6 <_vfiprintf_r+0x1da>
 80056d4:	ab03      	add	r3, sp, #12
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	462a      	mov	r2, r5
 80056da:	4630      	mov	r0, r6
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <_vfiprintf_r+0x25c>)
 80056de:	a904      	add	r1, sp, #16
 80056e0:	f7fd fddc 	bl	800329c <_printf_float>
 80056e4:	4607      	mov	r7, r0
 80056e6:	1c78      	adds	r0, r7, #1
 80056e8:	d1d6      	bne.n	8005698 <_vfiprintf_r+0x1bc>
 80056ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056ec:	07d9      	lsls	r1, r3, #31
 80056ee:	d405      	bmi.n	80056fc <_vfiprintf_r+0x220>
 80056f0:	89ab      	ldrh	r3, [r5, #12]
 80056f2:	059a      	lsls	r2, r3, #22
 80056f4:	d402      	bmi.n	80056fc <_vfiprintf_r+0x220>
 80056f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056f8:	f000 faab 	bl	8005c52 <__retarget_lock_release_recursive>
 80056fc:	89ab      	ldrh	r3, [r5, #12]
 80056fe:	065b      	lsls	r3, r3, #25
 8005700:	f53f af12 	bmi.w	8005528 <_vfiprintf_r+0x4c>
 8005704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005706:	e711      	b.n	800552c <_vfiprintf_r+0x50>
 8005708:	ab03      	add	r3, sp, #12
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	462a      	mov	r2, r5
 800570e:	4630      	mov	r0, r6
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <_vfiprintf_r+0x25c>)
 8005712:	a904      	add	r1, sp, #16
 8005714:	f7fe f85e 	bl	80037d4 <_printf_i>
 8005718:	e7e4      	b.n	80056e4 <_vfiprintf_r+0x208>
 800571a:	bf00      	nop
 800571c:	08006334 	.word	0x08006334
 8005720:	08006354 	.word	0x08006354
 8005724:	08006314 	.word	0x08006314
 8005728:	080061bc 	.word	0x080061bc
 800572c:	080061c2 	.word	0x080061c2
 8005730:	080061c6 	.word	0x080061c6
 8005734:	0800329d 	.word	0x0800329d
 8005738:	080054b9 	.word	0x080054b9

0800573c <__swbuf_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	4614      	mov	r4, r2
 8005742:	4605      	mov	r5, r0
 8005744:	b118      	cbz	r0, 800574e <__swbuf_r+0x12>
 8005746:	6983      	ldr	r3, [r0, #24]
 8005748:	b90b      	cbnz	r3, 800574e <__swbuf_r+0x12>
 800574a:	f000 f9e3 	bl	8005b14 <__sinit>
 800574e:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <__swbuf_r+0x98>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d12b      	bne.n	80057ac <__swbuf_r+0x70>
 8005754:	686c      	ldr	r4, [r5, #4]
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	071a      	lsls	r2, r3, #28
 800575e:	d52f      	bpl.n	80057c0 <__swbuf_r+0x84>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	b36b      	cbz	r3, 80057c0 <__swbuf_r+0x84>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	b2f6      	uxtb	r6, r6
 800576a:	1ac0      	subs	r0, r0, r3
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	4637      	mov	r7, r6
 8005770:	4283      	cmp	r3, r0
 8005772:	dc04      	bgt.n	800577e <__swbuf_r+0x42>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f938 	bl	80059ec <_fflush_r>
 800577c:	bb30      	cbnz	r0, 80057cc <__swbuf_r+0x90>
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	3001      	adds	r0, #1
 8005782:	3b01      	subs	r3, #1
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	6022      	str	r2, [r4, #0]
 800578c:	701e      	strb	r6, [r3, #0]
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	4283      	cmp	r3, r0
 8005792:	d004      	beq.n	800579e <__swbuf_r+0x62>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	07db      	lsls	r3, r3, #31
 8005798:	d506      	bpl.n	80057a8 <__swbuf_r+0x6c>
 800579a:	2e0a      	cmp	r6, #10
 800579c:	d104      	bne.n	80057a8 <__swbuf_r+0x6c>
 800579e:	4621      	mov	r1, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	f000 f923 	bl	80059ec <_fflush_r>
 80057a6:	b988      	cbnz	r0, 80057cc <__swbuf_r+0x90>
 80057a8:	4638      	mov	r0, r7
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <__swbuf_r+0x9c>)
 80057ae:	429c      	cmp	r4, r3
 80057b0:	d101      	bne.n	80057b6 <__swbuf_r+0x7a>
 80057b2:	68ac      	ldr	r4, [r5, #8]
 80057b4:	e7cf      	b.n	8005756 <__swbuf_r+0x1a>
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <__swbuf_r+0xa0>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	bf08      	it	eq
 80057bc:	68ec      	ldreq	r4, [r5, #12]
 80057be:	e7ca      	b.n	8005756 <__swbuf_r+0x1a>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f81a 	bl	80057fc <__swsetup_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d0cb      	beq.n	8005764 <__swbuf_r+0x28>
 80057cc:	f04f 37ff 	mov.w	r7, #4294967295
 80057d0:	e7ea      	b.n	80057a8 <__swbuf_r+0x6c>
 80057d2:	bf00      	nop
 80057d4:	08006334 	.word	0x08006334
 80057d8:	08006354 	.word	0x08006354
 80057dc:	08006314 	.word	0x08006314

080057e0 <__ascii_wctomb>:
 80057e0:	4603      	mov	r3, r0
 80057e2:	4608      	mov	r0, r1
 80057e4:	b141      	cbz	r1, 80057f8 <__ascii_wctomb+0x18>
 80057e6:	2aff      	cmp	r2, #255	; 0xff
 80057e8:	d904      	bls.n	80057f4 <__ascii_wctomb+0x14>
 80057ea:	228a      	movs	r2, #138	; 0x8a
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	4770      	bx	lr
 80057f4:	2001      	movs	r0, #1
 80057f6:	700a      	strb	r2, [r1, #0]
 80057f8:	4770      	bx	lr
	...

080057fc <__swsetup_r>:
 80057fc:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <__swsetup_r+0xcc>)
 80057fe:	b570      	push	{r4, r5, r6, lr}
 8005800:	681d      	ldr	r5, [r3, #0]
 8005802:	4606      	mov	r6, r0
 8005804:	460c      	mov	r4, r1
 8005806:	b125      	cbz	r5, 8005812 <__swsetup_r+0x16>
 8005808:	69ab      	ldr	r3, [r5, #24]
 800580a:	b913      	cbnz	r3, 8005812 <__swsetup_r+0x16>
 800580c:	4628      	mov	r0, r5
 800580e:	f000 f981 	bl	8005b14 <__sinit>
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <__swsetup_r+0xd0>)
 8005814:	429c      	cmp	r4, r3
 8005816:	d10f      	bne.n	8005838 <__swsetup_r+0x3c>
 8005818:	686c      	ldr	r4, [r5, #4]
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005820:	0719      	lsls	r1, r3, #28
 8005822:	d42c      	bmi.n	800587e <__swsetup_r+0x82>
 8005824:	06dd      	lsls	r5, r3, #27
 8005826:	d411      	bmi.n	800584c <__swsetup_r+0x50>
 8005828:	2309      	movs	r3, #9
 800582a:	6033      	str	r3, [r6, #0]
 800582c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005830:	f04f 30ff 	mov.w	r0, #4294967295
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	e03e      	b.n	80058b6 <__swsetup_r+0xba>
 8005838:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <__swsetup_r+0xd4>)
 800583a:	429c      	cmp	r4, r3
 800583c:	d101      	bne.n	8005842 <__swsetup_r+0x46>
 800583e:	68ac      	ldr	r4, [r5, #8]
 8005840:	e7eb      	b.n	800581a <__swsetup_r+0x1e>
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <__swsetup_r+0xd8>)
 8005844:	429c      	cmp	r4, r3
 8005846:	bf08      	it	eq
 8005848:	68ec      	ldreq	r4, [r5, #12]
 800584a:	e7e6      	b.n	800581a <__swsetup_r+0x1e>
 800584c:	0758      	lsls	r0, r3, #29
 800584e:	d512      	bpl.n	8005876 <__swsetup_r+0x7a>
 8005850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005852:	b141      	cbz	r1, 8005866 <__swsetup_r+0x6a>
 8005854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005858:	4299      	cmp	r1, r3
 800585a:	d002      	beq.n	8005862 <__swsetup_r+0x66>
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff fb37 	bl	8004ed0 <_free_r>
 8005862:	2300      	movs	r3, #0
 8005864:	6363      	str	r3, [r4, #52]	; 0x34
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	2300      	movs	r3, #0
 8005870:	6063      	str	r3, [r4, #4]
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f043 0308 	orr.w	r3, r3, #8
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	b94b      	cbnz	r3, 8005896 <__swsetup_r+0x9a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800588c:	d003      	beq.n	8005896 <__swsetup_r+0x9a>
 800588e:	4621      	mov	r1, r4
 8005890:	4630      	mov	r0, r6
 8005892:	f000 fa05 	bl	8005ca0 <__smakebuf_r>
 8005896:	89a0      	ldrh	r0, [r4, #12]
 8005898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800589c:	f010 0301 	ands.w	r3, r0, #1
 80058a0:	d00a      	beq.n	80058b8 <__swsetup_r+0xbc>
 80058a2:	2300      	movs	r3, #0
 80058a4:	60a3      	str	r3, [r4, #8]
 80058a6:	6963      	ldr	r3, [r4, #20]
 80058a8:	425b      	negs	r3, r3
 80058aa:	61a3      	str	r3, [r4, #24]
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	b943      	cbnz	r3, 80058c2 <__swsetup_r+0xc6>
 80058b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058b4:	d1ba      	bne.n	800582c <__swsetup_r+0x30>
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	0781      	lsls	r1, r0, #30
 80058ba:	bf58      	it	pl
 80058bc:	6963      	ldrpl	r3, [r4, #20]
 80058be:	60a3      	str	r3, [r4, #8]
 80058c0:	e7f4      	b.n	80058ac <__swsetup_r+0xb0>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e7f7      	b.n	80058b6 <__swsetup_r+0xba>
 80058c6:	bf00      	nop
 80058c8:	2000000c 	.word	0x2000000c
 80058cc:	08006334 	.word	0x08006334
 80058d0:	08006354 	.word	0x08006354
 80058d4:	08006314 	.word	0x08006314

080058d8 <abort>:
 80058d8:	2006      	movs	r0, #6
 80058da:	b508      	push	{r3, lr}
 80058dc:	f000 fa50 	bl	8005d80 <raise>
 80058e0:	2001      	movs	r0, #1
 80058e2:	f7fd fb40 	bl	8002f66 <_exit>
	...

080058e8 <__sflush_r>:
 80058e8:	898a      	ldrh	r2, [r1, #12]
 80058ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ec:	4605      	mov	r5, r0
 80058ee:	0710      	lsls	r0, r2, #28
 80058f0:	460c      	mov	r4, r1
 80058f2:	d457      	bmi.n	80059a4 <__sflush_r+0xbc>
 80058f4:	684b      	ldr	r3, [r1, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	dc04      	bgt.n	8005904 <__sflush_r+0x1c>
 80058fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc01      	bgt.n	8005904 <__sflush_r+0x1c>
 8005900:	2000      	movs	r0, #0
 8005902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005906:	2e00      	cmp	r6, #0
 8005908:	d0fa      	beq.n	8005900 <__sflush_r+0x18>
 800590a:	2300      	movs	r3, #0
 800590c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005910:	682f      	ldr	r7, [r5, #0]
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	d032      	beq.n	800597c <__sflush_r+0x94>
 8005916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	075a      	lsls	r2, r3, #29
 800591c:	d505      	bpl.n	800592a <__sflush_r+0x42>
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	1ac0      	subs	r0, r0, r3
 8005922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005924:	b10b      	cbz	r3, 800592a <__sflush_r+0x42>
 8005926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005928:	1ac0      	subs	r0, r0, r3
 800592a:	2300      	movs	r3, #0
 800592c:	4602      	mov	r2, r0
 800592e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005930:	4628      	mov	r0, r5
 8005932:	6a21      	ldr	r1, [r4, #32]
 8005934:	47b0      	blx	r6
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	d106      	bne.n	800594a <__sflush_r+0x62>
 800593c:	6829      	ldr	r1, [r5, #0]
 800593e:	291d      	cmp	r1, #29
 8005940:	d82c      	bhi.n	800599c <__sflush_r+0xb4>
 8005942:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <__sflush_r+0x100>)
 8005944:	40ca      	lsrs	r2, r1
 8005946:	07d6      	lsls	r6, r2, #31
 8005948:	d528      	bpl.n	800599c <__sflush_r+0xb4>
 800594a:	2200      	movs	r2, #0
 800594c:	6062      	str	r2, [r4, #4]
 800594e:	6922      	ldr	r2, [r4, #16]
 8005950:	04d9      	lsls	r1, r3, #19
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	d504      	bpl.n	8005960 <__sflush_r+0x78>
 8005956:	1c42      	adds	r2, r0, #1
 8005958:	d101      	bne.n	800595e <__sflush_r+0x76>
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	b903      	cbnz	r3, 8005960 <__sflush_r+0x78>
 800595e:	6560      	str	r0, [r4, #84]	; 0x54
 8005960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005962:	602f      	str	r7, [r5, #0]
 8005964:	2900      	cmp	r1, #0
 8005966:	d0cb      	beq.n	8005900 <__sflush_r+0x18>
 8005968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800596c:	4299      	cmp	r1, r3
 800596e:	d002      	beq.n	8005976 <__sflush_r+0x8e>
 8005970:	4628      	mov	r0, r5
 8005972:	f7ff faad 	bl	8004ed0 <_free_r>
 8005976:	2000      	movs	r0, #0
 8005978:	6360      	str	r0, [r4, #52]	; 0x34
 800597a:	e7c2      	b.n	8005902 <__sflush_r+0x1a>
 800597c:	6a21      	ldr	r1, [r4, #32]
 800597e:	2301      	movs	r3, #1
 8005980:	4628      	mov	r0, r5
 8005982:	47b0      	blx	r6
 8005984:	1c41      	adds	r1, r0, #1
 8005986:	d1c7      	bne.n	8005918 <__sflush_r+0x30>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0c4      	beq.n	8005918 <__sflush_r+0x30>
 800598e:	2b1d      	cmp	r3, #29
 8005990:	d001      	beq.n	8005996 <__sflush_r+0xae>
 8005992:	2b16      	cmp	r3, #22
 8005994:	d101      	bne.n	800599a <__sflush_r+0xb2>
 8005996:	602f      	str	r7, [r5, #0]
 8005998:	e7b2      	b.n	8005900 <__sflush_r+0x18>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	e7ae      	b.n	8005902 <__sflush_r+0x1a>
 80059a4:	690f      	ldr	r7, [r1, #16]
 80059a6:	2f00      	cmp	r7, #0
 80059a8:	d0aa      	beq.n	8005900 <__sflush_r+0x18>
 80059aa:	0793      	lsls	r3, r2, #30
 80059ac:	bf18      	it	ne
 80059ae:	2300      	movne	r3, #0
 80059b0:	680e      	ldr	r6, [r1, #0]
 80059b2:	bf08      	it	eq
 80059b4:	694b      	ldreq	r3, [r1, #20]
 80059b6:	1bf6      	subs	r6, r6, r7
 80059b8:	600f      	str	r7, [r1, #0]
 80059ba:	608b      	str	r3, [r1, #8]
 80059bc:	2e00      	cmp	r6, #0
 80059be:	dd9f      	ble.n	8005900 <__sflush_r+0x18>
 80059c0:	4633      	mov	r3, r6
 80059c2:	463a      	mov	r2, r7
 80059c4:	4628      	mov	r0, r5
 80059c6:	6a21      	ldr	r1, [r4, #32]
 80059c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80059cc:	47e0      	blx	ip
 80059ce:	2800      	cmp	r0, #0
 80059d0:	dc06      	bgt.n	80059e0 <__sflush_r+0xf8>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295
 80059d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	e790      	b.n	8005902 <__sflush_r+0x1a>
 80059e0:	4407      	add	r7, r0
 80059e2:	1a36      	subs	r6, r6, r0
 80059e4:	e7ea      	b.n	80059bc <__sflush_r+0xd4>
 80059e6:	bf00      	nop
 80059e8:	20400001 	.word	0x20400001

080059ec <_fflush_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	690b      	ldr	r3, [r1, #16]
 80059f0:	4605      	mov	r5, r0
 80059f2:	460c      	mov	r4, r1
 80059f4:	b913      	cbnz	r3, 80059fc <_fflush_r+0x10>
 80059f6:	2500      	movs	r5, #0
 80059f8:	4628      	mov	r0, r5
 80059fa:	bd38      	pop	{r3, r4, r5, pc}
 80059fc:	b118      	cbz	r0, 8005a06 <_fflush_r+0x1a>
 80059fe:	6983      	ldr	r3, [r0, #24]
 8005a00:	b90b      	cbnz	r3, 8005a06 <_fflush_r+0x1a>
 8005a02:	f000 f887 	bl	8005b14 <__sinit>
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <_fflush_r+0x6c>)
 8005a08:	429c      	cmp	r4, r3
 8005a0a:	d11b      	bne.n	8005a44 <_fflush_r+0x58>
 8005a0c:	686c      	ldr	r4, [r5, #4]
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d0ef      	beq.n	80059f6 <_fflush_r+0xa>
 8005a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a18:	07d0      	lsls	r0, r2, #31
 8005a1a:	d404      	bmi.n	8005a26 <_fflush_r+0x3a>
 8005a1c:	0599      	lsls	r1, r3, #22
 8005a1e:	d402      	bmi.n	8005a26 <_fflush_r+0x3a>
 8005a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a22:	f000 f915 	bl	8005c50 <__retarget_lock_acquire_recursive>
 8005a26:	4628      	mov	r0, r5
 8005a28:	4621      	mov	r1, r4
 8005a2a:	f7ff ff5d 	bl	80058e8 <__sflush_r>
 8005a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a30:	4605      	mov	r5, r0
 8005a32:	07da      	lsls	r2, r3, #31
 8005a34:	d4e0      	bmi.n	80059f8 <_fflush_r+0xc>
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	059b      	lsls	r3, r3, #22
 8005a3a:	d4dd      	bmi.n	80059f8 <_fflush_r+0xc>
 8005a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a3e:	f000 f908 	bl	8005c52 <__retarget_lock_release_recursive>
 8005a42:	e7d9      	b.n	80059f8 <_fflush_r+0xc>
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <_fflush_r+0x70>)
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d101      	bne.n	8005a4e <_fflush_r+0x62>
 8005a4a:	68ac      	ldr	r4, [r5, #8]
 8005a4c:	e7df      	b.n	8005a0e <_fflush_r+0x22>
 8005a4e:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <_fflush_r+0x74>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	bf08      	it	eq
 8005a54:	68ec      	ldreq	r4, [r5, #12]
 8005a56:	e7da      	b.n	8005a0e <_fflush_r+0x22>
 8005a58:	08006334 	.word	0x08006334
 8005a5c:	08006354 	.word	0x08006354
 8005a60:	08006314 	.word	0x08006314

08005a64 <std>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a72:	6083      	str	r3, [r0, #8]
 8005a74:	8181      	strh	r1, [r0, #12]
 8005a76:	6643      	str	r3, [r0, #100]	; 0x64
 8005a78:	81c2      	strh	r2, [r0, #14]
 8005a7a:	6183      	str	r3, [r0, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2208      	movs	r2, #8
 8005a80:	305c      	adds	r0, #92	; 0x5c
 8005a82:	f7fd fb65 	bl	8003150 <memset>
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <std+0x38>)
 8005a88:	6224      	str	r4, [r4, #32]
 8005a8a:	6263      	str	r3, [r4, #36]	; 0x24
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <std+0x3c>)
 8005a8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <std+0x40>)
 8005a92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a94:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <std+0x44>)
 8005a96:	6323      	str	r3, [r4, #48]	; 0x30
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	bf00      	nop
 8005a9c:	08005db9 	.word	0x08005db9
 8005aa0:	08005ddb 	.word	0x08005ddb
 8005aa4:	08005e13 	.word	0x08005e13
 8005aa8:	08005e37 	.word	0x08005e37

08005aac <_cleanup_r>:
 8005aac:	4901      	ldr	r1, [pc, #4]	; (8005ab4 <_cleanup_r+0x8>)
 8005aae:	f000 b8af 	b.w	8005c10 <_fwalk_reent>
 8005ab2:	bf00      	nop
 8005ab4:	080059ed 	.word	0x080059ed

08005ab8 <__sfmoreglue>:
 8005ab8:	2268      	movs	r2, #104	; 0x68
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	1e4d      	subs	r5, r1, #1
 8005abe:	4355      	muls	r5, r2
 8005ac0:	460e      	mov	r6, r1
 8005ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ac6:	f7ff fa6b 	bl	8004fa0 <_malloc_r>
 8005aca:	4604      	mov	r4, r0
 8005acc:	b140      	cbz	r0, 8005ae0 <__sfmoreglue+0x28>
 8005ace:	2100      	movs	r1, #0
 8005ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	60a0      	str	r0, [r4, #8]
 8005ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005adc:	f7fd fb38 	bl	8003150 <memset>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}

08005ae4 <__sfp_lock_acquire>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__sfp_lock_acquire+0x8>)
 8005ae6:	f000 b8b3 	b.w	8005c50 <__retarget_lock_acquire_recursive>
 8005aea:	bf00      	nop
 8005aec:	200002fd 	.word	0x200002fd

08005af0 <__sfp_lock_release>:
 8005af0:	4801      	ldr	r0, [pc, #4]	; (8005af8 <__sfp_lock_release+0x8>)
 8005af2:	f000 b8ae 	b.w	8005c52 <__retarget_lock_release_recursive>
 8005af6:	bf00      	nop
 8005af8:	200002fd 	.word	0x200002fd

08005afc <__sinit_lock_acquire>:
 8005afc:	4801      	ldr	r0, [pc, #4]	; (8005b04 <__sinit_lock_acquire+0x8>)
 8005afe:	f000 b8a7 	b.w	8005c50 <__retarget_lock_acquire_recursive>
 8005b02:	bf00      	nop
 8005b04:	200002fe 	.word	0x200002fe

08005b08 <__sinit_lock_release>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__sinit_lock_release+0x8>)
 8005b0a:	f000 b8a2 	b.w	8005c52 <__retarget_lock_release_recursive>
 8005b0e:	bf00      	nop
 8005b10:	200002fe 	.word	0x200002fe

08005b14 <__sinit>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4604      	mov	r4, r0
 8005b18:	f7ff fff0 	bl	8005afc <__sinit_lock_acquire>
 8005b1c:	69a3      	ldr	r3, [r4, #24]
 8005b1e:	b11b      	cbz	r3, 8005b28 <__sinit+0x14>
 8005b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b24:	f7ff bff0 	b.w	8005b08 <__sinit_lock_release>
 8005b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <__sinit+0x68>)
 8005b30:	4a13      	ldr	r2, [pc, #76]	; (8005b80 <__sinit+0x6c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	bf08      	it	eq
 8005b3a:	2301      	moveq	r3, #1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	bf08      	it	eq
 8005b40:	61a3      	streq	r3, [r4, #24]
 8005b42:	f000 f81f 	bl	8005b84 <__sfp>
 8005b46:	6060      	str	r0, [r4, #4]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	f000 f81b 	bl	8005b84 <__sfp>
 8005b4e:	60a0      	str	r0, [r4, #8]
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 f817 	bl	8005b84 <__sfp>
 8005b56:	2200      	movs	r2, #0
 8005b58:	2104      	movs	r1, #4
 8005b5a:	60e0      	str	r0, [r4, #12]
 8005b5c:	6860      	ldr	r0, [r4, #4]
 8005b5e:	f7ff ff81 	bl	8005a64 <std>
 8005b62:	2201      	movs	r2, #1
 8005b64:	2109      	movs	r1, #9
 8005b66:	68a0      	ldr	r0, [r4, #8]
 8005b68:	f7ff ff7c 	bl	8005a64 <std>
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	2112      	movs	r1, #18
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	f7ff ff77 	bl	8005a64 <std>
 8005b76:	2301      	movs	r3, #1
 8005b78:	61a3      	str	r3, [r4, #24]
 8005b7a:	e7d1      	b.n	8005b20 <__sinit+0xc>
 8005b7c:	08005f9c 	.word	0x08005f9c
 8005b80:	08005aad 	.word	0x08005aad

08005b84 <__sfp>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	4607      	mov	r7, r0
 8005b88:	f7ff ffac 	bl	8005ae4 <__sfp_lock_acquire>
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <__sfp+0x84>)
 8005b8e:	681e      	ldr	r6, [r3, #0]
 8005b90:	69b3      	ldr	r3, [r6, #24]
 8005b92:	b913      	cbnz	r3, 8005b9a <__sfp+0x16>
 8005b94:	4630      	mov	r0, r6
 8005b96:	f7ff ffbd 	bl	8005b14 <__sinit>
 8005b9a:	3648      	adds	r6, #72	; 0x48
 8005b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	d503      	bpl.n	8005bac <__sfp+0x28>
 8005ba4:	6833      	ldr	r3, [r6, #0]
 8005ba6:	b30b      	cbz	r3, 8005bec <__sfp+0x68>
 8005ba8:	6836      	ldr	r6, [r6, #0]
 8005baa:	e7f7      	b.n	8005b9c <__sfp+0x18>
 8005bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bb0:	b9d5      	cbnz	r5, 8005be8 <__sfp+0x64>
 8005bb2:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <__sfp+0x88>)
 8005bb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bb8:	60e3      	str	r3, [r4, #12]
 8005bba:	6665      	str	r5, [r4, #100]	; 0x64
 8005bbc:	f000 f847 	bl	8005c4e <__retarget_lock_init_recursive>
 8005bc0:	f7ff ff96 	bl	8005af0 <__sfp_lock_release>
 8005bc4:	2208      	movs	r2, #8
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bd0:	6025      	str	r5, [r4, #0]
 8005bd2:	61a5      	str	r5, [r4, #24]
 8005bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bd8:	f7fd faba 	bl	8003150 <memset>
 8005bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005be4:	4620      	mov	r0, r4
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be8:	3468      	adds	r4, #104	; 0x68
 8005bea:	e7d9      	b.n	8005ba0 <__sfp+0x1c>
 8005bec:	2104      	movs	r1, #4
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff ff62 	bl	8005ab8 <__sfmoreglue>
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	6030      	str	r0, [r6, #0]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d1d5      	bne.n	8005ba8 <__sfp+0x24>
 8005bfc:	f7ff ff78 	bl	8005af0 <__sfp_lock_release>
 8005c00:	230c      	movs	r3, #12
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	e7ee      	b.n	8005be4 <__sfp+0x60>
 8005c06:	bf00      	nop
 8005c08:	08005f9c 	.word	0x08005f9c
 8005c0c:	ffff0001 	.word	0xffff0001

08005c10 <_fwalk_reent>:
 8005c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c14:	4606      	mov	r6, r0
 8005c16:	4688      	mov	r8, r1
 8005c18:	2700      	movs	r7, #0
 8005c1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c22:	f1b9 0901 	subs.w	r9, r9, #1
 8005c26:	d505      	bpl.n	8005c34 <_fwalk_reent+0x24>
 8005c28:	6824      	ldr	r4, [r4, #0]
 8005c2a:	2c00      	cmp	r4, #0
 8005c2c:	d1f7      	bne.n	8005c1e <_fwalk_reent+0xe>
 8005c2e:	4638      	mov	r0, r7
 8005c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d907      	bls.n	8005c4a <_fwalk_reent+0x3a>
 8005c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	d003      	beq.n	8005c4a <_fwalk_reent+0x3a>
 8005c42:	4629      	mov	r1, r5
 8005c44:	4630      	mov	r0, r6
 8005c46:	47c0      	blx	r8
 8005c48:	4307      	orrs	r7, r0
 8005c4a:	3568      	adds	r5, #104	; 0x68
 8005c4c:	e7e9      	b.n	8005c22 <_fwalk_reent+0x12>

08005c4e <__retarget_lock_init_recursive>:
 8005c4e:	4770      	bx	lr

08005c50 <__retarget_lock_acquire_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <__retarget_lock_release_recursive>:
 8005c52:	4770      	bx	lr

08005c54 <__swhatbuf_r>:
 8005c54:	b570      	push	{r4, r5, r6, lr}
 8005c56:	460e      	mov	r6, r1
 8005c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	2900      	cmp	r1, #0
 8005c60:	461d      	mov	r5, r3
 8005c62:	b096      	sub	sp, #88	; 0x58
 8005c64:	da08      	bge.n	8005c78 <__swhatbuf_r+0x24>
 8005c66:	2200      	movs	r2, #0
 8005c68:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	061a      	lsls	r2, r3, #24
 8005c70:	d410      	bmi.n	8005c94 <__swhatbuf_r+0x40>
 8005c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c76:	e00e      	b.n	8005c96 <__swhatbuf_r+0x42>
 8005c78:	466a      	mov	r2, sp
 8005c7a:	f000 f903 	bl	8005e84 <_fstat_r>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	dbf1      	blt.n	8005c66 <__swhatbuf_r+0x12>
 8005c82:	9a01      	ldr	r2, [sp, #4]
 8005c84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c8c:	425a      	negs	r2, r3
 8005c8e:	415a      	adcs	r2, r3
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	e7ee      	b.n	8005c72 <__swhatbuf_r+0x1e>
 8005c94:	2340      	movs	r3, #64	; 0x40
 8005c96:	2000      	movs	r0, #0
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	b016      	add	sp, #88	; 0x58
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ca0 <__smakebuf_r>:
 8005ca0:	898b      	ldrh	r3, [r1, #12]
 8005ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ca4:	079d      	lsls	r5, r3, #30
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	d507      	bpl.n	8005cbc <__smakebuf_r+0x1c>
 8005cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	6123      	str	r3, [r4, #16]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	6163      	str	r3, [r4, #20]
 8005cb8:	b002      	add	sp, #8
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	466a      	mov	r2, sp
 8005cbe:	ab01      	add	r3, sp, #4
 8005cc0:	f7ff ffc8 	bl	8005c54 <__swhatbuf_r>
 8005cc4:	9900      	ldr	r1, [sp, #0]
 8005cc6:	4605      	mov	r5, r0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff f969 	bl	8004fa0 <_malloc_r>
 8005cce:	b948      	cbnz	r0, 8005ce4 <__smakebuf_r+0x44>
 8005cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd4:	059a      	lsls	r2, r3, #22
 8005cd6:	d4ef      	bmi.n	8005cb8 <__smakebuf_r+0x18>
 8005cd8:	f023 0303 	bic.w	r3, r3, #3
 8005cdc:	f043 0302 	orr.w	r3, r3, #2
 8005ce0:	81a3      	strh	r3, [r4, #12]
 8005ce2:	e7e3      	b.n	8005cac <__smakebuf_r+0xc>
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <__smakebuf_r+0x7c>)
 8005ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	6020      	str	r0, [r4, #0]
 8005cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	9b00      	ldr	r3, [sp, #0]
 8005cf4:	6120      	str	r0, [r4, #16]
 8005cf6:	6163      	str	r3, [r4, #20]
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	b15b      	cbz	r3, 8005d14 <__smakebuf_r+0x74>
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d02:	f000 f8d1 	bl	8005ea8 <_isatty_r>
 8005d06:	b128      	cbz	r0, 8005d14 <__smakebuf_r+0x74>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	f023 0303 	bic.w	r3, r3, #3
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	89a0      	ldrh	r0, [r4, #12]
 8005d16:	4305      	orrs	r5, r0
 8005d18:	81a5      	strh	r5, [r4, #12]
 8005d1a:	e7cd      	b.n	8005cb8 <__smakebuf_r+0x18>
 8005d1c:	08005aad 	.word	0x08005aad

08005d20 <_malloc_usable_size_r>:
 8005d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d24:	1f18      	subs	r0, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bfbc      	itt	lt
 8005d2a:	580b      	ldrlt	r3, [r1, r0]
 8005d2c:	18c0      	addlt	r0, r0, r3
 8005d2e:	4770      	bx	lr

08005d30 <_raise_r>:
 8005d30:	291f      	cmp	r1, #31
 8005d32:	b538      	push	{r3, r4, r5, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	460d      	mov	r5, r1
 8005d38:	d904      	bls.n	8005d44 <_raise_r+0x14>
 8005d3a:	2316      	movs	r3, #22
 8005d3c:	6003      	str	r3, [r0, #0]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	bd38      	pop	{r3, r4, r5, pc}
 8005d44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d46:	b112      	cbz	r2, 8005d4e <_raise_r+0x1e>
 8005d48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d4c:	b94b      	cbnz	r3, 8005d62 <_raise_r+0x32>
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 f830 	bl	8005db4 <_getpid_r>
 8005d54:	462a      	mov	r2, r5
 8005d56:	4601      	mov	r1, r0
 8005d58:	4620      	mov	r0, r4
 8005d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d5e:	f000 b817 	b.w	8005d90 <_kill_r>
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d00a      	beq.n	8005d7c <_raise_r+0x4c>
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	d103      	bne.n	8005d72 <_raise_r+0x42>
 8005d6a:	2316      	movs	r3, #22
 8005d6c:	6003      	str	r3, [r0, #0]
 8005d6e:	2001      	movs	r0, #1
 8005d70:	e7e7      	b.n	8005d42 <_raise_r+0x12>
 8005d72:	2400      	movs	r4, #0
 8005d74:	4628      	mov	r0, r5
 8005d76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d7a:	4798      	blx	r3
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7e0      	b.n	8005d42 <_raise_r+0x12>

08005d80 <raise>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <raise+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f7ff bfd3 	b.w	8005d30 <_raise_r>
 8005d8a:	bf00      	nop
 8005d8c:	2000000c 	.word	0x2000000c

08005d90 <_kill_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	2300      	movs	r3, #0
 8005d94:	4d06      	ldr	r5, [pc, #24]	; (8005db0 <_kill_r+0x20>)
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	f7fd f8d2 	bl	8002f46 <_kill>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d102      	bne.n	8005dac <_kill_r+0x1c>
 8005da6:	682b      	ldr	r3, [r5, #0]
 8005da8:	b103      	cbz	r3, 8005dac <_kill_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd38      	pop	{r3, r4, r5, pc}
 8005dae:	bf00      	nop
 8005db0:	200002f8 	.word	0x200002f8

08005db4 <_getpid_r>:
 8005db4:	f7fd b8c0 	b.w	8002f38 <_getpid>

08005db8 <__sread>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	460c      	mov	r4, r1
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	f000 f894 	bl	8005eec <_read_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	bfab      	itete	ge
 8005dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005dca:	89a3      	ldrhlt	r3, [r4, #12]
 8005dcc:	181b      	addge	r3, r3, r0
 8005dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005dd2:	bfac      	ite	ge
 8005dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005dd6:	81a3      	strhlt	r3, [r4, #12]
 8005dd8:	bd10      	pop	{r4, pc}

08005dda <__swrite>:
 8005dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	461f      	mov	r7, r3
 8005de0:	898b      	ldrh	r3, [r1, #12]
 8005de2:	4605      	mov	r5, r0
 8005de4:	05db      	lsls	r3, r3, #23
 8005de6:	460c      	mov	r4, r1
 8005de8:	4616      	mov	r6, r2
 8005dea:	d505      	bpl.n	8005df8 <__swrite+0x1e>
 8005dec:	2302      	movs	r3, #2
 8005dee:	2200      	movs	r2, #0
 8005df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df4:	f000 f868 	bl	8005ec8 <_lseek_r>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	4628      	mov	r0, r5
 8005e04:	463b      	mov	r3, r7
 8005e06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	f000 b817 	b.w	8005e40 <_write_r>

08005e12 <__sseek>:
 8005e12:	b510      	push	{r4, lr}
 8005e14:	460c      	mov	r4, r1
 8005e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1a:	f000 f855 	bl	8005ec8 <_lseek_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	bf15      	itete	ne
 8005e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e2e:	81a3      	strheq	r3, [r4, #12]
 8005e30:	bf18      	it	ne
 8005e32:	81a3      	strhne	r3, [r4, #12]
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <__sclose>:
 8005e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3a:	f000 b813 	b.w	8005e64 <_close_r>
	...

08005e40 <_write_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4d05      	ldr	r5, [pc, #20]	; (8005e60 <_write_r+0x20>)
 8005e4c:	602a      	str	r2, [r5, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fd f8b0 	bl	8002fb4 <_write>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_write_r+0x1e>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_write_r+0x1e>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200002f8 	.word	0x200002f8

08005e64 <_close_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	2300      	movs	r3, #0
 8005e68:	4d05      	ldr	r5, [pc, #20]	; (8005e80 <_close_r+0x1c>)
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7fd f8bc 	bl	8002fec <_close>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_close_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_close_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	200002f8 	.word	0x200002f8

08005e84 <_fstat_r>:
 8005e84:	b538      	push	{r3, r4, r5, lr}
 8005e86:	2300      	movs	r3, #0
 8005e88:	4d06      	ldr	r5, [pc, #24]	; (8005ea4 <_fstat_r+0x20>)
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	f7fd f8b6 	bl	8003002 <_fstat>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d102      	bne.n	8005ea0 <_fstat_r+0x1c>
 8005e9a:	682b      	ldr	r3, [r5, #0]
 8005e9c:	b103      	cbz	r3, 8005ea0 <_fstat_r+0x1c>
 8005e9e:	6023      	str	r3, [r4, #0]
 8005ea0:	bd38      	pop	{r3, r4, r5, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200002f8 	.word	0x200002f8

08005ea8 <_isatty_r>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4d05      	ldr	r5, [pc, #20]	; (8005ec4 <_isatty_r+0x1c>)
 8005eae:	4604      	mov	r4, r0
 8005eb0:	4608      	mov	r0, r1
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	f7fd f8b4 	bl	8003020 <_isatty>
 8005eb8:	1c43      	adds	r3, r0, #1
 8005eba:	d102      	bne.n	8005ec2 <_isatty_r+0x1a>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	b103      	cbz	r3, 8005ec2 <_isatty_r+0x1a>
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	bd38      	pop	{r3, r4, r5, pc}
 8005ec4:	200002f8 	.word	0x200002f8

08005ec8 <_lseek_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4d05      	ldr	r5, [pc, #20]	; (8005ee8 <_lseek_r+0x20>)
 8005ed4:	602a      	str	r2, [r5, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f7fd f8ac 	bl	8003034 <_lseek>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_lseek_r+0x1e>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_lseek_r+0x1e>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	200002f8 	.word	0x200002f8

08005eec <_read_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	4604      	mov	r4, r0
 8005ef0:	4608      	mov	r0, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4d05      	ldr	r5, [pc, #20]	; (8005f0c <_read_r+0x20>)
 8005ef8:	602a      	str	r2, [r5, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	f7fd f83d 	bl	8002f7a <_read>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_read_r+0x1e>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_read_r+0x1e>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200002f8 	.word	0x200002f8

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
