
STM32 TIMER Triger Periodic ADC conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003bac  08003bac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bac  08003bac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003c24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003c24  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c666  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002069  00000000  00000000  0002c6ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0002e768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  0002f510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183fb  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea60  00000000  00000000  000485db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d48a  00000000  00000000  0005703b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e44c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cec  00000000  00000000  000e4518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b28 	.word	0x08003b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003b28 	.word	0x08003b28

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fd49 	bl	8000bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fea6 	bl	8002eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fd61 	bl	8000c5e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fd29 	bl	8000c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000008c 	.word	0x2000008c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000008c 	.word	0x2000008c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <HAL_Delay+0x44>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000260:	2300      	movs	r3, #0
 8000262:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d101      	bne.n	800027a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000276:	2301      	movs	r3, #1
 8000278:	e0be      	b.n	80003f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000284:	2b00      	cmp	r3, #0
 8000286:	d109      	bne.n	800029c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 fe40 	bl	8002f1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f000 fb93 	bl	80009c8 <ADC_ConversionStop_Disable>
 80002a2:	4603      	mov	r3, r0
 80002a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002aa:	f003 0310 	and.w	r3, r3, #16
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8099 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
 80002b4:	7dfb      	ldrb	r3, [r7, #23]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f040 8095 	bne.w	80003e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	f043 0202 	orr.w	r2, r3, #2
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	7b1b      	ldrb	r3, [r3, #12]
 80002de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002e2:	68ba      	ldr	r2, [r7, #8]
 80002e4:	4313      	orrs	r3, r2
 80002e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f0:	d003      	beq.n	80002fa <HAL_ADC_Init+0xa2>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d102      	bne.n	8000300 <HAL_ADC_Init+0xa8>
 80002fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fe:	e000      	b.n	8000302 <HAL_ADC_Init+0xaa>
 8000300:	2300      	movs	r3, #0
 8000302:	693a      	ldr	r2, [r7, #16]
 8000304:	4313      	orrs	r3, r2
 8000306:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	7d1b      	ldrb	r3, [r3, #20]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d119      	bne.n	8000344 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7b1b      	ldrb	r3, [r3, #12]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	3b01      	subs	r3, #1
 800031e:	035a      	lsls	r2, r3, #13
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	4313      	orrs	r3, r2
 8000324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	e00b      	b.n	8000344 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000330:	f043 0220 	orr.w	r2, r3, #32
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	430a      	orrs	r2, r1
 8000356:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <HAL_ADC_Init+0x1a8>)
 8000360:	4013      	ands	r3, r2
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	6812      	ldr	r2, [r2, #0]
 8000366:	68b9      	ldr	r1, [r7, #8]
 8000368:	430b      	orrs	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000374:	d003      	beq.n	800037e <HAL_ADC_Init+0x126>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d104      	bne.n	8000388 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	3b01      	subs	r3, #1
 8000384:	051b      	lsls	r3, r3, #20
 8000386:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800038e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68fa      	ldr	r2, [r7, #12]
 8000398:	430a      	orrs	r2, r1
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	4b18      	ldr	r3, [pc, #96]	; (8000404 <HAL_ADC_Init+0x1ac>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d10b      	bne.n	80003c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2200      	movs	r2, #0
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b6:	f023 0303 	bic.w	r3, r3, #3
 80003ba:	f043 0201 	orr.w	r2, r3, #1
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c2:	e018      	b.n	80003f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	f023 0312 	bic.w	r3, r3, #18
 80003cc:	f043 0210 	orr.w	r2, r3, #16
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	f043 0201 	orr.w	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003e0:	2301      	movs	r3, #1
 80003e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e4:	e007      	b.n	80003f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ea:	f043 0210 	orr.w	r2, r3, #16
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003f2:	2301      	movs	r3, #1
 80003f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	ffe1f7fd 	.word	0xffe1f7fd
 8000404:	ff1f0efe 	.word	0xff1f0efe

08000408 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000410:	2300      	movs	r3, #0
 8000412:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800041a:	2b01      	cmp	r3, #1
 800041c:	d101      	bne.n	8000422 <HAL_ADC_Start_IT+0x1a>
 800041e:	2302      	movs	r3, #2
 8000420:	e0a0      	b.n	8000564 <HAL_ADC_Start_IT+0x15c>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 fa72 	bl	8000914 <ADC_Enable>
 8000430:	4603      	mov	r3, r0
 8000432:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000434:	7bfb      	ldrb	r3, [r7, #15]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f040 808f 	bne.w	800055a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000444:	f023 0301 	bic.w	r3, r3, #1
 8000448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a45      	ldr	r2, [pc, #276]	; (800056c <HAL_ADC_Start_IT+0x164>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d105      	bne.n	8000466 <HAL_ADC_Start_IT+0x5e>
 800045a:	4b45      	ldr	r3, [pc, #276]	; (8000570 <HAL_ADC_Start_IT+0x168>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000462:	2b00      	cmp	r3, #0
 8000464:	d115      	bne.n	8000492 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800046a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800047c:	2b00      	cmp	r3, #0
 800047e:	d026      	beq.n	80004ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000484:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000488:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000490:	e01d      	b.n	80004ce <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a33      	ldr	r2, [pc, #204]	; (8000570 <HAL_ADC_Start_IT+0x168>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d004      	beq.n	80004b2 <HAL_ADC_Start_IT+0xaa>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	; (800056c <HAL_ADC_Start_IT+0x164>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d10d      	bne.n	80004ce <HAL_ADC_Start_IT+0xc6>
 80004b2:	4b2f      	ldr	r3, [pc, #188]	; (8000570 <HAL_ADC_Start_IT+0x168>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d007      	beq.n	80004ce <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004de:	f023 0206 	bic.w	r2, r3, #6
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e6:	e002      	b.n	80004ee <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f06f 0202 	mvn.w	r2, #2
 80004fe:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	685a      	ldr	r2, [r3, #4]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f042 0220 	orr.w	r2, r2, #32
 800050e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800051a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800051e:	d113      	bne.n	8000548 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <HAL_ADC_Start_IT+0x164>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d105      	bne.n	8000536 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_ADC_Start_IT+0x168>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000532:	2b00      	cmp	r3, #0
 8000534:	d108      	bne.n	8000548 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	e00c      	b.n	8000562 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	e003      	b.n	8000562 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000562:	7bfb      	ldrb	r3, [r7, #15]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40012800 	.word	0x40012800
 8000570:	40012400 	.word	0x40012400

08000574 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f003 0320 	and.w	r3, r3, #32
 800059e:	2b20      	cmp	r3, #32
 80005a0:	d140      	bne.n	8000624 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d139      	bne.n	8000624 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b4:	f003 0310 	and.w	r3, r3, #16
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80005d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80005d6:	d11d      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d119      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	685a      	ldr	r2, [r3, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f022 0220 	bic.w	r2, r2, #32
 80005ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d105      	bne.n	8000614 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800060c:	f043 0201 	orr.w	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f002 faa3 	bl	8002b60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f06f 0212 	mvn.w	r2, #18
 8000622:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	2b80      	cmp	r3, #128	; 0x80
 8000630:	d14f      	bne.n	80006d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f003 0304 	and.w	r3, r3, #4
 800063c:	2b04      	cmp	r3, #4
 800063e:	d148      	bne.n	80006d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	2b00      	cmp	r3, #0
 800064a:	d105      	bne.n	8000658 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000650:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000662:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000666:	d012      	beq.n	800068e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000672:	2b00      	cmp	r3, #0
 8000674:	d125      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000680:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000684:	d11d      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800068a:	2b00      	cmp	r3, #0
 800068c:	d119      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800069c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ba:	f043 0201 	orr.w	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f9c1 	bl	8000a4a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f06f 020c 	mvn.w	r2, #12
 80006d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006dc:	2b40      	cmp	r3, #64	; 0x40
 80006de:	d114      	bne.n	800070a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10d      	bne.n	800070a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f809 	bl	8000712 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f06f 0201 	mvn.w	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800072e:	2300      	movs	r3, #0
 8000730:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800073c:	2b01      	cmp	r3, #1
 800073e:	d101      	bne.n	8000744 <HAL_ADC_ConfigChannel+0x20>
 8000740:	2302      	movs	r3, #2
 8000742:	e0dc      	b.n	80008fe <HAL_ADC_ConfigChannel+0x1da>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2201      	movs	r2, #1
 8000748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b06      	cmp	r3, #6
 8000752:	d81c      	bhi.n	800078e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	4413      	add	r3, r2
 8000764:	3b05      	subs	r3, #5
 8000766:	221f      	movs	r2, #31
 8000768:	fa02 f303 	lsl.w	r3, r2, r3
 800076c:	43db      	mvns	r3, r3
 800076e:	4019      	ands	r1, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	4613      	mov	r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	4413      	add	r3, r2
 800077e:	3b05      	subs	r3, #5
 8000780:	fa00 f203 	lsl.w	r2, r0, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	430a      	orrs	r2, r1
 800078a:	635a      	str	r2, [r3, #52]	; 0x34
 800078c:	e03c      	b.n	8000808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2b0c      	cmp	r3, #12
 8000794:	d81c      	bhi.n	80007d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	3b23      	subs	r3, #35	; 0x23
 80007a8:	221f      	movs	r2, #31
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	4019      	ands	r1, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	3b23      	subs	r3, #35	; 0x23
 80007c2:	fa00 f203 	lsl.w	r2, r0, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
 80007ce:	e01b      	b.n	8000808 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685a      	ldr	r2, [r3, #4]
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	3b41      	subs	r3, #65	; 0x41
 80007e2:	221f      	movs	r2, #31
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	4019      	ands	r1, r3
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	3b41      	subs	r3, #65	; 0x41
 80007fc:	fa00 f203 	lsl.w	r2, r0, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	430a      	orrs	r2, r1
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b09      	cmp	r3, #9
 800080e:	d91c      	bls.n	800084a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	68d9      	ldr	r1, [r3, #12]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	3b1e      	subs	r3, #30
 8000822:	2207      	movs	r2, #7
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	4019      	ands	r1, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	6898      	ldr	r0, [r3, #8]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	3b1e      	subs	r3, #30
 800083c:	fa00 f203 	lsl.w	r2, r0, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	430a      	orrs	r2, r1
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	e019      	b.n	800087e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	6919      	ldr	r1, [r3, #16]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	2207      	movs	r2, #7
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	4019      	ands	r1, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	6898      	ldr	r0, [r3, #8]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4613      	mov	r3, r2
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	4413      	add	r3, r2
 8000872:	fa00 f203 	lsl.w	r2, r0, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b10      	cmp	r3, #16
 8000884:	d003      	beq.n	800088e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800088a:	2b11      	cmp	r3, #17
 800088c:	d132      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <HAL_ADC_ConfigChannel+0x1e4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d125      	bne.n	80008e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d126      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	d11a      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_ADC_ConfigChannel+0x1e8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <HAL_ADC_ConfigChannel+0x1ec>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	0c9a      	lsrs	r2, r3, #18
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008d4:	e002      	b.n	80008dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3b01      	subs	r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1f9      	bne.n	80008d6 <HAL_ADC_ConfigChannel+0x1b2>
 80008e2:	e007      	b.n	80008f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f043 0220 	orr.w	r2, r3, #32
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40012400 	.word	0x40012400
 800090c:	20000008 	.word	0x20000008
 8000910:	431bde83 	.word	0x431bde83

08000914 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	2b01      	cmp	r3, #1
 8000930:	d040      	beq.n	80009b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f042 0201 	orr.w	r2, r2, #1
 8000940:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <ADC_Enable+0xac>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <ADC_Enable+0xb0>)
 8000948:	fba2 2303 	umull	r2, r3, r2, r3
 800094c:	0c9b      	lsrs	r3, r3, #18
 800094e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000950:	e002      	b.n	8000958 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3b01      	subs	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f9      	bne.n	8000952 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800095e:	f7ff fc4d 	bl	80001fc <HAL_GetTick>
 8000962:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000964:	e01f      	b.n	80009a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000966:	f7ff fc49 	bl	80001fc <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	2b02      	cmp	r3, #2
 8000972:	d918      	bls.n	80009a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b01      	cmp	r3, #1
 8000980:	d011      	beq.n	80009a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f043 0210 	orr.w	r2, r3, #16
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e007      	b.n	80009b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d1d8      	bne.n	8000966 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	431bde83 	.word	0x431bde83

080009c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d12e      	bne.n	8000a40 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f022 0201 	bic.w	r2, r2, #1
 80009f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009f2:	f7ff fc03 	bl	80001fc <HAL_GetTick>
 80009f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009f8:	e01b      	b.n	8000a32 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009fa:	f7ff fbff 	bl	80001fc <HAL_GetTick>
 80009fe:	4602      	mov	r2, r0
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	1ad3      	subs	r3, r2, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d914      	bls.n	8000a32 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10d      	bne.n	8000a32 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	f043 0210 	orr.w	r2, r3, #16
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	f043 0201 	orr.w	r2, r3, #1
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e007      	b.n	8000a42 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d0dc      	beq.n	80009fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4906      	ldr	r1, [pc, #24]	; (8000af4 <__NVIC_EnableIRQ+0x34>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc0:	d301      	bcc.n	8000bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00f      	b.n	8000be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <SysTick_Config+0x40>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bce:	210f      	movs	r1, #15
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f7ff ff90 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SysTick_Config+0x40>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Config+0x40>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010

08000bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff ff2d 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
 8000c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff42 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff90 	bl	8000b4c <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5f 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff35 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffa2 	bl	8000bb0 <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d008      	beq.n	8000c9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e020      	b.n	8000ce0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 020e 	bic.w	r2, r2, #14
 8000cac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0201 	bic.w	r2, r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
	...

08000cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d005      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2204      	movs	r2, #4
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e051      	b.n	8000db2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 020e 	bic.w	r2, r2, #14
 8000d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_DMA_Abort_IT+0xd0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d029      	beq.n	8000d8c <HAL_DMA_Abort_IT+0xa0>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a20      	ldr	r2, [pc, #128]	; (8000dc0 <HAL_DMA_Abort_IT+0xd4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d022      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x9c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_DMA_Abort_IT+0xd8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d01a      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x96>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_DMA_Abort_IT+0xdc>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d012      	beq.n	8000d7c <HAL_DMA_Abort_IT+0x90>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <HAL_DMA_Abort_IT+0xe0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d00a      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x8a>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <HAL_DMA_Abort_IT+0xe4>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d102      	bne.n	8000d70 <HAL_DMA_Abort_IT+0x84>
 8000d6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6e:	e00e      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d74:	e00b      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	e008      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	e005      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	e002      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d88:	2310      	movs	r3, #16
 8000d8a:	e000      	b.n	8000d8e <HAL_DMA_Abort_IT+0xa2>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_DMA_Abort_IT+0xe8>)
 8000d90:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	4798      	blx	r3
    } 
  }
  return status;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40020008 	.word	0x40020008
 8000dc0:	4002001c 	.word	0x4002001c
 8000dc4:	40020030 	.word	0x40020030
 8000dc8:	40020044 	.word	0x40020044
 8000dcc:	40020058 	.word	0x40020058
 8000dd0:	4002006c 	.word	0x4002006c
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b08b      	sub	sp, #44	; 0x2c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dea:	e161      	b.n	80010b0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dec:	2201      	movs	r2, #1
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	f040 8150 	bne.w	80010aa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	4a97      	ldr	r2, [pc, #604]	; (800106c <HAL_GPIO_Init+0x294>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d05e      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e14:	4a95      	ldr	r2, [pc, #596]	; (800106c <HAL_GPIO_Init+0x294>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d875      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e1a:	4a95      	ldr	r2, [pc, #596]	; (8001070 <HAL_GPIO_Init+0x298>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d058      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e20:	4a93      	ldr	r2, [pc, #588]	; (8001070 <HAL_GPIO_Init+0x298>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d86f      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e26:	4a93      	ldr	r2, [pc, #588]	; (8001074 <HAL_GPIO_Init+0x29c>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d052      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e2c:	4a91      	ldr	r2, [pc, #580]	; (8001074 <HAL_GPIO_Init+0x29c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d869      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e32:	4a91      	ldr	r2, [pc, #580]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d04c      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e38:	4a8f      	ldr	r2, [pc, #572]	; (8001078 <HAL_GPIO_Init+0x2a0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d863      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a8f      	ldr	r2, [pc, #572]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d046      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
 8000e44:	4a8d      	ldr	r2, [pc, #564]	; (800107c <HAL_GPIO_Init+0x2a4>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d85d      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d82a      	bhi.n	8000ea4 <HAL_GPIO_Init+0xcc>
 8000e4e:	2b12      	cmp	r3, #18
 8000e50:	d859      	bhi.n	8000f06 <HAL_GPIO_Init+0x12e>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <HAL_GPIO_Init+0x80>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000ed3 	.word	0x08000ed3
 8000e5c:	08000ead 	.word	0x08000ead
 8000e60:	08000ebf 	.word	0x08000ebf
 8000e64:	08000f01 	.word	0x08000f01
 8000e68:	08000f07 	.word	0x08000f07
 8000e6c:	08000f07 	.word	0x08000f07
 8000e70:	08000f07 	.word	0x08000f07
 8000e74:	08000f07 	.word	0x08000f07
 8000e78:	08000f07 	.word	0x08000f07
 8000e7c:	08000f07 	.word	0x08000f07
 8000e80:	08000f07 	.word	0x08000f07
 8000e84:	08000f07 	.word	0x08000f07
 8000e88:	08000f07 	.word	0x08000f07
 8000e8c:	08000f07 	.word	0x08000f07
 8000e90:	08000f07 	.word	0x08000f07
 8000e94:	08000f07 	.word	0x08000f07
 8000e98:	08000f07 	.word	0x08000f07
 8000e9c:	08000eb5 	.word	0x08000eb5
 8000ea0:	08000ec9 	.word	0x08000ec9
 8000ea4:	4a76      	ldr	r2, [pc, #472]	; (8001080 <HAL_GPIO_Init+0x2a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d013      	beq.n	8000ed2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eaa:	e02c      	b.n	8000f06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e029      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	623b      	str	r3, [r7, #32]
          break;
 8000ebc:	e024      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e01f      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	330c      	adds	r3, #12
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e01a      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d102      	bne.n	8000ee0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eda:	2304      	movs	r3, #4
 8000edc:	623b      	str	r3, [r7, #32]
          break;
 8000ede:	e013      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	611a      	str	r2, [r3, #16]
          break;
 8000ef2:	e009      	b.n	8000f08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	615a      	str	r2, [r3, #20]
          break;
 8000efe:	e003      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
          break;
 8000f04:	e000      	b.n	8000f08 <HAL_GPIO_Init+0x130>
          break;
 8000f06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2bff      	cmp	r3, #255	; 0xff
 8000f0c:	d801      	bhi.n	8000f12 <HAL_GPIO_Init+0x13a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	e001      	b.n	8000f16 <HAL_GPIO_Init+0x13e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3304      	adds	r3, #4
 8000f16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d802      	bhi.n	8000f24 <HAL_GPIO_Init+0x14c>
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	e002      	b.n	8000f2a <HAL_GPIO_Init+0x152>
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	3b08      	subs	r3, #8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	210f      	movs	r1, #15
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	6a39      	ldr	r1, [r7, #32]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80a9 	beq.w	80010aa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f58:	4b4a      	ldr	r3, [pc, #296]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a49      	ldr	r2, [pc, #292]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_GPIO_Init+0x2ac>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	220f      	movs	r2, #15
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4013      	ands	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a3d      	ldr	r2, [pc, #244]	; (800108c <HAL_GPIO_Init+0x2b4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d00d      	beq.n	8000fb8 <HAL_GPIO_Init+0x1e0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <HAL_GPIO_Init+0x2b8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d007      	beq.n	8000fb4 <HAL_GPIO_Init+0x1dc>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a3b      	ldr	r2, [pc, #236]	; (8001094 <HAL_GPIO_Init+0x2bc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d101      	bne.n	8000fb0 <HAL_GPIO_Init+0x1d8>
 8000fac:	2302      	movs	r3, #2
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1e2>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2b0>)
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	492b      	ldr	r1, [pc, #172]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
 8000ff0:	e006      	b.n	8001000 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ff2:	4b29      	ldr	r3, [pc, #164]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4927      	ldr	r1, [pc, #156]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800100c:	4b22      	ldr	r3, [pc, #136]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4921      	ldr	r1, [pc, #132]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	491d      	ldr	r1, [pc, #116]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8001024:	4013      	ands	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	4917      	ldr	r1, [pc, #92]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	4913      	ldr	r1, [pc, #76]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 800104c:	4013      	ands	r3, r2
 800104e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01f      	beq.n	800109c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	490d      	ldr	r1, [pc, #52]	; (8001098 <HAL_GPIO_Init+0x2c0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	60cb      	str	r3, [r1, #12]
 8001068:	e01f      	b.n	80010aa <HAL_GPIO_Init+0x2d2>
 800106a:	bf00      	nop
 800106c:	10320000 	.word	0x10320000
 8001070:	10310000 	.word	0x10310000
 8001074:	10220000 	.word	0x10220000
 8001078:	10210000 	.word	0x10210000
 800107c:	10120000 	.word	0x10120000
 8001080:	10110000 	.word	0x10110000
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_GPIO_Init+0x2f4>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4909      	ldr	r1, [pc, #36]	; (80010cc <HAL_GPIO_Init+0x2f4>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3301      	adds	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f ae96 	bne.w	8000dec <HAL_GPIO_Init+0x14>
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	372c      	adds	r7, #44	; 0x2c
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	611a      	str	r2, [r3, #16]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43d9      	mvns	r1, r3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
	...

08001134 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e272      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8087 	beq.w	8001262 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001154:	4b92      	ldr	r3, [pc, #584]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b04      	cmp	r3, #4
 800115e:	d00c      	beq.n	800117a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001160:	4b8f      	ldr	r3, [pc, #572]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d112      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
 800116c:	4b8c      	ldr	r3, [pc, #560]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001178:	d10b      	bne.n	8001192 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117a:	4b89      	ldr	r3, [pc, #548]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d06c      	beq.n	8001260 <HAL_RCC_OscConfig+0x12c>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d168      	bne.n	8001260 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e24c      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x76>
 800119c:	4b80      	ldr	r3, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a7f      	ldr	r2, [pc, #508]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e02e      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b7b      	ldr	r3, [pc, #492]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7a      	ldr	r2, [pc, #488]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b78      	ldr	r3, [pc, #480]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a77      	ldr	r2, [pc, #476]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0xbc>
 80011d6:	4b72      	ldr	r3, [pc, #456]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a71      	ldr	r2, [pc, #452]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6f      	ldr	r3, [pc, #444]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6e      	ldr	r2, [pc, #440]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xd4>
 80011f0:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a6a      	ldr	r2, [pc, #424]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7fe fff4 	bl	80001fc <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7fe fff0 	bl	80001fc <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e200      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xe4>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7fe ffe0 	bl	80001fc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7fe ffdc 	bl	80001fc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1ec      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x10c>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
 8001286:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c0      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4939      	ldr	r1, [pc, #228]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7fe ff95 	bl	80001fc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d6:	f7fe ff91 	bl	80001fc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4927      	ldr	r1, [pc, #156]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b26      	ldr	r3, [pc, #152]	; (80013a4 <HAL_RCC_OscConfig+0x270>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7fe ff74 	bl	80001fc <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001318:	f7fe ff70 	bl	80001fc <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e180      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d03a      	beq.n	80013b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d019      	beq.n	800137e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_RCC_OscConfig+0x274>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7fe ff54 	bl	80001fc <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001358:	f7fe ff50 	bl	80001fc <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e160      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 fad8 	bl	800192c <RCC_Delay>
 800137c:	e01c      	b.n	80013b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_RCC_OscConfig+0x274>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7fe ff3a 	bl	80001fc <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138a:	e00f      	b.n	80013ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138c:	f7fe ff36 	bl	80001fc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d908      	bls.n	80013ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e146      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	42420000 	.word	0x42420000
 80013a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1e9      	bne.n	800138c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a6 	beq.w	8001512 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ca:	4b8b      	ldr	r3, [pc, #556]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10d      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a87      	ldr	r2, [pc, #540]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	4b82      	ldr	r3, [pc, #520]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d118      	bne.n	8001430 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	4b7f      	ldr	r3, [pc, #508]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7e      	ldr	r2, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800140a:	f7fe fef7 	bl	80001fc <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001412:	f7fe fef3 	bl	80001fc <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e103      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001424:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x4c8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x312>
 8001438:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a6e      	ldr	r2, [pc, #440]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	e02d      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x334>
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a69      	ldr	r2, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a66      	ldr	r2, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x356>
 8001470:	4b61      	ldr	r3, [pc, #388]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a60      	ldr	r2, [pc, #384]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6213      	str	r3, [r2, #32]
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x36e>
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a5a      	ldr	r2, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	4b58      	ldr	r3, [pc, #352]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4a57      	ldr	r2, [pc, #348]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7fe fea7 	bl	80001fc <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7fe fea3 	bl	80001fc <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0b1      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x37e>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7fe fe91 	bl	80001fc <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7fe fe8d 	bl	80001fc <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e09b      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	4a3b      	ldr	r2, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d061      	beq.n	80015ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d146      	bne.n	80015be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7fe fe61 	bl	80001fc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7fe fe5d 	bl	80001fc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e06d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d108      	bne.n	8001578 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4921      	ldr	r1, [pc, #132]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a19      	ldr	r1, [r3, #32]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	430b      	orrs	r3, r1
 800158a:	491b      	ldr	r1, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7fe fe31 	bl	80001fc <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800159e:	f7fe fe2d 	bl	80001fc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x46a>
 80015bc:	e035      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_RCC_OscConfig+0x4cc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7fe fe1a 	bl	80001fc <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7fe fe16 	bl	80001fc <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e026      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x498>
 80015ea:	e01e      	b.n	800162a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e019      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40007000 	.word	0x40007000
 8001600:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x500>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	429a      	cmp	r2, r3
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001622:	429a      	cmp	r2, r3
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0207 	bic.w	r2, r3, #7
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 800169a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800169e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001728:	f7fe fd68 	bl	80001fc <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7fe fd64 	bl	80001fc <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1cc>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fcc6 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08003b60 	.word	0x08003b60
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001812:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001814:	1d3c      	adds	r4, r7, #4
 8001816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800181c:	f240 2301 	movw	r3, #513	; 0x201
 8001820:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d002      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d003      	beq.n	8001852 <HAL_RCC_GetSysClockFreq+0x46>
 800184a:	e02b      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800184e:	623b      	str	r3, [r7, #32]
      break;
 8001850:	e02b      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	0c9b      	lsrs	r3, r3, #18
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3328      	adds	r3, #40	; 0x28
 800185c:	443b      	add	r3, r7
 800185e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001862:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0c5b      	lsrs	r3, r3, #17
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	3328      	adds	r3, #40	; 0x28
 800187a:	443b      	add	r3, r7
 800187c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001880:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001886:	fb03 f202 	mul.w	r2, r3, r2
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	e004      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001898:	fb02 f303 	mul.w	r3, r2, r3
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	623b      	str	r3, [r7, #32]
      break;
 80018a2:	e002      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a6:	623b      	str	r3, [r7, #32]
      break;
 80018a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018aa:	6a3b      	ldr	r3, [r7, #32]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc90      	pop	{r4, r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	08003b40 	.word	0x08003b40
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	003d0900 	.word	0x003d0900

080018c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018e0:	f7ff fff2 	bl	80018c8 <HAL_RCC_GetHCLKFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000
 8001900:	08003b70 	.word	0x08003b70

08001904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001908:	f7ff ffde 	bl	80018c8 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0adb      	lsrs	r3, r3, #11
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	08003b70 	.word	0x08003b70

0800192c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <RCC_Delay+0x34>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <RCC_Delay+0x38>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0a5b      	lsrs	r3, r3, #9
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001948:	bf00      	nop
  }
  while (Delay --);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	60fa      	str	r2, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f9      	bne.n	8001948 <RCC_Delay+0x1c>
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000008 	.word	0x20000008
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d07d      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001988:	4b4f      	ldr	r3, [pc, #316]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10d      	bne.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800199a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199e:	61d3      	str	r3, [r2, #28]
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ac:	2301      	movs	r3, #1
 80019ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b46      	ldr	r3, [pc, #280]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d118      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019bc:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c8:	f7fe fc18 	bl	80001fc <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	e008      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d0:	f7fe fc14 	bl	80001fc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e06d      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d02e      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d027      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d014      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe fbe3 	bl	80001fc <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7fe fbdf 	bl	80001fc <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e036      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0ee      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4917      	ldr	r1, [pc, #92]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4a13      	ldr	r2, [pc, #76]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d008      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	490b      	ldr	r1, [pc, #44]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	42420440 	.word	0x42420440

08001ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f001 fa52 	bl	8002fa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 f988 	bl	8001e28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_TIM_PWM_Start+0x24>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e022      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d109      	bne.n	8001bb2 <HAL_TIM_PWM_Start+0x3e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e015      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d109      	bne.n	8001bcc <HAL_TIM_PWM_Start+0x58>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e008      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e059      	b.n	8001c9a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0x82>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf4:	e013      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d104      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x92>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e00b      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d104      	bne.n	8001c16 <HAL_TIM_PWM_Start+0xa2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c14:	e003      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fade 	bl	80021e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <HAL_TIM_PWM_Start+0x130>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d107      	bne.n	8001c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a16      	ldr	r2, [pc, #88]	; (8001ca4 <HAL_TIM_PWM_Start+0x130>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIM_PWM_Start+0xf0>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_PWM_Start+0xf0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_TIM_PWM_Start+0x134>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d010      	beq.n	8001c98 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	e007      	b.n	8001c98 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40000400 	.word	0x40000400

08001cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e0ac      	b.n	8001e20 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	f200 809f 	bhi.w	8001e14 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001cd6:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001d11 	.word	0x08001d11
 8001ce0:	08001e15 	.word	0x08001e15
 8001ce4:	08001e15 	.word	0x08001e15
 8001ce8:	08001e15 	.word	0x08001e15
 8001cec:	08001d51 	.word	0x08001d51
 8001cf0:	08001e15 	.word	0x08001e15
 8001cf4:	08001e15 	.word	0x08001e15
 8001cf8:	08001e15 	.word	0x08001e15
 8001cfc:	08001d93 	.word	0x08001d93
 8001d00:	08001e15 	.word	0x08001e15
 8001d04:	08001e15 	.word	0x08001e15
 8001d08:	08001e15 	.word	0x08001e15
 8001d0c:	08001dd3 	.word	0x08001dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f8de 	bl	8001ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0208 	orr.w	r2, r2, #8
 8001d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0204 	bic.w	r2, r2, #4
 8001d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6999      	ldr	r1, [r3, #24]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	619a      	str	r2, [r3, #24]
      break;
 8001d4e:	e062      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f924 	bl	8001fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6999      	ldr	r1, [r3, #24]
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	021a      	lsls	r2, r3, #8
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	619a      	str	r2, [r3, #24]
      break;
 8001d90:	e041      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 f96d 	bl	8002078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0208 	orr.w	r2, r2, #8
 8001dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0204 	bic.w	r2, r2, #4
 8001dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69d9      	ldr	r1, [r3, #28]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	61da      	str	r2, [r3, #28]
      break;
 8001dd0:	e021      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f9b7 	bl	800214c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69d9      	ldr	r1, [r3, #28]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	021a      	lsls	r2, r3, #8
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	61da      	str	r2, [r3, #28]
      break;
 8001e12:	e000      	b.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001e14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <TIM_Base_SetConfig+0xa8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0x28>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0x28>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <TIM_Base_SetConfig+0xac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <TIM_Base_SetConfig+0xa8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d007      	beq.n	8001e7a <TIM_Base_SetConfig+0x52>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d003      	beq.n	8001e7a <TIM_Base_SetConfig+0x52>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <TIM_Base_SetConfig+0xac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d108      	bne.n	8001e8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <TIM_Base_SetConfig+0xa8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d103      	bne.n	8001ec0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	615a      	str	r2, [r3, #20]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40012c00 	.word	0x40012c00
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b087      	sub	sp, #28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f023 0201 	bic.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 0302 	bic.w	r3, r3, #2
 8001f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <TIM_OC1_SetConfig+0xc8>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d10c      	bne.n	8001f4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0308 	bic.w	r3, r3, #8
 8001f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <TIM_OC1_SetConfig+0xc8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d111      	bne.n	8001f7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00

08001fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	f023 0210 	bic.w	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0320 	bic.w	r3, r3, #32
 8001fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <TIM_OC2_SetConfig+0xd0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10d      	bne.n	8002020 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800200a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800201e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a14      	ldr	r2, [pc, #80]	; (8002074 <TIM_OC2_SetConfig+0xd0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d113      	bne.n	8002050 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800202e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	621a      	str	r2, [r3, #32]
}
 800206a:	bf00      	nop
 800206c:	371c      	adds	r7, #28
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	40012c00 	.word	0x40012c00

08002078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002078:	b480      	push	{r7}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <TIM_OC3_SetConfig+0xd0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d10d      	bne.n	80020f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <TIM_OC3_SetConfig+0xd0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d113      	bne.n	8002122 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	621a      	str	r2, [r3, #32]
}
 800213c:	bf00      	nop
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40012c00 	.word	0x40012c00

0800214c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	031b      	lsls	r3, r3, #12
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <TIM_OC4_SetConfig+0x98>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d109      	bne.n	80021c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	621a      	str	r2, [r3, #32]
}
 80021da:	bf00      	nop
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40012c00 	.word	0x40012c00

080021e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	2201      	movs	r2, #1
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	621a      	str	r2, [r3, #32]
}
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002244:	2302      	movs	r3, #2
 8002246:	e041      	b.n	80022cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d004      	beq.n	80022a0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a10      	ldr	r2, [pc, #64]	; (80022dc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10c      	bne.n	80022ba <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40012c00 	.word	0x40012c00
 80022dc:	40000400 	.word	0x40000400

080022e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e03f      	b.n	8002372 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fe6a 	bl	8002fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2224      	movs	r2, #36	; 0x24
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fb8d 	bl	8002a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d130      	bne.n	80023f6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_UART_Transmit_IT+0x26>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e029      	b.n	80023f8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_UART_Transmit_IT+0x38>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e022      	b.n	80023f8 <HAL_UART_Transmit_IT+0x7e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	88fa      	ldrh	r2, [r7, #6]
 80023c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	88fa      	ldrh	r2, [r7, #6]
 80023ca:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2221      	movs	r2, #33	; 0x21
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
  }
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
	...

08002404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_UART_IRQHandler+0x52>
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa4f 	bl	80028f2 <UART_Receive_IT>
      return;
 8002454:	e17b      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80b1 	beq.w	80025c0 <HAL_UART_IRQHandler+0x1bc>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_UART_IRQHandler+0x70>
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80a6 	beq.w	80025c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_UART_IRQHandler+0x90>
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0201 	orr.w	r2, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_UART_IRQHandler+0xb0>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_UART_IRQHandler+0xd0>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f043 0204 	orr.w	r2, r3, #4
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00f      	beq.n	80024fe <HAL_UART_IRQHandler+0xfa>
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_UART_IRQHandler+0xee>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f043 0208 	orr.w	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 811e 	beq.w	8002744 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_UART_IRQHandler+0x11e>
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f9e8 	bl	80028f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <HAL_UART_IRQHandler+0x146>
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d031      	beq.n	80025ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f92a 	bl	80027a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d023      	beq.n	80025a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257a:	4a76      	ldr	r2, [pc, #472]	; (8002754 <HAL_UART_IRQHandler+0x350>)
 800257c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbb2 	bl	8000cec <HAL_DMA_Abort_IT>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002598:	4610      	mov	r0, r2
 800259a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800259c:	e00e      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8ec 	bl	800277c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	e00a      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f8e8 	bl	800277c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ac:	e006      	b.n	80025bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f8e4 	bl	800277c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025ba:	e0c3      	b.n	8002744 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025bc:	bf00      	nop
    return;
 80025be:	e0c1      	b.n	8002744 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 80a1 	bne.w	800270c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f003 0310 	and.w	r3, r3, #16
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 809b 	beq.w	800270c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8095 	beq.w	800270c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d04e      	beq.n	80026a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002610:	8a3b      	ldrh	r3, [r7, #16]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8098 	beq.w	8002748 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800261c:	8a3a      	ldrh	r2, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	f080 8092 	bcs.w	8002748 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8a3a      	ldrh	r2, [r7, #16]
 8002628:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b20      	cmp	r3, #32
 8002632:	d02b      	beq.n	800268c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002642:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002662:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe faf5 	bl	8000c76 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002694:	b29b      	uxth	r3, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b29b      	uxth	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f876 	bl	800278e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026a2:	e051      	b.n	8002748 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d047      	beq.n	800274c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026bc:	8a7b      	ldrh	r3, [r7, #18]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0201 	bic.w	r2, r2, #1
 80026e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002700:	8a7b      	ldrh	r3, [r7, #18]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f842 	bl	800278e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800270a:	e01f      	b.n	800274c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_UART_IRQHandler+0x324>
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f87f 	bl	8002824 <UART_Transmit_IT>
    return;
 8002726:	e012      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_UART_IRQHandler+0x34a>
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f8c0 	bl	80028c2 <UART_EndTransmit_IT>
    return;
 8002742:	e004      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
    return;
 8002744:	bf00      	nop
 8002746:	e002      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
      return;
 8002748:	bf00      	nop
 800274a:	e000      	b.n	800274e <HAL_UART_IRQHandler+0x34a>
      return;
 800274c:	bf00      	nop
  }
}
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	080027fd 	.word	0x080027fd

08002758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0210 	bic.w	r2, r2, #16
 80027e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff ffb0 	bl	800277c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b21      	cmp	r3, #33	; 0x21
 8002836:	d13e      	bne.n	80028b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002840:	d114      	bne.n	800286c <UART_Transmit_IT+0x48>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d110      	bne.n	800286c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800285e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	1c9a      	adds	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	621a      	str	r2, [r3, #32]
 800286a:	e008      	b.n	800287e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	1c59      	adds	r1, r3, #1
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6211      	str	r1, [r2, #32]
 8002876:	781a      	ldrb	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10f      	bne.n	80028b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e000      	b.n	80028b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028b6:	2302      	movs	r3, #2
  }
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff38 	bl	8002758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b22      	cmp	r3, #34	; 0x22
 8002904:	f040 8099 	bne.w	8002a3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d117      	bne.n	8002942 <UART_Receive_IT+0x50>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	b29b      	uxth	r3, r3
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	b29a      	uxth	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293a:	1c9a      	adds	r2, r3, #2
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
 8002940:	e026      	b.n	8002990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002954:	d007      	beq.n	8002966 <UART_Receive_IT+0x74>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <UART_Receive_IT+0x82>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e008      	b.n	8002986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002980:	b2da      	uxtb	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002994:	b29b      	uxth	r3, r3
 8002996:	3b01      	subs	r3, #1
 8002998:	b29b      	uxth	r3, r3
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4619      	mov	r1, r3
 800299e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d148      	bne.n	8002a36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0220 	bic.w	r2, r2, #32
 80029b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d123      	bne.n	8002a2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0210 	bic.w	r2, r2, #16
 80029f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d10a      	bne.n	8002a1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a22:	4619      	mov	r1, r3
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff feb2 	bl	800278e <HAL_UARTEx_RxEventCallback>
 8002a2a:	e002      	b.n	8002a32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fe9c 	bl	800276a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e002      	b.n	8002a3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a7e:	f023 030c 	bic.w	r3, r3, #12
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a2c      	ldr	r2, [pc, #176]	; (8002b58 <UART_SetConfig+0x114>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d103      	bne.n	8002ab4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002aac:	f7fe ff2a 	bl	8001904 <HAL_RCC_GetPCLK2Freq>
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	e002      	b.n	8002aba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ab4:	f7fe ff12 	bl	80018dc <HAL_RCC_GetPCLK1Freq>
 8002ab8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009a      	lsls	r2, r3, #2
 8002ac4:	441a      	add	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a22      	ldr	r2, [pc, #136]	; (8002b5c <UART_SetConfig+0x118>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	0119      	lsls	r1, r3, #4
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009a      	lsls	r2, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <UART_SetConfig+0x118>)
 8002af2:	fba3 0302 	umull	r0, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b10:	4419      	add	r1, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	009a      	lsls	r2, r3, #2
 8002b1c:	441a      	add	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <UART_SetConfig+0x118>)
 8002b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	fb00 f303 	mul.w	r3, r0, r3
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	3332      	adds	r3, #50	; 0x32
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <UART_SetConfig+0x118>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	51eb851f 	.word	0x51eb851f

08002b60 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t MSG[50];
uint32_t ADC_VAL=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x3c>)
 8002b6a:	f7fd fd03 	bl	8000574 <HAL_ADC_GetValue>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8002b72:	6013      	str	r3, [r2, #0]
  sprintf(MSG,"ADC VAL %d \n\r",ADC_VAL);
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_ADC_ConvCpltCallback+0x44>)
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <HAL_ADC_ConvCpltCallback+0x48>)
 8002b7e:	f000 fb59 	bl	8003234 <siprintf>
  HAL_UART_Transmit_IT(&huart1, MSG, sizeof(MSG));
 8002b82:	2232      	movs	r2, #50	; 0x32
 8002b84:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <HAL_ADC_ConvCpltCallback+0x48>)
 8002b86:	4809      	ldr	r0, [pc, #36]	; (8002bac <HAL_ADC_ConvCpltCallback+0x4c>)
 8002b88:	f7ff fbf7 	bl	800237a <HAL_UART_Transmit_IT>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <HAL_ADC_ConvCpltCallback+0x50>)
 8002b90:	f7fe fab6 	bl	8001100 <HAL_GPIO_TogglePin>
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000090 	.word	0x20000090
 8002ba0:	20000180 	.word	0x20000180
 8002ba4:	08003b50 	.word	0x08003b50
 8002ba8:	2000014c 	.word	0x2000014c
 8002bac:	20000108 	.word	0x20000108
 8002bb0:	40010800 	.word	0x40010800

08002bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bb8:	f7fd fac8 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bbc:	f000 f828 	bl	8002c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bc0:	f000 f936 	bl	8002e30 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002bc4:	f000 f874 	bl	8002cb0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002bc8:	f000 f8b0 	bl	8002d2c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002bcc:	f000 f906 	bl	8002ddc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

if(HAL_ADC_Start_IT(&hadc1) !=HAL_OK)
 8002bd0:	480c      	ldr	r0, [pc, #48]	; (8002c04 <main+0x50>)
 8002bd2:	f7fd fc19 	bl	8000408 <HAL_ADC_Start_IT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <main+0x2c>
         {
            Error_Handler();
 8002bdc:	f000 f966 	bl	8002eac <Error_Handler>
         }
 if(HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)!=HAL_OK)
 8002be0:	2100      	movs	r1, #0
 8002be2:	4809      	ldr	r0, [pc, #36]	; (8002c08 <main+0x54>)
 8002be4:	f7fe ffc6 	bl	8001b74 <HAL_TIM_PWM_Start>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <main+0x3e>
         {
            Error_Handler();
 8002bee:	f000 f95d 	bl	8002eac <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <main+0x58>)
 8002bf8:	f7fe fa6a 	bl	80010d0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002bfc:	2064      	movs	r0, #100	; 0x64
 8002bfe:	f7fd fb07 	bl	8000210 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8002c02:	e7f6      	b.n	8002bf2 <main+0x3e>
 8002c04:	20000090 	.word	0x20000090
 8002c08:	200000c0 	.word	0x200000c0
 8002c0c:	40010800 	.word	0x40010800

08002c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b094      	sub	sp, #80	; 0x50
 8002c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c1a:	2228      	movs	r2, #40	; 0x28
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fb00 	bl	8003224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c24:	f107 0314 	add.w	r3, r7, #20
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	2200      	movs	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
 8002c3e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c44:	2301      	movs	r3, #1
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c48:	2310      	movs	r3, #16
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe fa6d 	bl	8001134 <HAL_RCC_OscConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8002c60:	f000 f924 	bl	8002eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c64:	230f      	movs	r3, #15
 8002c66:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fcda 	bl	8001638 <HAL_RCC_ClockConfig>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002c8a:	f000 f90f 	bl	8002eac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe fe65 	bl	8001968 <HAL_RCCEx_PeriphCLKConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ca4:	f000 f902 	bl	8002eac <Error_Handler>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3750      	adds	r7, #80	; 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8002cc0:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <MX_ADC1_Init+0x78>)
 8002cc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ccc:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002cde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002cee:	f7fd fab3 	bl	8000258 <HAL_ADC_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002cf8:	f000 f8d8 	bl	8002eac <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d00:	2301      	movs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d08:	1d3b      	adds	r3, r7, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_ADC1_Init+0x74>)
 8002d0e:	f7fd fd09 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002d18:	f000 f8c8 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000090 	.word	0x20000090
 8002d28:	40012400 	.word	0x40012400

08002d2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d32:	f107 0320 	add.w	r3, r7, #32
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]
 8002d48:	611a      	str	r2, [r3, #16]
 8002d4a:	615a      	str	r2, [r3, #20]
 8002d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d50:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <MX_TIM3_Init+0xac>)
 8002d52:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d56:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 8000;
 8002d62:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d64:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d70:	4b18      	ldr	r3, [pc, #96]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d76:	4817      	ldr	r0, [pc, #92]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d78:	f7fe feac 	bl	8001ad4 <HAL_TIM_PWM_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002d82:	f000 f893 	bl	8002eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d86:	2320      	movs	r3, #32
 8002d88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d8e:	f107 0320 	add.w	r3, r7, #32
 8002d92:	4619      	mov	r1, r3
 8002d94:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002d96:	f7ff fa4b 	bl	8002230 <HAL_TIMEx_MasterConfigSynchronization>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002da0:	f000 f884 	bl	8002eac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002da4:	2360      	movs	r3, #96	; 0x60
 8002da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <MX_TIM3_Init+0xa8>)
 8002dbc:	f7fe ff76 	bl	8001cac <HAL_TIM_PWM_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002dc6:	f000 f871 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	3728      	adds	r7, #40	; 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200000c0 	.word	0x200000c0
 8002dd8:	40000400 	.word	0x40000400

08002ddc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <MX_USART1_UART_Init+0x50>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <MX_USART1_UART_Init+0x4c>)
 8002e14:	f7ff fa64 	bl	80022e0 <HAL_UART_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e1e:	f000 f845 	bl	8002eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000108 	.word	0x20000108
 8002e2c:	40013800 	.word	0x40013800

08002e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]
 8002e42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e62:	f043 0308 	orr.w	r3, r3, #8
 8002e66:	6193      	str	r3, [r2, #24]
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_GPIO_Init+0x74>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8002e74:	2200      	movs	r2, #0
 8002e76:	2102      	movs	r1, #2
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <MX_GPIO_Init+0x78>)
 8002e7a:	f7fe f929 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	4619      	mov	r1, r3
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <MX_GPIO_Init+0x78>)
 8002e96:	f7fd ff9f 	bl	8000dd8 <HAL_GPIO_Init>

}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010800 	.word	0x40010800

08002eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_MspInit+0x5c>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_MspInit+0x5c>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6193      	str	r3, [r2, #24]
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_MspInit+0x5c>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_MspInit+0x5c>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_MspInit+0x5c>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_MspInit+0x5c>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_MspInit+0x60>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	4a04      	ldr	r2, [pc, #16]	; (8002f18 <HAL_MspInit+0x60>)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010000 	.word	0x40010000

08002f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADC_MspInit+0x7c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d129      	bne.n	8002f90 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_ADC_MspInit+0x80>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f70:	2303      	movs	r3, #3
 8002f72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4809      	ldr	r0, [pc, #36]	; (8002fa0 <HAL_ADC_MspInit+0x84>)
 8002f7c:	f7fd ff2c 	bl	8000dd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	2012      	movs	r0, #18
 8002f86:	f7fd fe40 	bl	8000c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f8a:	2012      	movs	r0, #18
 8002f8c:	f7fd fe59 	bl	8000c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f90:	bf00      	nop
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40012400 	.word	0x40012400
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010800 	.word	0x40010800

08002fa4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_TIM_PWM_MspInit+0x34>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10b      	bne.n	8002fce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <HAL_TIM_PWM_MspInit+0x38>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <HAL_TIM_PWM_MspInit+0x38>)
 8002fbc:	f043 0302 	orr.w	r3, r3, #2
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_TIM_PWM_MspInit+0x38>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40021000 	.word	0x40021000

08002fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a26      	ldr	r2, [pc, #152]	; (8003094 <HAL_UART_MspInit+0xb4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d145      	bne.n	800308c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_UART_MspInit+0xb8>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_UART_MspInit+0xb8>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_UART_MspInit+0xb8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <HAL_UART_MspInit+0xb8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <HAL_UART_MspInit+0xb8>)
 800301e:	f043 0308 	orr.w	r3, r3, #8
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b1c      	ldr	r3, [pc, #112]	; (8003098 <HAL_UART_MspInit+0xb8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003030:	2340      	movs	r3, #64	; 0x40
 8003032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4619      	mov	r1, r3
 8003042:	4816      	ldr	r0, [pc, #88]	; (800309c <HAL_UART_MspInit+0xbc>)
 8003044:	f7fd fec8 	bl	8000dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	4619      	mov	r1, r3
 800305a:	4810      	ldr	r0, [pc, #64]	; (800309c <HAL_UART_MspInit+0xbc>)
 800305c:	f7fd febc 	bl	8000dd8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <HAL_UART_MspInit+0xc0>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	f043 0304 	orr.w	r3, r3, #4
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_UART_MspInit+0xc0>)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2025      	movs	r0, #37	; 0x25
 8003082:	f7fd fdc2 	bl	8000c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003086:	2025      	movs	r0, #37	; 0x25
 8003088:	f7fd fddb 	bl	8000c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800308c:	bf00      	nop
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40013800 	.word	0x40013800
 8003098:	40021000 	.word	0x40021000
 800309c:	40010c00 	.word	0x40010c00
 80030a0:	40010000 	.word	0x40010000

080030a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <HardFault_Handler+0x4>

080030b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <MemManage_Handler+0x4>

080030bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <BusFault_Handler+0x4>

080030c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c6:	e7fe      	b.n	80030c6 <UsageFault_Handler+0x4>

080030c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030f0:	f7fd f872 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <ADC1_2_IRQHandler+0x10>)
 80030fe:	f7fd fa45 	bl	800058c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000090 	.word	0x20000090

0800310c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <USART1_IRQHandler+0x10>)
 8003112:	f7ff f977 	bl	8002404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000108 	.word	0x20000108

08003120 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <_sbrk+0x50>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x16>
		heap_end = &end;
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <_sbrk+0x50>)
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <_sbrk+0x54>)
 8003134:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <_sbrk+0x50>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <_sbrk+0x50>)
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	466a      	mov	r2, sp
 8003146:	4293      	cmp	r3, r2
 8003148:	d907      	bls.n	800315a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800314a:	f000 f841 	bl	80031d0 <__errno>
 800314e:	4603      	mov	r3, r0
 8003150:	220c      	movs	r2, #12
 8003152:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003154:	f04f 33ff 	mov.w	r3, #4294967295
 8003158:	e006      	b.n	8003168 <_sbrk+0x48>
	}

	heap_end += incr;
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <_sbrk+0x50>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a03      	ldr	r2, [pc, #12]	; (8003170 <_sbrk+0x50>)
 8003164:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000184 	.word	0x20000184
 8003174:	20000198 	.word	0x20000198

08003178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003186:	490d      	ldr	r1, [pc, #52]	; (80031bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800318c:	e002      	b.n	8003194 <LoopCopyDataInit>

0800318e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800318e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003192:	3304      	adds	r3, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003198:	d3f9      	bcc.n	800318e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800319c:	4c0a      	ldr	r4, [pc, #40]	; (80031c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a0:	e001      	b.n	80031a6 <LoopFillZerobss>

080031a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a4:	3204      	adds	r2, #4

080031a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a8:	d3fb      	bcc.n	80031a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031aa:	f7ff ffe5 	bl	8003178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ae:	f000 f815 	bl	80031dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031b2:	f7ff fcff 	bl	8002bb4 <main>
  bx lr
 80031b6:	4770      	bx	lr
  ldr r0, =_sdata
 80031b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80031c0:	08003bb4 	.word	0x08003bb4
  ldr r2, =_sbss
 80031c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80031c8:	20000198 	.word	0x20000198

080031cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031cc:	e7fe      	b.n	80031cc <CAN1_RX1_IRQHandler>
	...

080031d0 <__errno>:
 80031d0:	4b01      	ldr	r3, [pc, #4]	; (80031d8 <__errno+0x8>)
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	2000000c 	.word	0x2000000c

080031dc <__libc_init_array>:
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	2600      	movs	r6, #0
 80031e0:	4d0c      	ldr	r5, [pc, #48]	; (8003214 <__libc_init_array+0x38>)
 80031e2:	4c0d      	ldr	r4, [pc, #52]	; (8003218 <__libc_init_array+0x3c>)
 80031e4:	1b64      	subs	r4, r4, r5
 80031e6:	10a4      	asrs	r4, r4, #2
 80031e8:	42a6      	cmp	r6, r4
 80031ea:	d109      	bne.n	8003200 <__libc_init_array+0x24>
 80031ec:	f000 fc9c 	bl	8003b28 <_init>
 80031f0:	2600      	movs	r6, #0
 80031f2:	4d0a      	ldr	r5, [pc, #40]	; (800321c <__libc_init_array+0x40>)
 80031f4:	4c0a      	ldr	r4, [pc, #40]	; (8003220 <__libc_init_array+0x44>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	42a6      	cmp	r6, r4
 80031fc:	d105      	bne.n	800320a <__libc_init_array+0x2e>
 80031fe:	bd70      	pop	{r4, r5, r6, pc}
 8003200:	f855 3b04 	ldr.w	r3, [r5], #4
 8003204:	4798      	blx	r3
 8003206:	3601      	adds	r6, #1
 8003208:	e7ee      	b.n	80031e8 <__libc_init_array+0xc>
 800320a:	f855 3b04 	ldr.w	r3, [r5], #4
 800320e:	4798      	blx	r3
 8003210:	3601      	adds	r6, #1
 8003212:	e7f2      	b.n	80031fa <__libc_init_array+0x1e>
 8003214:	08003bac 	.word	0x08003bac
 8003218:	08003bac 	.word	0x08003bac
 800321c:	08003bac 	.word	0x08003bac
 8003220:	08003bb0 	.word	0x08003bb0

08003224 <memset>:
 8003224:	4603      	mov	r3, r0
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <siprintf>:
 8003234:	b40e      	push	{r1, r2, r3}
 8003236:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800323a:	b500      	push	{lr}
 800323c:	b09c      	sub	sp, #112	; 0x70
 800323e:	ab1d      	add	r3, sp, #116	; 0x74
 8003240:	9002      	str	r0, [sp, #8]
 8003242:	9006      	str	r0, [sp, #24]
 8003244:	9107      	str	r1, [sp, #28]
 8003246:	9104      	str	r1, [sp, #16]
 8003248:	4808      	ldr	r0, [pc, #32]	; (800326c <siprintf+0x38>)
 800324a:	4909      	ldr	r1, [pc, #36]	; (8003270 <siprintf+0x3c>)
 800324c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003250:	9105      	str	r1, [sp, #20]
 8003252:	6800      	ldr	r0, [r0, #0]
 8003254:	a902      	add	r1, sp, #8
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	f000 f868 	bl	800332c <_svfiprintf_r>
 800325c:	2200      	movs	r2, #0
 800325e:	9b02      	ldr	r3, [sp, #8]
 8003260:	701a      	strb	r2, [r3, #0]
 8003262:	b01c      	add	sp, #112	; 0x70
 8003264:	f85d eb04 	ldr.w	lr, [sp], #4
 8003268:	b003      	add	sp, #12
 800326a:	4770      	bx	lr
 800326c:	2000000c 	.word	0x2000000c
 8003270:	ffff0208 	.word	0xffff0208

08003274 <__ssputs_r>:
 8003274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	688e      	ldr	r6, [r1, #8]
 800327a:	4682      	mov	sl, r0
 800327c:	429e      	cmp	r6, r3
 800327e:	460c      	mov	r4, r1
 8003280:	4690      	mov	r8, r2
 8003282:	461f      	mov	r7, r3
 8003284:	d838      	bhi.n	80032f8 <__ssputs_r+0x84>
 8003286:	898a      	ldrh	r2, [r1, #12]
 8003288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800328c:	d032      	beq.n	80032f4 <__ssputs_r+0x80>
 800328e:	6825      	ldr	r5, [r4, #0]
 8003290:	6909      	ldr	r1, [r1, #16]
 8003292:	3301      	adds	r3, #1
 8003294:	eba5 0901 	sub.w	r9, r5, r1
 8003298:	6965      	ldr	r5, [r4, #20]
 800329a:	444b      	add	r3, r9
 800329c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032a4:	106d      	asrs	r5, r5, #1
 80032a6:	429d      	cmp	r5, r3
 80032a8:	bf38      	it	cc
 80032aa:	461d      	movcc	r5, r3
 80032ac:	0553      	lsls	r3, r2, #21
 80032ae:	d531      	bpl.n	8003314 <__ssputs_r+0xa0>
 80032b0:	4629      	mov	r1, r5
 80032b2:	f000 fb6f 	bl	8003994 <_malloc_r>
 80032b6:	4606      	mov	r6, r0
 80032b8:	b950      	cbnz	r0, 80032d0 <__ssputs_r+0x5c>
 80032ba:	230c      	movs	r3, #12
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f8ca 3000 	str.w	r3, [sl]
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	464a      	mov	r2, r9
 80032d2:	6921      	ldr	r1, [r4, #16]
 80032d4:	f000 face 	bl	8003874 <memcpy>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	6126      	str	r6, [r4, #16]
 80032e6:	444e      	add	r6, r9
 80032e8:	6026      	str	r6, [r4, #0]
 80032ea:	463e      	mov	r6, r7
 80032ec:	6165      	str	r5, [r4, #20]
 80032ee:	eba5 0509 	sub.w	r5, r5, r9
 80032f2:	60a5      	str	r5, [r4, #8]
 80032f4:	42be      	cmp	r6, r7
 80032f6:	d900      	bls.n	80032fa <__ssputs_r+0x86>
 80032f8:	463e      	mov	r6, r7
 80032fa:	4632      	mov	r2, r6
 80032fc:	4641      	mov	r1, r8
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f000 fac6 	bl	8003890 <memmove>
 8003304:	68a3      	ldr	r3, [r4, #8]
 8003306:	2000      	movs	r0, #0
 8003308:	1b9b      	subs	r3, r3, r6
 800330a:	60a3      	str	r3, [r4, #8]
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	4433      	add	r3, r6
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	e7db      	b.n	80032cc <__ssputs_r+0x58>
 8003314:	462a      	mov	r2, r5
 8003316:	f000 fbb1 	bl	8003a7c <_realloc_r>
 800331a:	4606      	mov	r6, r0
 800331c:	2800      	cmp	r0, #0
 800331e:	d1e1      	bne.n	80032e4 <__ssputs_r+0x70>
 8003320:	4650      	mov	r0, sl
 8003322:	6921      	ldr	r1, [r4, #16]
 8003324:	f000 face 	bl	80038c4 <_free_r>
 8003328:	e7c7      	b.n	80032ba <__ssputs_r+0x46>
	...

0800332c <_svfiprintf_r>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	4698      	mov	r8, r3
 8003332:	898b      	ldrh	r3, [r1, #12]
 8003334:	4607      	mov	r7, r0
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	460d      	mov	r5, r1
 800333a:	4614      	mov	r4, r2
 800333c:	b09d      	sub	sp, #116	; 0x74
 800333e:	d50e      	bpl.n	800335e <_svfiprintf_r+0x32>
 8003340:	690b      	ldr	r3, [r1, #16]
 8003342:	b963      	cbnz	r3, 800335e <_svfiprintf_r+0x32>
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	f000 fb25 	bl	8003994 <_malloc_r>
 800334a:	6028      	str	r0, [r5, #0]
 800334c:	6128      	str	r0, [r5, #16]
 800334e:	b920      	cbnz	r0, 800335a <_svfiprintf_r+0x2e>
 8003350:	230c      	movs	r3, #12
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	e0d1      	b.n	80034fe <_svfiprintf_r+0x1d2>
 800335a:	2340      	movs	r3, #64	; 0x40
 800335c:	616b      	str	r3, [r5, #20]
 800335e:	2300      	movs	r3, #0
 8003360:	9309      	str	r3, [sp, #36]	; 0x24
 8003362:	2320      	movs	r3, #32
 8003364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003368:	2330      	movs	r3, #48	; 0x30
 800336a:	f04f 0901 	mov.w	r9, #1
 800336e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003518 <_svfiprintf_r+0x1ec>
 8003376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800337a:	4623      	mov	r3, r4
 800337c:	469a      	mov	sl, r3
 800337e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003382:	b10a      	cbz	r2, 8003388 <_svfiprintf_r+0x5c>
 8003384:	2a25      	cmp	r2, #37	; 0x25
 8003386:	d1f9      	bne.n	800337c <_svfiprintf_r+0x50>
 8003388:	ebba 0b04 	subs.w	fp, sl, r4
 800338c:	d00b      	beq.n	80033a6 <_svfiprintf_r+0x7a>
 800338e:	465b      	mov	r3, fp
 8003390:	4622      	mov	r2, r4
 8003392:	4629      	mov	r1, r5
 8003394:	4638      	mov	r0, r7
 8003396:	f7ff ff6d 	bl	8003274 <__ssputs_r>
 800339a:	3001      	adds	r0, #1
 800339c:	f000 80aa 	beq.w	80034f4 <_svfiprintf_r+0x1c8>
 80033a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033a2:	445a      	add	r2, fp
 80033a4:	9209      	str	r2, [sp, #36]	; 0x24
 80033a6:	f89a 3000 	ldrb.w	r3, [sl]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a2 	beq.w	80034f4 <_svfiprintf_r+0x1c8>
 80033b0:	2300      	movs	r3, #0
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033ba:	f10a 0a01 	add.w	sl, sl, #1
 80033be:	9304      	str	r3, [sp, #16]
 80033c0:	9307      	str	r3, [sp, #28]
 80033c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033c6:	931a      	str	r3, [sp, #104]	; 0x68
 80033c8:	4654      	mov	r4, sl
 80033ca:	2205      	movs	r2, #5
 80033cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d0:	4851      	ldr	r0, [pc, #324]	; (8003518 <_svfiprintf_r+0x1ec>)
 80033d2:	f000 fa41 	bl	8003858 <memchr>
 80033d6:	9a04      	ldr	r2, [sp, #16]
 80033d8:	b9d8      	cbnz	r0, 8003412 <_svfiprintf_r+0xe6>
 80033da:	06d0      	lsls	r0, r2, #27
 80033dc:	bf44      	itt	mi
 80033de:	2320      	movmi	r3, #32
 80033e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033e4:	0711      	lsls	r1, r2, #28
 80033e6:	bf44      	itt	mi
 80033e8:	232b      	movmi	r3, #43	; 0x2b
 80033ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ee:	f89a 3000 	ldrb.w	r3, [sl]
 80033f2:	2b2a      	cmp	r3, #42	; 0x2a
 80033f4:	d015      	beq.n	8003422 <_svfiprintf_r+0xf6>
 80033f6:	4654      	mov	r4, sl
 80033f8:	2000      	movs	r0, #0
 80033fa:	f04f 0c0a 	mov.w	ip, #10
 80033fe:	9a07      	ldr	r2, [sp, #28]
 8003400:	4621      	mov	r1, r4
 8003402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003406:	3b30      	subs	r3, #48	; 0x30
 8003408:	2b09      	cmp	r3, #9
 800340a:	d94e      	bls.n	80034aa <_svfiprintf_r+0x17e>
 800340c:	b1b0      	cbz	r0, 800343c <_svfiprintf_r+0x110>
 800340e:	9207      	str	r2, [sp, #28]
 8003410:	e014      	b.n	800343c <_svfiprintf_r+0x110>
 8003412:	eba0 0308 	sub.w	r3, r0, r8
 8003416:	fa09 f303 	lsl.w	r3, r9, r3
 800341a:	4313      	orrs	r3, r2
 800341c:	46a2      	mov	sl, r4
 800341e:	9304      	str	r3, [sp, #16]
 8003420:	e7d2      	b.n	80033c8 <_svfiprintf_r+0x9c>
 8003422:	9b03      	ldr	r3, [sp, #12]
 8003424:	1d19      	adds	r1, r3, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	9103      	str	r1, [sp, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	bfbb      	ittet	lt
 800342e:	425b      	neglt	r3, r3
 8003430:	f042 0202 	orrlt.w	r2, r2, #2
 8003434:	9307      	strge	r3, [sp, #28]
 8003436:	9307      	strlt	r3, [sp, #28]
 8003438:	bfb8      	it	lt
 800343a:	9204      	strlt	r2, [sp, #16]
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	2b2e      	cmp	r3, #46	; 0x2e
 8003440:	d10c      	bne.n	800345c <_svfiprintf_r+0x130>
 8003442:	7863      	ldrb	r3, [r4, #1]
 8003444:	2b2a      	cmp	r3, #42	; 0x2a
 8003446:	d135      	bne.n	80034b4 <_svfiprintf_r+0x188>
 8003448:	9b03      	ldr	r3, [sp, #12]
 800344a:	3402      	adds	r4, #2
 800344c:	1d1a      	adds	r2, r3, #4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	9203      	str	r2, [sp, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	bfb8      	it	lt
 8003456:	f04f 33ff 	movlt.w	r3, #4294967295
 800345a:	9305      	str	r3, [sp, #20]
 800345c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800351c <_svfiprintf_r+0x1f0>
 8003460:	2203      	movs	r2, #3
 8003462:	4650      	mov	r0, sl
 8003464:	7821      	ldrb	r1, [r4, #0]
 8003466:	f000 f9f7 	bl	8003858 <memchr>
 800346a:	b140      	cbz	r0, 800347e <_svfiprintf_r+0x152>
 800346c:	2340      	movs	r3, #64	; 0x40
 800346e:	eba0 000a 	sub.w	r0, r0, sl
 8003472:	fa03 f000 	lsl.w	r0, r3, r0
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	3401      	adds	r4, #1
 800347a:	4303      	orrs	r3, r0
 800347c:	9304      	str	r3, [sp, #16]
 800347e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003482:	2206      	movs	r2, #6
 8003484:	4826      	ldr	r0, [pc, #152]	; (8003520 <_svfiprintf_r+0x1f4>)
 8003486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800348a:	f000 f9e5 	bl	8003858 <memchr>
 800348e:	2800      	cmp	r0, #0
 8003490:	d038      	beq.n	8003504 <_svfiprintf_r+0x1d8>
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <_svfiprintf_r+0x1f8>)
 8003494:	bb1b      	cbnz	r3, 80034de <_svfiprintf_r+0x1b2>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	3307      	adds	r3, #7
 800349a:	f023 0307 	bic.w	r3, r3, #7
 800349e:	3308      	adds	r3, #8
 80034a0:	9303      	str	r3, [sp, #12]
 80034a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a4:	4433      	add	r3, r6
 80034a6:	9309      	str	r3, [sp, #36]	; 0x24
 80034a8:	e767      	b.n	800337a <_svfiprintf_r+0x4e>
 80034aa:	460c      	mov	r4, r1
 80034ac:	2001      	movs	r0, #1
 80034ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b2:	e7a5      	b.n	8003400 <_svfiprintf_r+0xd4>
 80034b4:	2300      	movs	r3, #0
 80034b6:	f04f 0c0a 	mov.w	ip, #10
 80034ba:	4619      	mov	r1, r3
 80034bc:	3401      	adds	r4, #1
 80034be:	9305      	str	r3, [sp, #20]
 80034c0:	4620      	mov	r0, r4
 80034c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034c6:	3a30      	subs	r2, #48	; 0x30
 80034c8:	2a09      	cmp	r2, #9
 80034ca:	d903      	bls.n	80034d4 <_svfiprintf_r+0x1a8>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0c5      	beq.n	800345c <_svfiprintf_r+0x130>
 80034d0:	9105      	str	r1, [sp, #20]
 80034d2:	e7c3      	b.n	800345c <_svfiprintf_r+0x130>
 80034d4:	4604      	mov	r4, r0
 80034d6:	2301      	movs	r3, #1
 80034d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034dc:	e7f0      	b.n	80034c0 <_svfiprintf_r+0x194>
 80034de:	ab03      	add	r3, sp, #12
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	462a      	mov	r2, r5
 80034e4:	4638      	mov	r0, r7
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <_svfiprintf_r+0x1fc>)
 80034e8:	a904      	add	r1, sp, #16
 80034ea:	f3af 8000 	nop.w
 80034ee:	1c42      	adds	r2, r0, #1
 80034f0:	4606      	mov	r6, r0
 80034f2:	d1d6      	bne.n	80034a2 <_svfiprintf_r+0x176>
 80034f4:	89ab      	ldrh	r3, [r5, #12]
 80034f6:	065b      	lsls	r3, r3, #25
 80034f8:	f53f af2c 	bmi.w	8003354 <_svfiprintf_r+0x28>
 80034fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034fe:	b01d      	add	sp, #116	; 0x74
 8003500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003504:	ab03      	add	r3, sp, #12
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	462a      	mov	r2, r5
 800350a:	4638      	mov	r0, r7
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <_svfiprintf_r+0x1fc>)
 800350e:	a904      	add	r1, sp, #16
 8003510:	f000 f87c 	bl	800360c <_printf_i>
 8003514:	e7eb      	b.n	80034ee <_svfiprintf_r+0x1c2>
 8003516:	bf00      	nop
 8003518:	08003b78 	.word	0x08003b78
 800351c:	08003b7e 	.word	0x08003b7e
 8003520:	08003b82 	.word	0x08003b82
 8003524:	00000000 	.word	0x00000000
 8003528:	08003275 	.word	0x08003275

0800352c <_printf_common>:
 800352c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	4616      	mov	r6, r2
 8003532:	4699      	mov	r9, r3
 8003534:	688a      	ldr	r2, [r1, #8]
 8003536:	690b      	ldr	r3, [r1, #16]
 8003538:	4607      	mov	r7, r0
 800353a:	4293      	cmp	r3, r2
 800353c:	bfb8      	it	lt
 800353e:	4613      	movlt	r3, r2
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003546:	460c      	mov	r4, r1
 8003548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800354c:	b10a      	cbz	r2, 8003552 <_printf_common+0x26>
 800354e:	3301      	adds	r3, #1
 8003550:	6033      	str	r3, [r6, #0]
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	0699      	lsls	r1, r3, #26
 8003556:	bf42      	ittt	mi
 8003558:	6833      	ldrmi	r3, [r6, #0]
 800355a:	3302      	addmi	r3, #2
 800355c:	6033      	strmi	r3, [r6, #0]
 800355e:	6825      	ldr	r5, [r4, #0]
 8003560:	f015 0506 	ands.w	r5, r5, #6
 8003564:	d106      	bne.n	8003574 <_printf_common+0x48>
 8003566:	f104 0a19 	add.w	sl, r4, #25
 800356a:	68e3      	ldr	r3, [r4, #12]
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	42ab      	cmp	r3, r5
 8003572:	dc28      	bgt.n	80035c6 <_printf_common+0x9a>
 8003574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003578:	1e13      	subs	r3, r2, #0
 800357a:	6822      	ldr	r2, [r4, #0]
 800357c:	bf18      	it	ne
 800357e:	2301      	movne	r3, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	d42d      	bmi.n	80035e0 <_printf_common+0xb4>
 8003584:	4649      	mov	r1, r9
 8003586:	4638      	mov	r0, r7
 8003588:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d020      	beq.n	80035d4 <_printf_common+0xa8>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	68e5      	ldr	r5, [r4, #12]
 8003596:	f003 0306 	and.w	r3, r3, #6
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf18      	it	ne
 800359e:	2500      	movne	r5, #0
 80035a0:	6832      	ldr	r2, [r6, #0]
 80035a2:	f04f 0600 	mov.w	r6, #0
 80035a6:	68a3      	ldr	r3, [r4, #8]
 80035a8:	bf08      	it	eq
 80035aa:	1aad      	subeq	r5, r5, r2
 80035ac:	6922      	ldr	r2, [r4, #16]
 80035ae:	bf08      	it	eq
 80035b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bfc4      	itt	gt
 80035b8:	1a9b      	subgt	r3, r3, r2
 80035ba:	18ed      	addgt	r5, r5, r3
 80035bc:	341a      	adds	r4, #26
 80035be:	42b5      	cmp	r5, r6
 80035c0:	d11a      	bne.n	80035f8 <_printf_common+0xcc>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e008      	b.n	80035d8 <_printf_common+0xac>
 80035c6:	2301      	movs	r3, #1
 80035c8:	4652      	mov	r2, sl
 80035ca:	4649      	mov	r1, r9
 80035cc:	4638      	mov	r0, r7
 80035ce:	47c0      	blx	r8
 80035d0:	3001      	adds	r0, #1
 80035d2:	d103      	bne.n	80035dc <_printf_common+0xb0>
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035dc:	3501      	adds	r5, #1
 80035de:	e7c4      	b.n	800356a <_printf_common+0x3e>
 80035e0:	2030      	movs	r0, #48	; 0x30
 80035e2:	18e1      	adds	r1, r4, r3
 80035e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ee:	4422      	add	r2, r4
 80035f0:	3302      	adds	r3, #2
 80035f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035f6:	e7c5      	b.n	8003584 <_printf_common+0x58>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4622      	mov	r2, r4
 80035fc:	4649      	mov	r1, r9
 80035fe:	4638      	mov	r0, r7
 8003600:	47c0      	blx	r8
 8003602:	3001      	adds	r0, #1
 8003604:	d0e6      	beq.n	80035d4 <_printf_common+0xa8>
 8003606:	3601      	adds	r6, #1
 8003608:	e7d9      	b.n	80035be <_printf_common+0x92>
	...

0800360c <_printf_i>:
 800360c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003610:	7e0f      	ldrb	r7, [r1, #24]
 8003612:	4691      	mov	r9, r2
 8003614:	2f78      	cmp	r7, #120	; 0x78
 8003616:	4680      	mov	r8, r0
 8003618:	460c      	mov	r4, r1
 800361a:	469a      	mov	sl, r3
 800361c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800361e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003622:	d807      	bhi.n	8003634 <_printf_i+0x28>
 8003624:	2f62      	cmp	r7, #98	; 0x62
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x32>
 8003628:	2f00      	cmp	r7, #0
 800362a:	f000 80d9 	beq.w	80037e0 <_printf_i+0x1d4>
 800362e:	2f58      	cmp	r7, #88	; 0x58
 8003630:	f000 80a4 	beq.w	800377c <_printf_i+0x170>
 8003634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003638:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800363c:	e03a      	b.n	80036b4 <_printf_i+0xa8>
 800363e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003642:	2b15      	cmp	r3, #21
 8003644:	d8f6      	bhi.n	8003634 <_printf_i+0x28>
 8003646:	a101      	add	r1, pc, #4	; (adr r1, 800364c <_printf_i+0x40>)
 8003648:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800364c:	080036a5 	.word	0x080036a5
 8003650:	080036b9 	.word	0x080036b9
 8003654:	08003635 	.word	0x08003635
 8003658:	08003635 	.word	0x08003635
 800365c:	08003635 	.word	0x08003635
 8003660:	08003635 	.word	0x08003635
 8003664:	080036b9 	.word	0x080036b9
 8003668:	08003635 	.word	0x08003635
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	080037c7 	.word	0x080037c7
 800367c:	080036e9 	.word	0x080036e9
 8003680:	080037a9 	.word	0x080037a9
 8003684:	08003635 	.word	0x08003635
 8003688:	08003635 	.word	0x08003635
 800368c:	080037e9 	.word	0x080037e9
 8003690:	08003635 	.word	0x08003635
 8003694:	080036e9 	.word	0x080036e9
 8003698:	08003635 	.word	0x08003635
 800369c:	08003635 	.word	0x08003635
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	1d1a      	adds	r2, r3, #4
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	602a      	str	r2, [r5, #0]
 80036ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0a4      	b.n	8003802 <_printf_i+0x1f6>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	0606      	lsls	r6, r0, #24
 80036be:	f101 0304 	add.w	r3, r1, #4
 80036c2:	d50a      	bpl.n	80036da <_printf_i+0xce>
 80036c4:	680e      	ldr	r6, [r1, #0]
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	2e00      	cmp	r6, #0
 80036ca:	da03      	bge.n	80036d4 <_printf_i+0xc8>
 80036cc:	232d      	movs	r3, #45	; 0x2d
 80036ce:	4276      	negs	r6, r6
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	230a      	movs	r3, #10
 80036d6:	485e      	ldr	r0, [pc, #376]	; (8003850 <_printf_i+0x244>)
 80036d8:	e019      	b.n	800370e <_printf_i+0x102>
 80036da:	680e      	ldr	r6, [r1, #0]
 80036dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036e0:	602b      	str	r3, [r5, #0]
 80036e2:	bf18      	it	ne
 80036e4:	b236      	sxthne	r6, r6
 80036e6:	e7ef      	b.n	80036c8 <_printf_i+0xbc>
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	1d19      	adds	r1, r3, #4
 80036ee:	6029      	str	r1, [r5, #0]
 80036f0:	0601      	lsls	r1, r0, #24
 80036f2:	d501      	bpl.n	80036f8 <_printf_i+0xec>
 80036f4:	681e      	ldr	r6, [r3, #0]
 80036f6:	e002      	b.n	80036fe <_printf_i+0xf2>
 80036f8:	0646      	lsls	r6, r0, #25
 80036fa:	d5fb      	bpl.n	80036f4 <_printf_i+0xe8>
 80036fc:	881e      	ldrh	r6, [r3, #0]
 80036fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003700:	bf0c      	ite	eq
 8003702:	2308      	moveq	r3, #8
 8003704:	230a      	movne	r3, #10
 8003706:	4852      	ldr	r0, [pc, #328]	; (8003850 <_printf_i+0x244>)
 8003708:	2100      	movs	r1, #0
 800370a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800370e:	6865      	ldr	r5, [r4, #4]
 8003710:	2d00      	cmp	r5, #0
 8003712:	bfa8      	it	ge
 8003714:	6821      	ldrge	r1, [r4, #0]
 8003716:	60a5      	str	r5, [r4, #8]
 8003718:	bfa4      	itt	ge
 800371a:	f021 0104 	bicge.w	r1, r1, #4
 800371e:	6021      	strge	r1, [r4, #0]
 8003720:	b90e      	cbnz	r6, 8003726 <_printf_i+0x11a>
 8003722:	2d00      	cmp	r5, #0
 8003724:	d04d      	beq.n	80037c2 <_printf_i+0x1b6>
 8003726:	4615      	mov	r5, r2
 8003728:	fbb6 f1f3 	udiv	r1, r6, r3
 800372c:	fb03 6711 	mls	r7, r3, r1, r6
 8003730:	5dc7      	ldrb	r7, [r0, r7]
 8003732:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003736:	4637      	mov	r7, r6
 8003738:	42bb      	cmp	r3, r7
 800373a:	460e      	mov	r6, r1
 800373c:	d9f4      	bls.n	8003728 <_printf_i+0x11c>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d10b      	bne.n	800375a <_printf_i+0x14e>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	07de      	lsls	r6, r3, #31
 8003746:	d508      	bpl.n	800375a <_printf_i+0x14e>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	6861      	ldr	r1, [r4, #4]
 800374c:	4299      	cmp	r1, r3
 800374e:	bfde      	ittt	le
 8003750:	2330      	movle	r3, #48	; 0x30
 8003752:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003756:	f105 35ff 	addle.w	r5, r5, #4294967295
 800375a:	1b52      	subs	r2, r2, r5
 800375c:	6122      	str	r2, [r4, #16]
 800375e:	464b      	mov	r3, r9
 8003760:	4621      	mov	r1, r4
 8003762:	4640      	mov	r0, r8
 8003764:	f8cd a000 	str.w	sl, [sp]
 8003768:	aa03      	add	r2, sp, #12
 800376a:	f7ff fedf 	bl	800352c <_printf_common>
 800376e:	3001      	adds	r0, #1
 8003770:	d14c      	bne.n	800380c <_printf_i+0x200>
 8003772:	f04f 30ff 	mov.w	r0, #4294967295
 8003776:	b004      	add	sp, #16
 8003778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800377c:	4834      	ldr	r0, [pc, #208]	; (8003850 <_printf_i+0x244>)
 800377e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003782:	6829      	ldr	r1, [r5, #0]
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f851 6b04 	ldr.w	r6, [r1], #4
 800378a:	6029      	str	r1, [r5, #0]
 800378c:	061d      	lsls	r5, r3, #24
 800378e:	d514      	bpl.n	80037ba <_printf_i+0x1ae>
 8003790:	07df      	lsls	r7, r3, #31
 8003792:	bf44      	itt	mi
 8003794:	f043 0320 	orrmi.w	r3, r3, #32
 8003798:	6023      	strmi	r3, [r4, #0]
 800379a:	b91e      	cbnz	r6, 80037a4 <_printf_i+0x198>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	6023      	str	r3, [r4, #0]
 80037a4:	2310      	movs	r3, #16
 80037a6:	e7af      	b.n	8003708 <_printf_i+0xfc>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f043 0320 	orr.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2378      	movs	r3, #120	; 0x78
 80037b2:	4828      	ldr	r0, [pc, #160]	; (8003854 <_printf_i+0x248>)
 80037b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b8:	e7e3      	b.n	8003782 <_printf_i+0x176>
 80037ba:	0659      	lsls	r1, r3, #25
 80037bc:	bf48      	it	mi
 80037be:	b2b6      	uxthmi	r6, r6
 80037c0:	e7e6      	b.n	8003790 <_printf_i+0x184>
 80037c2:	4615      	mov	r5, r2
 80037c4:	e7bb      	b.n	800373e <_printf_i+0x132>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	6826      	ldr	r6, [r4, #0]
 80037ca:	1d18      	adds	r0, r3, #4
 80037cc:	6961      	ldr	r1, [r4, #20]
 80037ce:	6028      	str	r0, [r5, #0]
 80037d0:	0635      	lsls	r5, r6, #24
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	d501      	bpl.n	80037da <_printf_i+0x1ce>
 80037d6:	6019      	str	r1, [r3, #0]
 80037d8:	e002      	b.n	80037e0 <_printf_i+0x1d4>
 80037da:	0670      	lsls	r0, r6, #25
 80037dc:	d5fb      	bpl.n	80037d6 <_printf_i+0x1ca>
 80037de:	8019      	strh	r1, [r3, #0]
 80037e0:	2300      	movs	r3, #0
 80037e2:	4615      	mov	r5, r2
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7ba      	b.n	800375e <_printf_i+0x152>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	2100      	movs	r1, #0
 80037ec:	1d1a      	adds	r2, r3, #4
 80037ee:	602a      	str	r2, [r5, #0]
 80037f0:	681d      	ldr	r5, [r3, #0]
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	4628      	mov	r0, r5
 80037f6:	f000 f82f 	bl	8003858 <memchr>
 80037fa:	b108      	cbz	r0, 8003800 <_printf_i+0x1f4>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	6060      	str	r0, [r4, #4]
 8003800:	6863      	ldr	r3, [r4, #4]
 8003802:	6123      	str	r3, [r4, #16]
 8003804:	2300      	movs	r3, #0
 8003806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800380a:	e7a8      	b.n	800375e <_printf_i+0x152>
 800380c:	462a      	mov	r2, r5
 800380e:	4649      	mov	r1, r9
 8003810:	4640      	mov	r0, r8
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	47d0      	blx	sl
 8003816:	3001      	adds	r0, #1
 8003818:	d0ab      	beq.n	8003772 <_printf_i+0x166>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	079b      	lsls	r3, r3, #30
 800381e:	d413      	bmi.n	8003848 <_printf_i+0x23c>
 8003820:	68e0      	ldr	r0, [r4, #12]
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	4298      	cmp	r0, r3
 8003826:	bfb8      	it	lt
 8003828:	4618      	movlt	r0, r3
 800382a:	e7a4      	b.n	8003776 <_printf_i+0x16a>
 800382c:	2301      	movs	r3, #1
 800382e:	4632      	mov	r2, r6
 8003830:	4649      	mov	r1, r9
 8003832:	4640      	mov	r0, r8
 8003834:	47d0      	blx	sl
 8003836:	3001      	adds	r0, #1
 8003838:	d09b      	beq.n	8003772 <_printf_i+0x166>
 800383a:	3501      	adds	r5, #1
 800383c:	68e3      	ldr	r3, [r4, #12]
 800383e:	9903      	ldr	r1, [sp, #12]
 8003840:	1a5b      	subs	r3, r3, r1
 8003842:	42ab      	cmp	r3, r5
 8003844:	dcf2      	bgt.n	800382c <_printf_i+0x220>
 8003846:	e7eb      	b.n	8003820 <_printf_i+0x214>
 8003848:	2500      	movs	r5, #0
 800384a:	f104 0619 	add.w	r6, r4, #25
 800384e:	e7f5      	b.n	800383c <_printf_i+0x230>
 8003850:	08003b89 	.word	0x08003b89
 8003854:	08003b9a 	.word	0x08003b9a

08003858 <memchr>:
 8003858:	4603      	mov	r3, r0
 800385a:	b510      	push	{r4, lr}
 800385c:	b2c9      	uxtb	r1, r1
 800385e:	4402      	add	r2, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	d101      	bne.n	800386a <memchr+0x12>
 8003866:	2000      	movs	r0, #0
 8003868:	e003      	b.n	8003872 <memchr+0x1a>
 800386a:	7804      	ldrb	r4, [r0, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	428c      	cmp	r4, r1
 8003870:	d1f6      	bne.n	8003860 <memchr+0x8>
 8003872:	bd10      	pop	{r4, pc}

08003874 <memcpy>:
 8003874:	440a      	add	r2, r1
 8003876:	4291      	cmp	r1, r2
 8003878:	f100 33ff 	add.w	r3, r0, #4294967295
 800387c:	d100      	bne.n	8003880 <memcpy+0xc>
 800387e:	4770      	bx	lr
 8003880:	b510      	push	{r4, lr}
 8003882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003886:	4291      	cmp	r1, r2
 8003888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800388c:	d1f9      	bne.n	8003882 <memcpy+0xe>
 800388e:	bd10      	pop	{r4, pc}

08003890 <memmove>:
 8003890:	4288      	cmp	r0, r1
 8003892:	b510      	push	{r4, lr}
 8003894:	eb01 0402 	add.w	r4, r1, r2
 8003898:	d902      	bls.n	80038a0 <memmove+0x10>
 800389a:	4284      	cmp	r4, r0
 800389c:	4623      	mov	r3, r4
 800389e:	d807      	bhi.n	80038b0 <memmove+0x20>
 80038a0:	1e43      	subs	r3, r0, #1
 80038a2:	42a1      	cmp	r1, r4
 80038a4:	d008      	beq.n	80038b8 <memmove+0x28>
 80038a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ae:	e7f8      	b.n	80038a2 <memmove+0x12>
 80038b0:	4601      	mov	r1, r0
 80038b2:	4402      	add	r2, r0
 80038b4:	428a      	cmp	r2, r1
 80038b6:	d100      	bne.n	80038ba <memmove+0x2a>
 80038b8:	bd10      	pop	{r4, pc}
 80038ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038c2:	e7f7      	b.n	80038b4 <memmove+0x24>

080038c4 <_free_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4605      	mov	r5, r0
 80038c8:	2900      	cmp	r1, #0
 80038ca:	d040      	beq.n	800394e <_free_r+0x8a>
 80038cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d0:	1f0c      	subs	r4, r1, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bfb8      	it	lt
 80038d6:	18e4      	addlt	r4, r4, r3
 80038d8:	f000 f910 	bl	8003afc <__malloc_lock>
 80038dc:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <_free_r+0x8c>)
 80038de:	6813      	ldr	r3, [r2, #0]
 80038e0:	b933      	cbnz	r3, 80038f0 <_free_r+0x2c>
 80038e2:	6063      	str	r3, [r4, #4]
 80038e4:	6014      	str	r4, [r2, #0]
 80038e6:	4628      	mov	r0, r5
 80038e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ec:	f000 b90c 	b.w	8003b08 <__malloc_unlock>
 80038f0:	42a3      	cmp	r3, r4
 80038f2:	d908      	bls.n	8003906 <_free_r+0x42>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	1821      	adds	r1, r4, r0
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf01      	itttt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	1809      	addeq	r1, r1, r0
 8003902:	6021      	streq	r1, [r4, #0]
 8003904:	e7ed      	b.n	80038e2 <_free_r+0x1e>
 8003906:	461a      	mov	r2, r3
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b10b      	cbz	r3, 8003910 <_free_r+0x4c>
 800390c:	42a3      	cmp	r3, r4
 800390e:	d9fa      	bls.n	8003906 <_free_r+0x42>
 8003910:	6811      	ldr	r1, [r2, #0]
 8003912:	1850      	adds	r0, r2, r1
 8003914:	42a0      	cmp	r0, r4
 8003916:	d10b      	bne.n	8003930 <_free_r+0x6c>
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	4401      	add	r1, r0
 800391c:	1850      	adds	r0, r2, r1
 800391e:	4283      	cmp	r3, r0
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	d1e0      	bne.n	80038e6 <_free_r+0x22>
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4401      	add	r1, r0
 800392a:	6011      	str	r1, [r2, #0]
 800392c:	6053      	str	r3, [r2, #4]
 800392e:	e7da      	b.n	80038e6 <_free_r+0x22>
 8003930:	d902      	bls.n	8003938 <_free_r+0x74>
 8003932:	230c      	movs	r3, #12
 8003934:	602b      	str	r3, [r5, #0]
 8003936:	e7d6      	b.n	80038e6 <_free_r+0x22>
 8003938:	6820      	ldr	r0, [r4, #0]
 800393a:	1821      	adds	r1, r4, r0
 800393c:	428b      	cmp	r3, r1
 800393e:	bf01      	itttt	eq
 8003940:	6819      	ldreq	r1, [r3, #0]
 8003942:	685b      	ldreq	r3, [r3, #4]
 8003944:	1809      	addeq	r1, r1, r0
 8003946:	6021      	streq	r1, [r4, #0]
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6054      	str	r4, [r2, #4]
 800394c:	e7cb      	b.n	80038e6 <_free_r+0x22>
 800394e:	bd38      	pop	{r3, r4, r5, pc}
 8003950:	20000188 	.word	0x20000188

08003954 <sbrk_aligned>:
 8003954:	b570      	push	{r4, r5, r6, lr}
 8003956:	4e0e      	ldr	r6, [pc, #56]	; (8003990 <sbrk_aligned+0x3c>)
 8003958:	460c      	mov	r4, r1
 800395a:	6831      	ldr	r1, [r6, #0]
 800395c:	4605      	mov	r5, r0
 800395e:	b911      	cbnz	r1, 8003966 <sbrk_aligned+0x12>
 8003960:	f000 f8bc 	bl	8003adc <_sbrk_r>
 8003964:	6030      	str	r0, [r6, #0]
 8003966:	4621      	mov	r1, r4
 8003968:	4628      	mov	r0, r5
 800396a:	f000 f8b7 	bl	8003adc <_sbrk_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d00a      	beq.n	8003988 <sbrk_aligned+0x34>
 8003972:	1cc4      	adds	r4, r0, #3
 8003974:	f024 0403 	bic.w	r4, r4, #3
 8003978:	42a0      	cmp	r0, r4
 800397a:	d007      	beq.n	800398c <sbrk_aligned+0x38>
 800397c:	1a21      	subs	r1, r4, r0
 800397e:	4628      	mov	r0, r5
 8003980:	f000 f8ac 	bl	8003adc <_sbrk_r>
 8003984:	3001      	adds	r0, #1
 8003986:	d101      	bne.n	800398c <sbrk_aligned+0x38>
 8003988:	f04f 34ff 	mov.w	r4, #4294967295
 800398c:	4620      	mov	r0, r4
 800398e:	bd70      	pop	{r4, r5, r6, pc}
 8003990:	2000018c 	.word	0x2000018c

08003994 <_malloc_r>:
 8003994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003998:	1ccd      	adds	r5, r1, #3
 800399a:	f025 0503 	bic.w	r5, r5, #3
 800399e:	3508      	adds	r5, #8
 80039a0:	2d0c      	cmp	r5, #12
 80039a2:	bf38      	it	cc
 80039a4:	250c      	movcc	r5, #12
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	4607      	mov	r7, r0
 80039aa:	db01      	blt.n	80039b0 <_malloc_r+0x1c>
 80039ac:	42a9      	cmp	r1, r5
 80039ae:	d905      	bls.n	80039bc <_malloc_r+0x28>
 80039b0:	230c      	movs	r3, #12
 80039b2:	2600      	movs	r6, #0
 80039b4:	603b      	str	r3, [r7, #0]
 80039b6:	4630      	mov	r0, r6
 80039b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039bc:	4e2e      	ldr	r6, [pc, #184]	; (8003a78 <_malloc_r+0xe4>)
 80039be:	f000 f89d 	bl	8003afc <__malloc_lock>
 80039c2:	6833      	ldr	r3, [r6, #0]
 80039c4:	461c      	mov	r4, r3
 80039c6:	bb34      	cbnz	r4, 8003a16 <_malloc_r+0x82>
 80039c8:	4629      	mov	r1, r5
 80039ca:	4638      	mov	r0, r7
 80039cc:	f7ff ffc2 	bl	8003954 <sbrk_aligned>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	4604      	mov	r4, r0
 80039d4:	d14d      	bne.n	8003a72 <_malloc_r+0xde>
 80039d6:	6834      	ldr	r4, [r6, #0]
 80039d8:	4626      	mov	r6, r4
 80039da:	2e00      	cmp	r6, #0
 80039dc:	d140      	bne.n	8003a60 <_malloc_r+0xcc>
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	4631      	mov	r1, r6
 80039e2:	4638      	mov	r0, r7
 80039e4:	eb04 0803 	add.w	r8, r4, r3
 80039e8:	f000 f878 	bl	8003adc <_sbrk_r>
 80039ec:	4580      	cmp	r8, r0
 80039ee:	d13a      	bne.n	8003a66 <_malloc_r+0xd2>
 80039f0:	6821      	ldr	r1, [r4, #0]
 80039f2:	3503      	adds	r5, #3
 80039f4:	1a6d      	subs	r5, r5, r1
 80039f6:	f025 0503 	bic.w	r5, r5, #3
 80039fa:	3508      	adds	r5, #8
 80039fc:	2d0c      	cmp	r5, #12
 80039fe:	bf38      	it	cc
 8003a00:	250c      	movcc	r5, #12
 8003a02:	4638      	mov	r0, r7
 8003a04:	4629      	mov	r1, r5
 8003a06:	f7ff ffa5 	bl	8003954 <sbrk_aligned>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d02b      	beq.n	8003a66 <_malloc_r+0xd2>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	442b      	add	r3, r5
 8003a12:	6023      	str	r3, [r4, #0]
 8003a14:	e00e      	b.n	8003a34 <_malloc_r+0xa0>
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	1b52      	subs	r2, r2, r5
 8003a1a:	d41e      	bmi.n	8003a5a <_malloc_r+0xc6>
 8003a1c:	2a0b      	cmp	r2, #11
 8003a1e:	d916      	bls.n	8003a4e <_malloc_r+0xba>
 8003a20:	1961      	adds	r1, r4, r5
 8003a22:	42a3      	cmp	r3, r4
 8003a24:	6025      	str	r5, [r4, #0]
 8003a26:	bf18      	it	ne
 8003a28:	6059      	strne	r1, [r3, #4]
 8003a2a:	6863      	ldr	r3, [r4, #4]
 8003a2c:	bf08      	it	eq
 8003a2e:	6031      	streq	r1, [r6, #0]
 8003a30:	5162      	str	r2, [r4, r5]
 8003a32:	604b      	str	r3, [r1, #4]
 8003a34:	4638      	mov	r0, r7
 8003a36:	f104 060b 	add.w	r6, r4, #11
 8003a3a:	f000 f865 	bl	8003b08 <__malloc_unlock>
 8003a3e:	f026 0607 	bic.w	r6, r6, #7
 8003a42:	1d23      	adds	r3, r4, #4
 8003a44:	1af2      	subs	r2, r6, r3
 8003a46:	d0b6      	beq.n	80039b6 <_malloc_r+0x22>
 8003a48:	1b9b      	subs	r3, r3, r6
 8003a4a:	50a3      	str	r3, [r4, r2]
 8003a4c:	e7b3      	b.n	80039b6 <_malloc_r+0x22>
 8003a4e:	6862      	ldr	r2, [r4, #4]
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	bf0c      	ite	eq
 8003a54:	6032      	streq	r2, [r6, #0]
 8003a56:	605a      	strne	r2, [r3, #4]
 8003a58:	e7ec      	b.n	8003a34 <_malloc_r+0xa0>
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	6864      	ldr	r4, [r4, #4]
 8003a5e:	e7b2      	b.n	80039c6 <_malloc_r+0x32>
 8003a60:	4634      	mov	r4, r6
 8003a62:	6876      	ldr	r6, [r6, #4]
 8003a64:	e7b9      	b.n	80039da <_malloc_r+0x46>
 8003a66:	230c      	movs	r3, #12
 8003a68:	4638      	mov	r0, r7
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	f000 f84c 	bl	8003b08 <__malloc_unlock>
 8003a70:	e7a1      	b.n	80039b6 <_malloc_r+0x22>
 8003a72:	6025      	str	r5, [r4, #0]
 8003a74:	e7de      	b.n	8003a34 <_malloc_r+0xa0>
 8003a76:	bf00      	nop
 8003a78:	20000188 	.word	0x20000188

08003a7c <_realloc_r>:
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a80:	4680      	mov	r8, r0
 8003a82:	4614      	mov	r4, r2
 8003a84:	460e      	mov	r6, r1
 8003a86:	b921      	cbnz	r1, 8003a92 <_realloc_r+0x16>
 8003a88:	4611      	mov	r1, r2
 8003a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8e:	f7ff bf81 	b.w	8003994 <_malloc_r>
 8003a92:	b92a      	cbnz	r2, 8003aa0 <_realloc_r+0x24>
 8003a94:	f7ff ff16 	bl	80038c4 <_free_r>
 8003a98:	4625      	mov	r5, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aa0:	f000 f838 	bl	8003b14 <_malloc_usable_size_r>
 8003aa4:	4284      	cmp	r4, r0
 8003aa6:	4607      	mov	r7, r0
 8003aa8:	d802      	bhi.n	8003ab0 <_realloc_r+0x34>
 8003aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aae:	d812      	bhi.n	8003ad6 <_realloc_r+0x5a>
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	4640      	mov	r0, r8
 8003ab4:	f7ff ff6e 	bl	8003994 <_malloc_r>
 8003ab8:	4605      	mov	r5, r0
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d0ed      	beq.n	8003a9a <_realloc_r+0x1e>
 8003abe:	42bc      	cmp	r4, r7
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	4631      	mov	r1, r6
 8003ac4:	bf28      	it	cs
 8003ac6:	463a      	movcs	r2, r7
 8003ac8:	f7ff fed4 	bl	8003874 <memcpy>
 8003acc:	4631      	mov	r1, r6
 8003ace:	4640      	mov	r0, r8
 8003ad0:	f7ff fef8 	bl	80038c4 <_free_r>
 8003ad4:	e7e1      	b.n	8003a9a <_realloc_r+0x1e>
 8003ad6:	4635      	mov	r5, r6
 8003ad8:	e7df      	b.n	8003a9a <_realloc_r+0x1e>
	...

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4d05      	ldr	r5, [pc, #20]	; (8003af8 <_sbrk_r+0x1c>)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7ff fb1a 	bl	8003120 <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	20000190 	.word	0x20000190

08003afc <__malloc_lock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <__malloc_lock+0x8>)
 8003afe:	f000 b811 	b.w	8003b24 <__retarget_lock_acquire_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000194 	.word	0x20000194

08003b08 <__malloc_unlock>:
 8003b08:	4801      	ldr	r0, [pc, #4]	; (8003b10 <__malloc_unlock+0x8>)
 8003b0a:	f000 b80c 	b.w	8003b26 <__retarget_lock_release_recursive>
 8003b0e:	bf00      	nop
 8003b10:	20000194 	.word	0x20000194

08003b14 <_malloc_usable_size_r>:
 8003b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b18:	1f18      	subs	r0, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bfbc      	itt	lt
 8003b1e:	580b      	ldrlt	r3, [r1, r0]
 8003b20:	18c0      	addlt	r0, r0, r3
 8003b22:	4770      	bx	lr

08003b24 <__retarget_lock_acquire_recursive>:
 8003b24:	4770      	bx	lr

08003b26 <__retarget_lock_release_recursive>:
 8003b26:	4770      	bx	lr

08003b28 <_init>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	bf00      	nop
 8003b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2e:	bc08      	pop	{r3}
 8003b30:	469e      	mov	lr, r3
 8003b32:	4770      	bx	lr

08003b34 <_fini>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr
