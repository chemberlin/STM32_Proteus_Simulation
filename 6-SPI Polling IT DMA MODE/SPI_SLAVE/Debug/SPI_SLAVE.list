
SPI_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ebc  08003ebc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003ed0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003ed0  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006934  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017aa  00000000  00000000  00026969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00028118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001691d  00000000  00000000  00028ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c96  00000000  00000000  0003f80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f77a  00000000  00000000  000474a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc8  00000000  00000000  000c6c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e3c 	.word	0x08003e3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003e3c 	.word	0x08003e3c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	; (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	; (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f947 	bl	8000400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 fcfc 	bl	8003b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	; (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	; (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f95f 	bl	800046a <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 f927 	bl	8000416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000028 	.word	0x20000028

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_Delay+0x44>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004

08000268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	60d3      	str	r3, [r2, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__NVIC_GetPriorityGrouping+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	0a1b      	lsrs	r3, r3, #8
 80002ba:	f003 0307 	and.w	r3, r3, #7
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	db0b      	blt.n	80002f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	f003 021f 	and.w	r2, r3, #31
 80002e4:	4906      	ldr	r1, [pc, #24]	; (8000300 <__NVIC_EnableIRQ+0x34>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	095b      	lsrs	r3, r3, #5
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100

08000304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	6039      	str	r1, [r7, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db0a      	blt.n	800032e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	b2da      	uxtb	r2, r3
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <__NVIC_SetPriority+0x4c>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	0112      	lsls	r2, r2, #4
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	440b      	add	r3, r1
 8000328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800032c:	e00a      	b.n	8000344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4908      	ldr	r1, [pc, #32]	; (8000354 <__NVIC_SetPriority+0x50>)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	f003 030f 	and.w	r3, r3, #15
 800033a:	3b04      	subs	r3, #4
 800033c:	0112      	lsls	r2, r2, #4
 800033e:	b2d2      	uxtb	r2, r2
 8000340:	440b      	add	r3, r1
 8000342:	761a      	strb	r2, [r3, #24]
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000e100 	.word	0xe000e100
 8000354:	e000ed00 	.word	0xe000ed00

08000358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000358:	b480      	push	{r7}
 800035a:	b089      	sub	sp, #36	; 0x24
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f003 0307 	and.w	r3, r3, #7
 800036a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	f1c3 0307 	rsb	r3, r3, #7
 8000372:	2b04      	cmp	r3, #4
 8000374:	bf28      	it	cs
 8000376:	2304      	movcs	r3, #4
 8000378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	3304      	adds	r3, #4
 800037e:	2b06      	cmp	r3, #6
 8000380:	d902      	bls.n	8000388 <NVIC_EncodePriority+0x30>
 8000382:	69fb      	ldr	r3, [r7, #28]
 8000384:	3b03      	subs	r3, #3
 8000386:	e000      	b.n	800038a <NVIC_EncodePriority+0x32>
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800038c:	f04f 32ff 	mov.w	r2, #4294967295
 8000390:	69bb      	ldr	r3, [r7, #24]
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	43da      	mvns	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	401a      	ands	r2, r3
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003a0:	f04f 31ff 	mov.w	r1, #4294967295
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	43d9      	mvns	r1, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003b0:	4313      	orrs	r3, r2
         );
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003cc:	d301      	bcc.n	80003d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ce:	2301      	movs	r3, #1
 80003d0:	e00f      	b.n	80003f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <SysTick_Config+0x40>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	3b01      	subs	r3, #1
 80003d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003da:	210f      	movs	r1, #15
 80003dc:	f04f 30ff 	mov.w	r0, #4294967295
 80003e0:	f7ff ff90 	bl	8000304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <SysTick_Config+0x40>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <SysTick_Config+0x40>)
 80003ec:	2207      	movs	r2, #7
 80003ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f0:	2300      	movs	r3, #0
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	e000e010 	.word	0xe000e010

08000400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f7ff ff2d 	bl	8000268 <__NVIC_SetPriorityGrouping>
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000416:	b580      	push	{r7, lr}
 8000418:	b086      	sub	sp, #24
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000428:	f7ff ff42 	bl	80002b0 <__NVIC_GetPriorityGrouping>
 800042c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	68b9      	ldr	r1, [r7, #8]
 8000432:	6978      	ldr	r0, [r7, #20]
 8000434:	f7ff ff90 	bl	8000358 <NVIC_EncodePriority>
 8000438:	4602      	mov	r2, r0
 800043a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff5f 	bl	8000304 <__NVIC_SetPriority>
}
 8000446:	bf00      	nop
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	4603      	mov	r3, r0
 8000456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff35 	bl	80002cc <__NVIC_EnableIRQ>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	b082      	sub	sp, #8
 800046e:	af00      	add	r7, sp, #0
 8000470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f7ff ffa2 	bl	80003bc <SysTick_Config>
 8000478:	4603      	mov	r3, r0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800048c:	2300      	movs	r3, #0
 800048e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e043      	b.n	8000522 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	461a      	mov	r2, r3
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <HAL_DMA_Init+0xa8>)
 80004a2:	4413      	add	r3, r2
 80004a4:	4a22      	ldr	r2, [pc, #136]	; (8000530 <HAL_DMA_Init+0xac>)
 80004a6:	fba2 2303 	umull	r2, r3, r2, r3
 80004aa:	091b      	lsrs	r3, r3, #4
 80004ac:	009a      	lsls	r2, r3, #2
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a1f      	ldr	r2, [pc, #124]	; (8000534 <HAL_DMA_Init+0xb0>)
 80004b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2202      	movs	r2, #2
 80004bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	68db      	ldr	r3, [r3, #12]
 80004e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	4313      	orrs	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2200      	movs	r2, #0
 800050e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2201      	movs	r2, #1
 8000514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	bffdfff8 	.word	0xbffdfff8
 8000530:	cccccccd 	.word	0xcccccccd
 8000534:	40020000 	.word	0x40020000

08000538 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d101      	bne.n	8000558 <HAL_DMA_Start_IT+0x20>
 8000554:	2302      	movs	r3, #2
 8000556:	e04a      	b.n	80005ee <HAL_DMA_Start_IT+0xb6>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2201      	movs	r2, #1
 800055c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000566:	2b01      	cmp	r3, #1
 8000568:	d13a      	bne.n	80005e0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2202      	movs	r2, #2
 800056e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2200      	movs	r2, #0
 8000576:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f022 0201 	bic.w	r2, r2, #1
 8000586:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	68b9      	ldr	r1, [r7, #8]
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f000 f9e8 	bl	8000964 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000598:	2b00      	cmp	r3, #0
 800059a:	d008      	beq.n	80005ae <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f042 020e 	orr.w	r2, r2, #14
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e00f      	b.n	80005ce <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f022 0204 	bic.w	r2, r2, #4
 80005bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f042 020a 	orr.w	r2, r2, #10
 80005cc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f042 0201 	orr.w	r2, r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e005      	b.n	80005ec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80005e8:	2302      	movs	r3, #2
 80005ea:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80005ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3718      	adds	r7, #24
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000608:	2b02      	cmp	r3, #2
 800060a:	d008      	beq.n	800061e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2204      	movs	r2, #4
 8000610:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2200      	movs	r2, #0
 8000616:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e020      	b.n	8000660 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f022 020e 	bic.w	r2, r2, #14
 800062c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f022 0201 	bic.w	r2, r2, #1
 800063c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000646:	2101      	movs	r1, #1
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2201      	movs	r2, #1
 8000652:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
	...

0800066c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800067e:	2b02      	cmp	r3, #2
 8000680:	d005      	beq.n	800068e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2204      	movs	r2, #4
 8000686:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	e051      	b.n	8000732 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f022 020e 	bic.w	r2, r2, #14
 800069c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f022 0201 	bic.w	r2, r2, #1
 80006ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <HAL_DMA_Abort_IT+0xd0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d029      	beq.n	800070c <HAL_DMA_Abort_IT+0xa0>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a20      	ldr	r2, [pc, #128]	; (8000740 <HAL_DMA_Abort_IT+0xd4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d022      	beq.n	8000708 <HAL_DMA_Abort_IT+0x9c>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1f      	ldr	r2, [pc, #124]	; (8000744 <HAL_DMA_Abort_IT+0xd8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d01a      	beq.n	8000702 <HAL_DMA_Abort_IT+0x96>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <HAL_DMA_Abort_IT+0xdc>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d012      	beq.n	80006fc <HAL_DMA_Abort_IT+0x90>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_DMA_Abort_IT+0xe0>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d00a      	beq.n	80006f6 <HAL_DMA_Abort_IT+0x8a>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1a      	ldr	r2, [pc, #104]	; (8000750 <HAL_DMA_Abort_IT+0xe4>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d102      	bne.n	80006f0 <HAL_DMA_Abort_IT+0x84>
 80006ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006ee:	e00e      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 80006f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006f4:	e00b      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 80006f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006fa:	e008      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	e005      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	e002      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 8000708:	2310      	movs	r3, #16
 800070a:	e000      	b.n	800070e <HAL_DMA_Abort_IT+0xa2>
 800070c:	2301      	movs	r3, #1
 800070e:	4a11      	ldr	r2, [pc, #68]	; (8000754 <HAL_DMA_Abort_IT+0xe8>)
 8000710:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2201      	movs	r2, #1
 8000716:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	4798      	blx	r3
    } 
  }
  return status;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020008 	.word	0x40020008
 8000740:	4002001c 	.word	0x4002001c
 8000744:	40020030 	.word	0x40020030
 8000748:	40020044 	.word	0x40020044
 800074c:	40020058 	.word	0x40020058
 8000750:	4002006c 	.word	0x4002006c
 8000754:	40020000 	.word	0x40020000

08000758 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	2204      	movs	r2, #4
 8000776:	409a      	lsls	r2, r3
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4013      	ands	r3, r2
 800077c:	2b00      	cmp	r3, #0
 800077e:	d04f      	beq.n	8000820 <HAL_DMA_IRQHandler+0xc8>
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	2b00      	cmp	r3, #0
 8000788:	d04a      	beq.n	8000820 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f022 0204 	bic.w	r2, r2, #4
 80007a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a66      	ldr	r2, [pc, #408]	; (8000948 <HAL_DMA_IRQHandler+0x1f0>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d029      	beq.n	8000806 <HAL_DMA_IRQHandler+0xae>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a65      	ldr	r2, [pc, #404]	; (800094c <HAL_DMA_IRQHandler+0x1f4>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d022      	beq.n	8000802 <HAL_DMA_IRQHandler+0xaa>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a63      	ldr	r2, [pc, #396]	; (8000950 <HAL_DMA_IRQHandler+0x1f8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d01a      	beq.n	80007fc <HAL_DMA_IRQHandler+0xa4>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a62      	ldr	r2, [pc, #392]	; (8000954 <HAL_DMA_IRQHandler+0x1fc>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d012      	beq.n	80007f6 <HAL_DMA_IRQHandler+0x9e>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a60      	ldr	r2, [pc, #384]	; (8000958 <HAL_DMA_IRQHandler+0x200>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d00a      	beq.n	80007f0 <HAL_DMA_IRQHandler+0x98>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a5f      	ldr	r2, [pc, #380]	; (800095c <HAL_DMA_IRQHandler+0x204>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d102      	bne.n	80007ea <HAL_DMA_IRQHandler+0x92>
 80007e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e8:	e00e      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 80007ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007ee:	e00b      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 80007f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80007f4:	e008      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 80007f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007fa:	e005      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	e002      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 8000802:	2340      	movs	r3, #64	; 0x40
 8000804:	e000      	b.n	8000808 <HAL_DMA_IRQHandler+0xb0>
 8000806:	2304      	movs	r3, #4
 8000808:	4a55      	ldr	r2, [pc, #340]	; (8000960 <HAL_DMA_IRQHandler+0x208>)
 800080a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000810:	2b00      	cmp	r3, #0
 8000812:	f000 8094 	beq.w	800093e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800081e:	e08e      	b.n	800093e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	2202      	movs	r2, #2
 8000826:	409a      	lsls	r2, r3
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	4013      	ands	r3, r2
 800082c:	2b00      	cmp	r3, #0
 800082e:	d056      	beq.n	80008de <HAL_DMA_IRQHandler+0x186>
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	2b00      	cmp	r3, #0
 8000838:	d051      	beq.n	80008de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10b      	bne.n	8000860 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f022 020a 	bic.w	r2, r2, #10
 8000856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2201      	movs	r2, #1
 800085c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a38      	ldr	r2, [pc, #224]	; (8000948 <HAL_DMA_IRQHandler+0x1f0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d029      	beq.n	80008be <HAL_DMA_IRQHandler+0x166>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a37      	ldr	r2, [pc, #220]	; (800094c <HAL_DMA_IRQHandler+0x1f4>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d022      	beq.n	80008ba <HAL_DMA_IRQHandler+0x162>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a35      	ldr	r2, [pc, #212]	; (8000950 <HAL_DMA_IRQHandler+0x1f8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d01a      	beq.n	80008b4 <HAL_DMA_IRQHandler+0x15c>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a34      	ldr	r2, [pc, #208]	; (8000954 <HAL_DMA_IRQHandler+0x1fc>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d012      	beq.n	80008ae <HAL_DMA_IRQHandler+0x156>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <HAL_DMA_IRQHandler+0x200>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d00a      	beq.n	80008a8 <HAL_DMA_IRQHandler+0x150>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a31      	ldr	r2, [pc, #196]	; (800095c <HAL_DMA_IRQHandler+0x204>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d102      	bne.n	80008a2 <HAL_DMA_IRQHandler+0x14a>
 800089c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80008a0:	e00e      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008a6:	e00b      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ac:	e008      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	e005      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b8:	e002      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008ba:	2320      	movs	r3, #32
 80008bc:	e000      	b.n	80008c0 <HAL_DMA_IRQHandler+0x168>
 80008be:	2302      	movs	r3, #2
 80008c0:	4a27      	ldr	r2, [pc, #156]	; (8000960 <HAL_DMA_IRQHandler+0x208>)
 80008c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d034      	beq.n	800093e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80008dc:	e02f      	b.n	800093e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	2208      	movs	r2, #8
 80008e4:	409a      	lsls	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d028      	beq.n	8000940 <HAL_DMA_IRQHandler+0x1e8>
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d023      	beq.n	8000940 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 020e 	bic.w	r2, r2, #14
 8000906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2201      	movs	r2, #1
 800091c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2201      	movs	r2, #1
 8000922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	2b00      	cmp	r3, #0
 8000934:	d004      	beq.n	8000940 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	4798      	blx	r3
    }
  }
  return;
 800093e:	bf00      	nop
 8000940:	bf00      	nop
}
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40020008 	.word	0x40020008
 800094c:	4002001c 	.word	0x4002001c
 8000950:	40020030 	.word	0x40020030
 8000954:	40020044 	.word	0x40020044
 8000958:	40020058 	.word	0x40020058
 800095c:	4002006c 	.word	0x4002006c
 8000960:	40020000 	.word	0x40020000

08000964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800097a:	2101      	movs	r1, #1
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b10      	cmp	r3, #16
 8000990:	d108      	bne.n	80009a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80009a2:	e007      	b.n	80009b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	60da      	str	r2, [r3, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
	...

080009c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b08b      	sub	sp, #44	; 0x2c
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d2:	e161      	b.n	8000c98 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d4:	2201      	movs	r2, #1
 80009d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	69fa      	ldr	r2, [r7, #28]
 80009e4:	4013      	ands	r3, r2
 80009e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	f040 8150 	bne.w	8000c92 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	4a97      	ldr	r2, [pc, #604]	; (8000c54 <HAL_GPIO_Init+0x294>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d05e      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 80009fc:	4a95      	ldr	r2, [pc, #596]	; (8000c54 <HAL_GPIO_Init+0x294>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d875      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <HAL_GPIO_Init+0x298>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d058      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a08:	4a93      	ldr	r2, [pc, #588]	; (8000c58 <HAL_GPIO_Init+0x298>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d86f      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a0e:	4a93      	ldr	r2, [pc, #588]	; (8000c5c <HAL_GPIO_Init+0x29c>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d052      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a14:	4a91      	ldr	r2, [pc, #580]	; (8000c5c <HAL_GPIO_Init+0x29c>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d869      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a1a:	4a91      	ldr	r2, [pc, #580]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d04c      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a20:	4a8f      	ldr	r2, [pc, #572]	; (8000c60 <HAL_GPIO_Init+0x2a0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d863      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a26:	4a8f      	ldr	r2, [pc, #572]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d046      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
 8000a2c:	4a8d      	ldr	r2, [pc, #564]	; (8000c64 <HAL_GPIO_Init+0x2a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d85d      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d82a      	bhi.n	8000a8c <HAL_GPIO_Init+0xcc>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d859      	bhi.n	8000aee <HAL_GPIO_Init+0x12e>
 8000a3a:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <HAL_GPIO_Init+0x80>)
 8000a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a40:	08000abb 	.word	0x08000abb
 8000a44:	08000a95 	.word	0x08000a95
 8000a48:	08000aa7 	.word	0x08000aa7
 8000a4c:	08000ae9 	.word	0x08000ae9
 8000a50:	08000aef 	.word	0x08000aef
 8000a54:	08000aef 	.word	0x08000aef
 8000a58:	08000aef 	.word	0x08000aef
 8000a5c:	08000aef 	.word	0x08000aef
 8000a60:	08000aef 	.word	0x08000aef
 8000a64:	08000aef 	.word	0x08000aef
 8000a68:	08000aef 	.word	0x08000aef
 8000a6c:	08000aef 	.word	0x08000aef
 8000a70:	08000aef 	.word	0x08000aef
 8000a74:	08000aef 	.word	0x08000aef
 8000a78:	08000aef 	.word	0x08000aef
 8000a7c:	08000aef 	.word	0x08000aef
 8000a80:	08000aef 	.word	0x08000aef
 8000a84:	08000a9d 	.word	0x08000a9d
 8000a88:	08000ab1 	.word	0x08000ab1
 8000a8c:	4a76      	ldr	r2, [pc, #472]	; (8000c68 <HAL_GPIO_Init+0x2a8>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d013      	beq.n	8000aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a92:	e02c      	b.n	8000aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	623b      	str	r3, [r7, #32]
          break;
 8000a9a:	e029      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e024      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	3308      	adds	r3, #8
 8000aac:	623b      	str	r3, [r7, #32]
          break;
 8000aae:	e01f      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	623b      	str	r3, [r7, #32]
          break;
 8000ab8:	e01a      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e013      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d105      	bne.n	8000adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	611a      	str	r2, [r3, #16]
          break;
 8000ada:	e009      	b.n	8000af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000adc:	2308      	movs	r3, #8
 8000ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69fa      	ldr	r2, [r7, #28]
 8000ae4:	615a      	str	r2, [r3, #20]
          break;
 8000ae6:	e003      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
          break;
 8000aec:	e000      	b.n	8000af0 <HAL_GPIO_Init+0x130>
          break;
 8000aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	2bff      	cmp	r3, #255	; 0xff
 8000af4:	d801      	bhi.n	8000afa <HAL_GPIO_Init+0x13a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	e001      	b.n	8000afe <HAL_GPIO_Init+0x13e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3304      	adds	r3, #4
 8000afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	; 0xff
 8000b04:	d802      	bhi.n	8000b0c <HAL_GPIO_Init+0x14c>
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x152>
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	3b08      	subs	r3, #8
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	210f      	movs	r1, #15
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	401a      	ands	r2, r3
 8000b24:	6a39      	ldr	r1, [r7, #32]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80a9 	beq.w	8000c92 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b40:	4b4a      	ldr	r3, [pc, #296]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a49      	ldr	r2, [pc, #292]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b47      	ldr	r3, [pc, #284]	; (8000c6c <HAL_GPIO_Init+0x2ac>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b58:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <HAL_GPIO_Init+0x2b4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <HAL_GPIO_Init+0x2b8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1dc>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3b      	ldr	r2, [pc, #236]	; (8000c7c <HAL_GPIO_Init+0x2bc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1d8>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1e2>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb2:	492f      	ldr	r1, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x2b0>)
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	492b      	ldr	r1, [pc, #172]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	600b      	str	r3, [r1, #0]
 8000bd8:	e006      	b.n	8000be8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	4927      	ldr	r1, [pc, #156]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4921      	ldr	r1, [pc, #132]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	e006      	b.n	8000c10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	491d      	ldr	r1, [pc, #116]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	4917      	ldr	r1, [pc, #92]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	608b      	str	r3, [r1, #8]
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	43db      	mvns	r3, r3
 8000c32:	4913      	ldr	r1, [pc, #76]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01f      	beq.n	8000c84 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	490d      	ldr	r1, [pc, #52]	; (8000c80 <HAL_GPIO_Init+0x2c0>)
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60cb      	str	r3, [r1, #12]
 8000c50:	e01f      	b.n	8000c92 <HAL_GPIO_Init+0x2d2>
 8000c52:	bf00      	nop
 8000c54:	10320000 	.word	0x10320000
 8000c58:	10310000 	.word	0x10310000
 8000c5c:	10220000 	.word	0x10220000
 8000c60:	10210000 	.word	0x10210000
 8000c64:	10120000 	.word	0x10120000
 8000c68:	10110000 	.word	0x10110000
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	40010800 	.word	0x40010800
 8000c78:	40010c00 	.word	0x40010c00
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_GPIO_Init+0x2f4>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4909      	ldr	r1, [pc, #36]	; (8000cb4 <HAL_GPIO_Init+0x2f4>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3301      	adds	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f47f ae96 	bne.w	80009d4 <HAL_GPIO_Init+0x14>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	372c      	adds	r7, #44	; 0x2c
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	887b      	ldrh	r3, [r7, #2]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d002      	beq.n	8000cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	807b      	strh	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cf6:	787b      	ldrb	r3, [r7, #1]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d02:	e003      	b.n	8000d0c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d04:	887b      	ldrh	r3, [r7, #2]
 8000d06:	041a      	lsls	r2, r3, #16
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	611a      	str	r2, [r3, #16]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e272      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8087 	beq.w	8000e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d38:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d00c      	beq.n	8000d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d44:	4b8f      	ldr	r3, [pc, #572]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 030c 	and.w	r3, r3, #12
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d112      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
 8000d50:	4b8c      	ldr	r3, [pc, #560]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d5c:	d10b      	bne.n	8000d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5e:	4b89      	ldr	r3, [pc, #548]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d06c      	beq.n	8000e44 <HAL_RCC_OscConfig+0x12c>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d168      	bne.n	8000e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e24c      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7e:	d106      	bne.n	8000d8e <HAL_RCC_OscConfig+0x76>
 8000d80:	4b80      	ldr	r3, [pc, #512]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a7f      	ldr	r2, [pc, #508]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e02e      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x98>
 8000d96:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a7a      	ldr	r2, [pc, #488]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b78      	ldr	r3, [pc, #480]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a77      	ldr	r2, [pc, #476]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e01d      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db8:	d10c      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xbc>
 8000dba:	4b72      	ldr	r3, [pc, #456]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a71      	ldr	r2, [pc, #452]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b6f      	ldr	r3, [pc, #444]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a6e      	ldr	r2, [pc, #440]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	e00b      	b.n	8000dec <HAL_RCC_OscConfig+0xd4>
 8000dd4:	4b6b      	ldr	r3, [pc, #428]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a6a      	ldr	r2, [pc, #424]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b68      	ldr	r3, [pc, #416]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a67      	ldr	r2, [pc, #412]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d013      	beq.n	8000e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fa0a 	bl	800020c <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fa06 	bl	800020c <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	; 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e200      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0e:	4b5d      	ldr	r3, [pc, #372]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0xe4>
 8000e1a:	e014      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e1c:	f7ff f9f6 	bl	800020c <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff f9f2 	bl	800020c <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e1ec      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f0      	bne.n	8000e24 <HAL_RCC_OscConfig+0x10c>
 8000e42:	e000      	b.n	8000e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d063      	beq.n	8000f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d11c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d116      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d005      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d001      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e1c0      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4939      	ldr	r1, [pc, #228]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d020      	beq.n	8000eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb2:	f7ff f9ab 	bl	800020c <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eba:	f7ff f9a7 	bl	800020c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e1a1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ecc:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed8:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4927      	ldr	r1, [pc, #156]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	600b      	str	r3, [r1, #0]
 8000eec:	e015      	b.n	8000f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff f98a 	bl	800020c <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efc:	f7ff f986 	bl	800020c <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e180      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d03a      	beq.n	8000f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d019      	beq.n	8000f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff f96a 	bl	800020c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff f966 	bl	800020c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e160      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 faa6 	bl	80014ac <RCC_Delay>
 8000f60:	e01c      	b.n	8000f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f68:	f7ff f950 	bl	800020c <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6e:	e00f      	b.n	8000f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f70:	f7ff f94c 	bl	800020c <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d908      	bls.n	8000f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e146      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	42420000 	.word	0x42420000
 8000f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f90:	4b92      	ldr	r3, [pc, #584]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e9      	bne.n	8000f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a6 	beq.w	80010f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fae:	4b8b      	ldr	r3, [pc, #556]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a87      	ldr	r2, [pc, #540]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b85      	ldr	r3, [pc, #532]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd6:	4b82      	ldr	r3, [pc, #520]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d118      	bne.n	8001014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7e      	ldr	r2, [pc, #504]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fee:	f7ff f90d 	bl	800020c <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff6:	f7ff f909 	bl	800020c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b64      	cmp	r3, #100	; 0x64
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e103      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x4c8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x312>
 800101c:	4b6f      	ldr	r3, [pc, #444]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a6e      	ldr	r2, [pc, #440]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6213      	str	r3, [r2, #32]
 8001028:	e02d      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0x334>
 8001032:	4b6a      	ldr	r3, [pc, #424]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a69      	ldr	r2, [pc, #420]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	6213      	str	r3, [r2, #32]
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a66      	ldr	r2, [pc, #408]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0304 	bic.w	r3, r3, #4
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	e01c      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b05      	cmp	r3, #5
 8001052:	d10c      	bne.n	800106e <HAL_RCC_OscConfig+0x356>
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a5d      	ldr	r2, [pc, #372]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e00b      	b.n	8001086 <HAL_RCC_OscConfig+0x36e>
 800106e:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a5a      	ldr	r2, [pc, #360]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b58      	ldr	r3, [pc, #352]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a57      	ldr	r2, [pc, #348]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108e:	f7ff f8bd 	bl	800020c <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001094:	e00a      	b.n	80010ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001096:	f7ff f8b9 	bl	800020c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e0b1      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ac:	4b4b      	ldr	r3, [pc, #300]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0ee      	beq.n	8001096 <HAL_RCC_OscConfig+0x37e>
 80010b8:	e014      	b.n	80010e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff f8a7 	bl	800020c <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff f8a3 	bl	800020c <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e09b      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d105      	bne.n	80010f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ea:	4b3c      	ldr	r3, [pc, #240]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a3b      	ldr	r2, [pc, #236]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 8087 	beq.w	800120e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 030c 	and.w	r3, r3, #12
 8001108:	2b08      	cmp	r3, #8
 800110a:	d061      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d146      	bne.n	80011a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001114:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111a:	f7ff f877 	bl	800020c <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff f873 	bl	800020c <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e06d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001148:	d108      	bne.n	800115c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001158:	4313      	orrs	r3, r2
 800115a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a19      	ldr	r1, [r3, #32]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	430b      	orrs	r3, r1
 800116e:	491b      	ldr	r1, [pc, #108]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001170:	4313      	orrs	r3, r2
 8001172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117a:	f7ff f847 	bl	800020c <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001182:	f7ff f843 	bl	800020c <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e03d      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f0      	beq.n	8001182 <HAL_RCC_OscConfig+0x46a>
 80011a0:	e035      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_RCC_OscConfig+0x4cc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff f830 	bl	800020c <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff f82c 	bl	800020c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e026      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x498>
 80011ce:	e01e      	b.n	800120e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d107      	bne.n	80011e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e019      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40007000 	.word	0x40007000
 80011e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_RCC_OscConfig+0x500>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d106      	bne.n	800120a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d0      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d910      	bls.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b67      	ldr	r3, [pc, #412]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0207 	bic.w	r2, r3, #7
 8001246:	4965      	ldr	r1, [pc, #404]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0b8      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	d005      	beq.n	8001284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001278:	4b59      	ldr	r3, [pc, #356]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	4a58      	ldr	r2, [pc, #352]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800129a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129c:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	494d      	ldr	r1, [pc, #308]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d040      	beq.n	800133c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d115      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e07f      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d107      	bne.n	80012ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e073      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e06b      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 0203 	bic.w	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4936      	ldr	r1, [pc, #216]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800130c:	f7fe ff7e 	bl	800020c <HAL_GetTick>
 8001310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001312:	e00a      	b.n	800132a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	f7fe ff7a 	bl	800020c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001322:	4293      	cmp	r3, r2
 8001324:	d901      	bls.n	800132a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e053      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f003 020c 	and.w	r2, r3, #12
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d1eb      	bne.n	8001314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800133c:	4b27      	ldr	r3, [pc, #156]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d210      	bcs.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4922      	ldr	r1, [pc, #136]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e032      	b.n	80013d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4916      	ldr	r1, [pc, #88]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013aa:	f000 f821 	bl	80013f0 <HAL_RCC_GetSysClockFreq>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	490a      	ldr	r1, [pc, #40]	; (80013e4 <HAL_RCC_ClockConfig+0x1c8>)
 80013bc:	5ccb      	ldrb	r3, [r1, r3]
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1cc>)
 80013c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1d0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe fedc 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08003eac 	.word	0x08003eac
 80013e8:	20000008 	.word	0x20000008
 80013ec:	20000000 	.word	0x20000000

080013f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f0:	b490      	push	{r4, r7}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_RCC_GetSysClockFreq+0xac>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001400:	f240 2301 	movw	r3, #513	; 0x201
 8001404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b04      	cmp	r3, #4
 8001428:	d002      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x40>
 800142a:	2b08      	cmp	r3, #8
 800142c:	d003      	beq.n	8001436 <HAL_RCC_GetSysClockFreq+0x46>
 800142e:	e02b      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001430:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001432:	623b      	str	r3, [r7, #32]
      break;
 8001434:	e02b      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	0c9b      	lsrs	r3, r3, #18
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3328      	adds	r3, #40	; 0x28
 8001440:	443b      	add	r3, r7
 8001442:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001446:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d012      	beq.n	8001478 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0c5b      	lsrs	r3, r3, #17
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	3328      	adds	r3, #40	; 0x28
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146a:	fb03 f202 	mul.w	r2, r3, r2
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	fbb2 f3f3 	udiv	r3, r2, r3
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	e004      	b.n	8001482 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	623b      	str	r3, [r7, #32]
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800148a:	623b      	str	r3, [r7, #32]
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	6a3b      	ldr	r3, [r7, #32]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bc90      	pop	{r4, r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	08003e54 	.word	0x08003e54
 80014a0:	40021000 	.word	0x40021000
 80014a4:	007a1200 	.word	0x007a1200
 80014a8:	003d0900 	.word	0x003d0900

080014ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <RCC_Delay+0x34>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <RCC_Delay+0x38>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a5b      	lsrs	r3, r3, #9
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014c8:	bf00      	nop
  }
  while (Delay --);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1e5a      	subs	r2, r3, #1
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f9      	bne.n	80014c8 <RCC_Delay+0x1c>
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000008 	.word	0x20000008
 80014e4:	10624dd3 	.word	0x10624dd3

080014e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e076      	b.n	80015e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d108      	bne.n	8001514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800150a:	d009      	beq.n	8001520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	e005      	b.n	8001520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f002 fb4c 	bl	8003bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001556:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a4:	ea42 0103 	orr.w	r1, r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	0c1a      	lsrs	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f002 0204 	and.w	r2, r2, #4
 80015c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69da      	ldr	r2, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	4613      	mov	r3, r2
 80015fe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800160c:	d112      	bne.n	8001634 <HAL_SPI_Receive+0x44>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10e      	bne.n	8001634 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2204      	movs	r2, #4
 800161a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800161e:	88fa      	ldrh	r2, [r7, #6]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4613      	mov	r3, r2
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f000 f8f1 	bl	8001812 <HAL_SPI_TransmitReceive>
 8001630:	4603      	mov	r3, r0
 8001632:	e0ea      	b.n	800180a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_SPI_Receive+0x52>
 800163e:	2302      	movs	r3, #2
 8001640:	e0e3      	b.n	800180a <HAL_SPI_Receive+0x21a>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800164a:	f7fe fddf 	bl	800020c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d002      	beq.n	8001662 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800165c:	2302      	movs	r3, #2
 800165e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001660:	e0ca      	b.n	80017f8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <HAL_SPI_Receive+0x7e>
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001672:	e0c1      	b.n	80017f8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2204      	movs	r2, #4
 8001678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	88fa      	ldrh	r2, [r7, #6]
 800168c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ba:	d10f      	bne.n	80016dc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	d007      	beq.n	80016fa <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d162      	bne.n	80017c8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001702:	e02e      	b.n	8001762 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d115      	bne.n	800173e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f103 020c 	add.w	r2, r3, #12
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	7812      	ldrb	r2, [r2, #0]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001732:	b29b      	uxth	r3, r3
 8001734:	3b01      	subs	r3, #1
 8001736:	b29a      	uxth	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800173c:	e011      	b.n	8001762 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800173e:	f7fe fd65 	bl	800020c <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d803      	bhi.n	8001756 <HAL_SPI_Receive+0x166>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d102      	bne.n	800175c <HAL_SPI_Receive+0x16c>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001760:	e04a      	b.n	80017f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001766:	b29b      	uxth	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1cb      	bne.n	8001704 <HAL_SPI_Receive+0x114>
 800176c:	e031      	b.n	80017d2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d113      	bne.n	80017a4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	b292      	uxth	r2, r2
 8001788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	1c9a      	adds	r2, r3, #2
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80017a2:	e011      	b.n	80017c8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017a4:	f7fe fd32 	bl	800020c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d803      	bhi.n	80017bc <HAL_SPI_Receive+0x1cc>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ba:	d102      	bne.n	80017c2 <HAL_SPI_Receive+0x1d2>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80017c6:	e017      	b.n	80017f8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1cd      	bne.n	800176e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f001 fb22 	bl	8002e20 <SPI_EndRxTransaction>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2220      	movs	r2, #32
 80017e6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d002      	beq.n	80017f6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	75fb      	strb	r3, [r7, #23]
 80017f4:	e000      	b.n	80017f8 <HAL_SPI_Receive+0x208>
  }

error :
 80017f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b08c      	sub	sp, #48	; 0x30
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001820:	2301      	movs	r3, #1
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_SPI_TransmitReceive+0x26>
 8001834:	2302      	movs	r3, #2
 8001836:	e18a      	b.n	8001b4e <HAL_SPI_TransmitReceive+0x33c>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001840:	f7fe fce4 	bl	800020c <HAL_GetTick>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800184c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001856:	887b      	ldrh	r3, [r7, #2]
 8001858:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800185a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800185e:	2b01      	cmp	r3, #1
 8001860:	d00f      	beq.n	8001882 <HAL_SPI_TransmitReceive+0x70>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001868:	d107      	bne.n	800187a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <HAL_SPI_TransmitReceive+0x68>
 8001872:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800187a:	2302      	movs	r3, #2
 800187c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001880:	e15b      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_SPI_TransmitReceive+0x82>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_SPI_TransmitReceive+0x82>
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d103      	bne.n	800189c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800189a:	e14e      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d003      	beq.n	80018b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2205      	movs	r2, #5
 80018ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	887a      	ldrh	r2, [r7, #2]
 80018c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	887a      	ldrh	r2, [r7, #2]
 80018d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	887a      	ldrh	r2, [r7, #2]
 80018d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	2b40      	cmp	r3, #64	; 0x40
 80018f2:	d007      	beq.n	8001904 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800190c:	d178      	bne.n	8001a00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_SPI_TransmitReceive+0x10a>
 8001916:	8b7b      	ldrh	r3, [r7, #26]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d166      	bne.n	80019ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	1c9a      	adds	r2, r3, #2
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29a      	uxth	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001940:	e053      	b.n	80019ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b02      	cmp	r3, #2
 800194e:	d11b      	bne.n	8001988 <HAL_SPI_TransmitReceive+0x176>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_SPI_TransmitReceive+0x176>
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d113      	bne.n	8001988 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	881a      	ldrh	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	1c9a      	adds	r2, r3, #2
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b01      	cmp	r3, #1
 8001994:	d119      	bne.n	80019ca <HAL_SPI_TransmitReceive+0x1b8>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	d014      	beq.n	80019ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	b292      	uxth	r2, r2
 80019ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	1c9a      	adds	r2, r3, #2
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80019ca:	f7fe fc1f 	bl	800020c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d807      	bhi.n	80019ea <HAL_SPI_TransmitReceive+0x1d8>
 80019da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d003      	beq.n	80019ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019e8:	e0a7      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1a6      	bne.n	8001942 <HAL_SPI_TransmitReceive+0x130>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1a1      	bne.n	8001942 <HAL_SPI_TransmitReceive+0x130>
 80019fe:	e07c      	b.n	8001afa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_SPI_TransmitReceive+0x1fc>
 8001a08:	8b7b      	ldrh	r3, [r7, #26]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d16b      	bne.n	8001ae6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	330c      	adds	r3, #12
 8001a18:	7812      	ldrb	r2, [r2, #0]
 8001a1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a34:	e057      	b.n	8001ae6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d11c      	bne.n	8001a7e <HAL_SPI_TransmitReceive+0x26c>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d017      	beq.n	8001a7e <HAL_SPI_TransmitReceive+0x26c>
 8001a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d114      	bne.n	8001a7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d119      	bne.n	8001ac0 <HAL_SPI_TransmitReceive+0x2ae>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d014      	beq.n	8001ac0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001ac0:	f7fe fba4 	bl	800020c <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d803      	bhi.n	8001ad8 <HAL_SPI_TransmitReceive+0x2c6>
 8001ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad6:	d102      	bne.n	8001ade <HAL_SPI_TransmitReceive+0x2cc>
 8001ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ae4:	e029      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1a2      	bne.n	8001a36 <HAL_SPI_TransmitReceive+0x224>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d19d      	bne.n	8001a36 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f001 f9e0 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001b16:	e010      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10b      	bne.n	8001b38 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	e000      	b.n	8001b3a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001b38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3730      	adds	r7, #48	; 0x30
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	4613      	mov	r3, r2
 8001b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d110      	bne.n	8001b94 <HAL_SPI_Receive_IT+0x3c>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b7a:	d10b      	bne.n	8001b94 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 f882 	bl	8001c94 <HAL_SPI_TransmitReceive_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	e076      	b.n	8001c82 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_SPI_Receive_IT+0x4a>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e06f      	b.n	8001c82 <HAL_SPI_Receive_IT+0x12a>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d002      	beq.n	8001bbc <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bba:	e05d      	b.n	8001c78 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d002      	beq.n	8001bc8 <HAL_SPI_Receive_IT+0x70>
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bcc:	e054      	b.n	8001c78 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_SPI_Receive_IT+0x134>)
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
 8001c14:	e002      	b.n	8001c1c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a1d      	ldr	r2, [pc, #116]	; (8001c90 <HAL_SPI_Receive_IT+0x138>)
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c24:	d10f      	bne.n	8001c46 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001c54:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c60:	2b40      	cmp	r3, #64	; 0x40
 8001c62:	d008      	beq.n	8001c76 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8001c76:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	08002ccb 	.word	0x08002ccb
 8001c90:	08002c81 	.word	0x08002c81

08001c94 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_SPI_TransmitReceive_IT+0x20>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e075      	b.n	8001da0 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cc2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001cca:	7dbb      	ldrb	r3, [r7, #22]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d00d      	beq.n	8001cec <HAL_SPI_TransmitReceive_IT+0x58>
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cd6:	d106      	bne.n	8001ce6 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <HAL_SPI_TransmitReceive_IT+0x52>
 8001ce0:	7dbb      	ldrb	r3, [r7, #22]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001cea:	e054      	b.n	8001d96 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_SPI_TransmitReceive_IT+0x6a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_TransmitReceive_IT+0x6a>
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d02:	e048      	b.n	8001d96 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d003      	beq.n	8001d18 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2205      	movs	r2, #5
 8001d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	887a      	ldrh	r2, [r7, #2]
 8001d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_SPI_TransmitReceive_IT+0x118>)
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
 8001d56:	e005      	b.n	8001d64 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <HAL_SPI_TransmitReceive_IT+0x120>)
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001d72:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d008      	beq.n	8001d94 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e000      	b.n	8001d96 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001d94:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08002bc3 	.word	0x08002bc3
 8001db0:	08002c23 	.word	0x08002c23
 8001db4:	08002aff 	.word	0x08002aff
 8001db8:	08002b63 	.word	0x08002b63

08001dbc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d110      	bne.n	8001df8 <HAL_SPI_Receive_DMA+0x3c>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dde:	d10b      	bne.n	8001df8 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2204      	movs	r2, #4
 8001de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f8ac 	bl	8001f4c <HAL_SPI_TransmitReceive_DMA>
 8001df4:	4603      	mov	r3, r0
 8001df6:	e09f      	b.n	8001f38 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_SPI_Receive_DMA+0x4a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e098      	b.n	8001f38 <HAL_SPI_Receive_DMA+0x17c>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d002      	beq.n	8001e20 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e1e:	e086      	b.n	8001f2e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d002      	beq.n	8001e2c <HAL_SPI_Receive_DMA+0x70>
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e30:	e07d      	b.n	8001f2e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2204      	movs	r2, #4
 8001e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	88fa      	ldrh	r2, [r7, #6]
 8001e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	88fa      	ldrh	r2, [r7, #6]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e72:	d10f      	bne.n	8001e94 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	4a29      	ldr	r2, [pc, #164]	; (8001f40 <HAL_SPI_Receive_DMA+0x184>)
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea0:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_SPI_Receive_DMA+0x188>)
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a27      	ldr	r2, [pc, #156]	; (8001f48 <HAL_SPI_Receive_DMA+0x18c>)
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8001ecc:	f7fe fb34 	bl	8000538 <HAL_DMA_Start_IT>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001eee:	e01e      	b.n	8001f2e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	d007      	beq.n	8001f0e <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0220 	orr.w	r2, r2, #32
 8001f1c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	080028e9 	.word	0x080028e9
 8001f44:	080027b5 	.word	0x080027b5
 8001f48:	08002921 	.word	0x08002921

08001f4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e0e3      	b.n	8002134 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8001f82:	7dbb      	ldrb	r3, [r7, #22]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d00d      	beq.n	8001fa4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8e:	d106      	bne.n	8001f9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8001f98:	7dbb      	ldrb	r3, [r7, #22]
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fa2:	e0c2      	b.n	800212a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d102      	bne.n	8001fbc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fba:	e0b6      	b.n	800212a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d003      	beq.n	8001fd0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	887a      	ldrh	r2, [r7, #2]
 8001fe6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b04      	cmp	r3, #4
 8002010:	d108      	bne.n	8002024 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002020:	629a      	str	r2, [r3, #40]	; 0x28
 8002022:	e007      	b.n	8002034 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	4a46      	ldr	r2, [pc, #280]	; (8002144 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a45      	ldr	r2, [pc, #276]	; (8002148 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	4a44      	ldr	r2, [pc, #272]	; (800214c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800203a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	2200      	movs	r2, #0
 8002042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	330c      	adds	r3, #12
 800204e:	4619      	mov	r1, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800205c:	f7fe fa6c 	bl	8000538 <HAL_DMA_Start_IT>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800207e:	e054      	b.n	800212a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002094:	2200      	movs	r2, #0
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209c:	2200      	movs	r2, #0
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ac:	2200      	movs	r2, #0
 80020ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4619      	mov	r1, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80020c8:	f7fe fa36 	bl	8000538 <HAL_DMA_Start_IT>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80020ea:	e01e      	b.n	800212a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d007      	beq.n	800210a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002108:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0220 	orr.w	r2, r2, #32
 8002118:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0202 	orr.w	r2, r2, #2
 8002128:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002132:	7dfb      	ldrb	r3, [r7, #23]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	080028e9 	.word	0x080028e9
 8002140:	080027b5 	.word	0x080027b5
 8002144:	08002905 	.word	0x08002905
 8002148:	0800285b 	.word	0x0800285b
 800214c:	08002921 	.word	0x08002921

08002150 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_SPI_Abort+0x1b8>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6a      	ldr	r2, [pc, #424]	; (800230c <HAL_SPI_Abort+0x1bc>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	0a5b      	lsrs	r3, r3, #9
 8002168:	2264      	movs	r2, #100	; 0x64
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	60fb      	str	r3, [r7, #12]
  count = resetcount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	613b      	str	r3, [r7, #16]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0220 	bic.w	r2, r2, #32
 8002182:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d017      	beq.n	80021c2 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a5e      	ldr	r2, [pc, #376]	; (8002310 <HAL_SPI_Abort+0x1c0>)
 8002196:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80021aa:	e008      	b.n	80021be <HAL_SPI_Abort+0x6e>
      }
      count--;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d1ec      	bne.n	8002198 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	613b      	str	r3, [r7, #16]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d017      	beq.n	8002200 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a50      	ldr	r2, [pc, #320]	; (8002314 <HAL_SPI_Abort+0x1c4>)
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d106      	bne.n	80021ea <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80021e8:	e008      	b.n	80021fc <HAL_SPI_Abort+0xac>
      }
      count--;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d1ec      	bne.n	80021d6 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	613b      	str	r3, [r7, #16]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02e      	beq.n	800226c <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02a      	beq.n	800226c <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9e7 	bl	80005f6 <HAL_DMA_Abort>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0202 	bic.w	r2, r2, #2
 8002242:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8002256:	e009      	b.n	800226c <HAL_SPI_Abort+0x11c>
        }
        count--;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	3b01      	subs	r3, #1
 800225c:	613b      	str	r3, [r7, #16]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0eb      	beq.n	8002244 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d022      	beq.n	80022c0 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01e      	beq.n	80022c0 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe f9b1 	bl	80005f6 <HAL_DMA_Abort>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ae:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	2b40      	cmp	r3, #64	; 0x40
 80022d2:	d102      	bne.n	80022da <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
 80022d8:	e002      	b.n	80022e0 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000008 	.word	0x20000008
 800230c:	057619f1 	.word	0x057619f1
 8002310:	080030f5 	.word	0x080030f5
 8002314:	08003069 	.word	0x08003069

08002318 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002328:	4b6e      	ldr	r3, [pc, #440]	; (80024e4 <HAL_SPI_Abort_IT+0x1cc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <HAL_SPI_Abort_IT+0x1d0>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	2264      	movs	r2, #100	; 0x64
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0220 	bic.w	r2, r2, #32
 800234e:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d017      	beq.n	800238e <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a62      	ldr	r2, [pc, #392]	; (80024ec <HAL_SPI_Abort_IT+0x1d4>)
 8002362:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8002376:	e008      	b.n	800238a <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3b01      	subs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b07      	cmp	r3, #7
 8002388:	d1ec      	bne.n	8002364 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002398:	2b00      	cmp	r3, #0
 800239a:	d017      	beq.n	80023cc <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_SPI_Abort_IT+0x1d8>)
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80023b4:	e008      	b.n	80023c8 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d1ec      	bne.n	80023a2 <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00f      	beq.n	80023f4 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	4a43      	ldr	r2, [pc, #268]	; (80024f4 <HAL_SPI_Abort_IT+0x1dc>)
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ea:	e003      	b.n	80023f4 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00f      	beq.n	800241c <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240e:	4a3a      	ldr	r2, [pc, #232]	; (80024f8 <HAL_SPI_Abort_IT+0x1e0>)
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
 8002412:	e003      	b.n	800241c <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d015      	beq.n	8002456 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	2b00      	cmp	r3, #0
 8002430:	d011      	beq.n	8002456 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe f918 	bl	800066c <HAL_DMA_Abort_IT>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	2200      	movs	r2, #0
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
 8002450:	e001      	b.n	8002456 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d011      	beq.n	8002490 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f8fb 	bl	800066c <HAL_DMA_Abort_IT>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002480:	2200      	movs	r2, #0
 8002482:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
 800248a:	e001      	b.n	8002490 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d121      	bne.n	80024da <HAL_SPI_Abort_IT+0x1c2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d102      	bne.n	80024b0 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	77fb      	strb	r3, [r7, #31]
 80024ae:	e002      	b.n	80024b6 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f964 	bl	80027a2 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 80024da:	7ffb      	ldrb	r3, [r7, #31]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000008 	.word	0x20000008
 80024e8:	057619f1 	.word	0x057619f1
 80024ec:	080030f5 	.word	0x080030f5
 80024f0:	08003069 	.word	0x08003069
 80024f4:	08002989 	.word	0x08002989
 80024f8:	08002a4d 	.word	0x08002a4d

080024fc <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00f      	beq.n	8002530 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f86e 	bl	80005f6 <HAL_DMA_Abort>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f043 0210 	orr.w	r2, r3, #16
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00f      	beq.n	8002558 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe f85a 	bl	80005f6 <HAL_DMA_Abort>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0203 	bic.w	r2, r2, #3
 8002566:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	099b      	lsrs	r3, r3, #6
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
    return;
 80025be:	e0be      	b.n	800273e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_SPI_IRQHandler+0x66>
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	09db      	lsrs	r3, r3, #7
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	4798      	blx	r3
    return;
 80025e0:	e0ad      	b.n	800273e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_SPI_IRQHandler+0x80>
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a1 	beq.w	800273e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 809a 	beq.w	800273e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d023      	beq.n	800265e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d011      	beq.n	8002646 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e00b      	b.n	800265e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	693b      	ldr	r3, [r7, #16]
        return;
 800265c:	e06f      	b.n	800273e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d014      	beq.n	8002694 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	2b00      	cmp	r3, #0
 800269a:	d04f      	beq.n	800273c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80026aa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d104      	bne.n	80026c8 <HAL_SPI_IRQHandler+0x14c>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d034      	beq.n	8002732 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0203 	bic.w	r2, r2, #3
 80026d6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d011      	beq.n	8002704 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <HAL_SPI_IRQHandler+0x1c8>)
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ffbd 	bl	800066c <HAL_DMA_Abort_IT>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002708:	2b00      	cmp	r3, #0
 800270a:	d016      	beq.n	800273a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_SPI_IRQHandler+0x1c8>)
 8002712:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ffa7 	bl	800066c <HAL_DMA_Abort_IT>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002730:	e003      	b.n	800273a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f82c 	bl	8002790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002738:	e000      	b.n	800273c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800273a:	bf00      	nop
    return;
 800273c:	bf00      	nop
  }
}
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08002961 	.word	0x08002961

08002748 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027c2:	f7fd fd23 	bl	800020c <HAL_GetTick>
 80027c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d03b      	beq.n	800284e <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0220 	bic.w	r2, r2, #32
 80027e4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <SPI_DMAReceiveCplt+0x56>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027f6:	d108      	bne.n	800280a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0203 	bic.w	r2, r2, #3
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	e007      	b.n	800281a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	2164      	movs	r1, #100	; 0x64
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fafe 	bl	8002e20 <SPI_EndRxTransaction>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff ffa2 	bl	8002790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800284c:	e002      	b.n	8002854 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff ff7a 	bl	8002748 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002868:	f7fd fcd0 	bl	800020c <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b20      	cmp	r3, #32
 800287a:	d02f      	beq.n	80028dc <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0220 	bic.w	r2, r2, #32
 800288a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	2164      	movs	r1, #100	; 0x64
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fb17 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0203 	bic.w	r2, r2, #3
 80028b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ff5b 	bl	8002790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80028da:	e002      	b.n	80028e2 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff ff3c 	bl	800275a <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff ff38 	bl	800276c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f7ff ff33 	bl	800277e <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0203 	bic.w	r2, r2, #3
 800293c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0210 	orr.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff ff1c 	bl	8002790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff ff08 	bl	8002790 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299a:	2200      	movs	r2, #0
 800299c:	635a      	str	r2, [r3, #52]	; 0x34
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <SPI_DMATxAbortCallback+0xbc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <SPI_DMATxAbortCallback+0xc0>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0a5b      	lsrs	r3, r3, #9
 80029aa:	2264      	movs	r2, #100	; 0x64
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0202 	bic.w	r2, r2, #2
 80029c0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d106      	bne.n	80029d6 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80029d4:	e009      	b.n	80029ea <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3b01      	subs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0eb      	beq.n	80029c2 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d004      	beq.n	80029fc <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11f      	bne.n	8002a3c <SPI_DMATxAbortCallback+0xb4>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2200      	movs	r2, #0
 8002a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	2b40      	cmp	r3, #64	; 0x40
 8002a0e:	d002      	beq.n	8002a16 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7ff feb4 	bl	80027a2 <HAL_SPI_AbortCpltCallback>
 8002a3a:	e000      	b.n	8002a3e <SPI_DMATxAbortCallback+0xb6>
      return;
 8002a3c:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000008 	.word	0x20000008
 8002a48:	057619f1 	.word	0x057619f1

08002a4c <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a68:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	2200      	movs	r2, #0
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002a82:	f7fd fbc3 	bl	800020c <HAL_GetTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2164      	movs	r1, #100	; 0x64
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fa19 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11f      	bne.n	8002af6 <SPI_DMARxAbortCallback+0xaa>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	2b40      	cmp	r3, #64	; 0x40
 8002ac8:	d002      	beq.n	8002ad0 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff fe57 	bl	80027a2 <HAL_SPI_AbortCpltCallback>
 8002af4:	e000      	b.n	8002af8 <SPI_DMARxAbortCallback+0xac>
      return;
 8002af6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f103 020c 	add.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b48:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d102      	bne.n	8002b5a <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f9d3 	bl	8002f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	330c      	adds	r3, #12
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d102      	bne.n	8002bba <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9a3 	bl	8002f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	b292      	uxth	r2, r2
 8002bd6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	1c9a      	adds	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10f      	bne.n	8002c1a <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d102      	bne.n	8002c1a <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f973 	bl	8002f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10f      	bne.n	8002c78 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c66:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f944 	bl	8002f00 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f103 020c 	add.w	r2, r3, #12
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f993 	bl	8002fe8 <SPI_CloseRx_ISR>
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f970 	bl	8002fe8 <SPI_CloseRx_ISR>
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d20:	f7fd fa74 	bl	800020c <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d30:	f7fd fa6c 	bl	800020c <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	015b      	lsls	r3, r3, #5
 8002d3c:	0d1b      	lsrs	r3, r3, #20
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d46:	e054      	b.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d050      	beq.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d50:	f7fd fa5c 	bl	800020c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d902      	bls.n	8002d66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d13d      	bne.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d111      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	d004      	beq.n	8002d94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d107      	bne.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d10f      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e017      	b.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d19b      	bne.n	8002d48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3720      	adds	r7, #32
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000008 	.word	0x20000008

08002e20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d111      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d004      	beq.n	8002e4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d107      	bne.n	8002e5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e62:	d117      	bne.n	8002e94 <SPI_EndRxTransaction+0x74>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d112      	bne.n	8002e94 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2101      	movs	r1, #1
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff49 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d01a      	beq.n	8002eba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e013      	b.n	8002ebc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff36 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f7ff ff18 	bl	8002d10 <SPI_WaitFlagStateUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e000      	b.n	8002ef8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002f08:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <SPI_CloseRxTx_ISR+0xe0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a35      	ldr	r2, [pc, #212]	; (8002fe4 <SPI_CloseRxTx_ISR+0xe4>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0a5b      	lsrs	r3, r3, #9
 8002f14:	2264      	movs	r2, #100	; 0x64
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f1c:	f7fd f976 	bl	800020c <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0220 	bic.w	r2, r2, #32
 8002f30:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f44:	e009      	b.n	8002f5a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0eb      	beq.n	8002f32 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	2164      	movs	r1, #100	; 0x64
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffb0 	bl	8002ec4 <SPI_EndRxTxTransaction>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10a      	bne.n	8002f94 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d115      	bne.n	8002fc8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fbc9 	bl	8002748 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002fb6:	e00e      	b.n	8002fd6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f7ff fbca 	bl	800275a <HAL_SPI_TxRxCpltCallback>
}
 8002fc6:	e006      	b.n	8002fd6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fbdd 	bl	8002790 <HAL_SPI_ErrorCallback>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	057619f1 	.word	0x057619f1

08002fe8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003000:	f7fd f904 	bl	800020c <HAL_GetTick>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	2164      	movs	r1, #100	; 0x64
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff ff08 	bl	8002e20 <SPI_EndRxTransaction>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fb79 	bl	8002748 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003056:	e002      	b.n	800305e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fb99 	bl	8002790 <HAL_SPI_ErrorCallback>
}
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003074:	4b1d      	ldr	r3, [pc, #116]	; (80030ec <SPI_AbortRx_ISR+0x84>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <SPI_AbortRx_ISR+0x88>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0a5b      	lsrs	r3, r3, #9
 8003080:	2264      	movs	r2, #100	; 0x64
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003092:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800309a:	e009      	b.n	80030b0 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0eb      	beq.n	8003088 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030ce:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80030d8:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2207      	movs	r2, #7
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	20000008 	.word	0x20000008
 80030f0:	057619f1 	.word	0x057619f1

080030f4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800310a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800311a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2207      	movs	r2, #7
 8003120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
	...

08003130 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
           uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08e      	sub	sp, #56	; 0x38
 8003134:	af0a      	add	r7, sp, #40	; 0x28
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	817b      	strh	r3, [r7, #10]
 8003142:	460b      	mov	r3, r1
 8003144:	813b      	strh	r3, [r7, #8]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <LiquidCrystal+0x90>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d019      	beq.n	8003186 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8003152:	8939      	ldrh	r1, [r7, #8]
 8003154:	897a      	ldrh	r2, [r7, #10]
 8003156:	2300      	movs	r3, #0
 8003158:	9308      	str	r3, [sp, #32]
 800315a:	2300      	movs	r3, #0
 800315c:	9307      	str	r3, [sp, #28]
 800315e:	2300      	movs	r3, #0
 8003160:	9306      	str	r3, [sp, #24]
 8003162:	2300      	movs	r3, #0
 8003164:	9305      	str	r3, [sp, #20]
 8003166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003168:	9304      	str	r3, [sp, #16]
 800316a:	8c3b      	ldrh	r3, [r7, #32]
 800316c:	9303      	str	r3, [sp, #12]
 800316e:	8bbb      	ldrh	r3, [r7, #28]
 8003170:	9302      	str	r3, [sp, #8]
 8003172:	8b3b      	ldrh	r3, [r7, #24]
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	460b      	mov	r3, r1
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	2001      	movs	r0, #1
 8003180:	f000 f820 	bl	80031c4 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8003184:	e018      	b.n	80031b8 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8003186:	8939      	ldrh	r1, [r7, #8]
 8003188:	897a      	ldrh	r2, [r7, #10]
 800318a:	2300      	movs	r3, #0
 800318c:	9308      	str	r3, [sp, #32]
 800318e:	2300      	movs	r3, #0
 8003190:	9307      	str	r3, [sp, #28]
 8003192:	2300      	movs	r3, #0
 8003194:	9306      	str	r3, [sp, #24]
 8003196:	2300      	movs	r3, #0
 8003198:	9305      	str	r3, [sp, #20]
 800319a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	8c3b      	ldrh	r3, [r7, #32]
 80031a0:	9303      	str	r3, [sp, #12]
 80031a2:	8bbb      	ldrh	r3, [r7, #28]
 80031a4:	9302      	str	r3, [sp, #8]
 80031a6:	8b3b      	ldrh	r3, [r7, #24]
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	460b      	mov	r3, r1
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	2000      	movs	r0, #0
 80031b4:	f000 f806 	bl	80031c4 <init>
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000005 	.word	0x20000005

080031c4 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
       uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
       uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	4611      	mov	r1, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	460b      	mov	r3, r1
 80031d6:	81bb      	strh	r3, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <init+0x80>)
 80031de:	89bb      	ldrh	r3, [r7, #12]
 80031e0:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 80031e2:	4a19      	ldr	r2, [pc, #100]	; (8003248 <init+0x84>)
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 80031e8:	4a18      	ldr	r2, [pc, #96]	; (800324c <init+0x88>)
 80031ea:	8b3b      	ldrh	r3, [r7, #24]
 80031ec:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <init+0x8c>)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 80031f4:	4a17      	ldr	r2, [pc, #92]	; (8003254 <init+0x90>)
 80031f6:	8bbb      	ldrh	r3, [r7, #28]
 80031f8:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <init+0x90>)
 80031fc:	8c3b      	ldrh	r3, [r7, #32]
 80031fe:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <init+0x90>)
 8003202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003204:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <init+0x90>)
 8003208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800320a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800320c:	4a11      	ldr	r2, [pc, #68]	; (8003254 <init+0x90>)
 800320e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003210:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <init+0x90>)
 8003214:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003216:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <init+0x90>)
 800321a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800321c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800321e:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <init+0x90>)
 8003220:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003222:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800322a:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <init+0x94>)
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

 // begin(16, 2);
}
 8003230:	e002      	b.n	8003238 <init+0x74>
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <init+0x94>)
 8003234:	2210      	movs	r2, #16
 8003236:	701a      	strb	r2, [r3, #0]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	2000002e 	.word	0x2000002e
 8003248:	20000030 	.word	0x20000030
 800324c:	20000032 	.word	0x20000032
 8003250:	20000044 	.word	0x20000044
 8003254:	20000034 	.word	0x20000034
 8003258:	20000048 	.word	0x20000048

0800325c <begin>:

void begin(uint8_t cols, uint8_t lines) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	460a      	mov	r2, r1
 8003266:	71fb      	strb	r3, [r7, #7]
 8003268:	4613      	mov	r3, r2
 800326a:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 800326c:	79bb      	ldrb	r3, [r7, #6]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d906      	bls.n	8003280 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 8003272:	4b77      	ldr	r3, [pc, #476]	; (8003450 <begin+0x1f4>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	f043 0308 	orr.w	r3, r3, #8
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b74      	ldr	r3, [pc, #464]	; (8003450 <begin+0x1f4>)
 800327e:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8003280:	4a74      	ldr	r2, [pc, #464]	; (8003454 <begin+0x1f8>)
 8003282:	79bb      	ldrb	r3, [r7, #6]
 8003284:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8003286:	79fa      	ldrb	r2, [r7, #7]
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	3340      	adds	r3, #64	; 0x40
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f962 	bl	8003558 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <begin+0x1fc>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <begin+0x54>
 800329c:	79bb      	ldrb	r3, [r7, #6]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80032a2:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <begin+0x1f4>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f043 0304 	orr.w	r3, r3, #4
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b68      	ldr	r3, [pc, #416]	; (8003450 <begin+0x1f4>)
 80032ae:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 80032b0:	f000 f8e4 	bl	800347c <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	617b      	str	r3, [r7, #20]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]

  if(_fourbit_mode)
 80032bc:	4b67      	ldr	r3, [pc, #412]	; (800345c <begin+0x200>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 80032c4:	4b66      	ldr	r3, [pc, #408]	; (8003460 <begin+0x204>)
 80032c6:	881a      	ldrh	r2, [r3, #0]
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <begin+0x208>)
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b65      	ldr	r3, [pc, #404]	; (8003468 <begin+0x20c>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b64      	ldr	r3, [pc, #400]	; (800346c <begin+0x210>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b29a      	uxth	r2, r3
 80032e0:	4b62      	ldr	r3, [pc, #392]	; (800346c <begin+0x210>)
 80032e2:	885b      	ldrh	r3, [r3, #2]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	4b60      	ldr	r3, [pc, #384]	; (800346c <begin+0x210>)
 80032ea:	889b      	ldrh	r3, [r3, #4]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	4b5e      	ldr	r3, [pc, #376]	; (800346c <begin+0x210>)
 80032f2:	88db      	ldrh	r3, [r3, #6]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	e02a      	b.n	8003352 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80032fc:	4b58      	ldr	r3, [pc, #352]	; (8003460 <begin+0x204>)
 80032fe:	881a      	ldrh	r2, [r3, #0]
 8003300:	4b58      	ldr	r3, [pc, #352]	; (8003464 <begin+0x208>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4313      	orrs	r3, r2
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b57      	ldr	r3, [pc, #348]	; (8003468 <begin+0x20c>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	4313      	orrs	r3, r2
 800330e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8003310:	4b56      	ldr	r3, [pc, #344]	; (800346c <begin+0x210>)
 8003312:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8003314:	4313      	orrs	r3, r2
 8003316:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8003318:	4b54      	ldr	r3, [pc, #336]	; (800346c <begin+0x210>)
 800331a:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800331c:	4313      	orrs	r3, r2
 800331e:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <begin+0x210>)
 8003322:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8003324:	4313      	orrs	r3, r2
 8003326:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8003328:	4b50      	ldr	r3, [pc, #320]	; (800346c <begin+0x210>)
 800332a:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 800332c:	4313      	orrs	r3, r2
 800332e:	b29a      	uxth	r2, r3
 8003330:	4b4e      	ldr	r3, [pc, #312]	; (800346c <begin+0x210>)
 8003332:	891b      	ldrh	r3, [r3, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b4c      	ldr	r3, [pc, #304]	; (800346c <begin+0x210>)
 800333a:	895b      	ldrh	r3, [r3, #10]
 800333c:	4313      	orrs	r3, r2
 800333e:	b29a      	uxth	r2, r3
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <begin+0x210>)
 8003342:	899b      	ldrh	r3, [r3, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	4b48      	ldr	r3, [pc, #288]	; (800346c <begin+0x210>)
 800334a:	89db      	ldrh	r3, [r3, #14]
 800334c:	4313      	orrs	r3, r2
 800334e:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8003350:	60bb      	str	r3, [r7, #8]

  HAL_GPIO_Init(_port, &gpio_init);
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <begin+0x214>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f107 0208 	add.w	r2, r7, #8
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fb2f 	bl	80009c0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 8003362:	2032      	movs	r0, #50	; 0x32
 8003364:	f7fc ff5c 	bl	8000220 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8003368:	4b41      	ldr	r3, [pc, #260]	; (8003470 <begin+0x214>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3c      	ldr	r2, [pc, #240]	; (8003460 <begin+0x204>)
 800336e:	8811      	ldrh	r1, [r2, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fcb7 	bl	8000ce6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8003378:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <begin+0x214>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <begin+0x20c>)
 800337e:	8811      	ldrh	r1, [r2, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fcaf 	bl	8000ce6 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <begin+0x208>)
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	2bff      	cmp	r3, #255	; 0xff
 800338e:	d007      	beq.n	80033a0 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8003390:	4b37      	ldr	r3, [pc, #220]	; (8003470 <begin+0x214>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a33      	ldr	r2, [pc, #204]	; (8003464 <begin+0x208>)
 8003396:	8811      	ldrh	r1, [r2, #0]
 8003398:	2200      	movs	r2, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fca3 	bl	8000ce6 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <begin+0x1f4>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 80033ac:	2003      	movs	r0, #3
 80033ae:	f000 f9f3 	bl	8003798 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80033b2:	2005      	movs	r0, #5
 80033b4:	f7fc ff34 	bl	8000220 <HAL_Delay>

    // second try
    write4bits(0x03);
 80033b8:	2003      	movs	r0, #3
 80033ba:	f000 f9ed 	bl	8003798 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 80033be:	2005      	movs	r0, #5
 80033c0:	f7fc ff2e 	bl	8000220 <HAL_Delay>

    // third go!
    write4bits(0x03);
 80033c4:	2003      	movs	r0, #3
 80033c6:	f000 f9e7 	bl	8003798 <write4bits>
    HAL_Delay(1);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7fc ff28 	bl	8000220 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 80033d0:	2002      	movs	r0, #2
 80033d2:	f000 f9e1 	bl	8003798 <write4bits>
 80033d6:	e01d      	b.n	8003414 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 80033d8:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <begin+0x1f4>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f953 	bl	800368e <command>
    HAL_Delay(5);  // wait more than 4.1ms
 80033e8:	2005      	movs	r0, #5
 80033ea:	f7fc ff19 	bl	8000220 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 80033ee:	4b18      	ldr	r3, [pc, #96]	; (8003450 <begin+0x1f4>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	f043 0320 	orr.w	r3, r3, #32
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f948 	bl	800368e <command>
    HAL_Delay(1);
 80033fe:	2001      	movs	r0, #1
 8003400:	f7fc ff0e 	bl	8000220 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <begin+0x1f4>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	f043 0320 	orr.w	r3, r3, #32
 800340c:	b2db      	uxtb	r3, r3
 800340e:	4618      	mov	r0, r3
 8003410:	f000 f93d 	bl	800368e <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <begin+0x1f4>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	f043 0320 	orr.w	r3, r3, #32
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f935 	bl	800368e <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <begin+0x218>)
 8003426:	2204      	movs	r2, #4
 8003428:	701a      	strb	r2, [r3, #0]
  display();
 800342a:	f000 f8ef 	bl	800360c <display>

  // clear it off
  clear();
 800342e:	f000 f8b1 	bl	8003594 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <begin+0x21c>)
 8003434:	2202      	movs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <begin+0x21c>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	b2db      	uxtb	r3, r3
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f923 	bl	800368e <command>

}
 8003448:	bf00      	nop
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000048 	.word	0x20000048
 8003454:	2000004b 	.word	0x2000004b
 8003458:	2000002c 	.word	0x2000002c
 800345c:	20000005 	.word	0x20000005
 8003460:	2000002e 	.word	0x2000002e
 8003464:	20000030 	.word	0x20000030
 8003468:	20000032 	.word	0x20000032
 800346c:	20000034 	.word	0x20000034
 8003470:	20000044 	.word	0x20000044
 8003474:	20000049 	.word	0x20000049
 8003478:	2000004a 	.word	0x2000004a

0800347c <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 8003482:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <enableClock+0xc4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <enableClock+0xc8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10c      	bne.n	80034a6 <enableClock+0x2a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348c:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <enableClock+0xcc>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <enableClock+0xcc>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <enableClock+0xcc>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
  else if(_port == GPIOD)
    __HAL_RCC_GPIOD_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80034a4:	e046      	b.n	8003534 <enableClock+0xb8>
  else if(_port == GPIOB)
 80034a6:	4b26      	ldr	r3, [pc, #152]	; (8003540 <enableClock+0xc4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a28      	ldr	r2, [pc, #160]	; (800354c <enableClock+0xd0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10c      	bne.n	80034ca <enableClock+0x4e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <enableClock+0xcc>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a24      	ldr	r2, [pc, #144]	; (8003548 <enableClock+0xcc>)
 80034b6:	f043 0308 	orr.w	r3, r3, #8
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <enableClock+0xcc>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	693b      	ldr	r3, [r7, #16]
}
 80034c8:	e034      	b.n	8003534 <enableClock+0xb8>
  else if(_port == GPIOB)
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <enableClock+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <enableClock+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <enableClock+0x72>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <enableClock+0xcc>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	; (8003548 <enableClock+0xcc>)
 80034da:	f043 0308 	orr.w	r3, r3, #8
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <enableClock+0xcc>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	e022      	b.n	8003534 <enableClock+0xb8>
  else if(_port == GPIOC)
 80034ee:	4b14      	ldr	r3, [pc, #80]	; (8003540 <enableClock+0xc4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a17      	ldr	r2, [pc, #92]	; (8003550 <enableClock+0xd4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d10c      	bne.n	8003512 <enableClock+0x96>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f8:	4b13      	ldr	r3, [pc, #76]	; (8003548 <enableClock+0xcc>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	4a12      	ldr	r2, [pc, #72]	; (8003548 <enableClock+0xcc>)
 80034fe:	f043 0310 	orr.w	r3, r3, #16
 8003502:	6193      	str	r3, [r2, #24]
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <enableClock+0xcc>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
}
 8003510:	e010      	b.n	8003534 <enableClock+0xb8>
  else if(_port == GPIOD)
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <enableClock+0xc4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <enableClock+0xd8>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10b      	bne.n	8003534 <enableClock+0xb8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <enableClock+0xcc>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	4a09      	ldr	r2, [pc, #36]	; (8003548 <enableClock+0xcc>)
 8003522:	f043 0320 	orr.w	r3, r3, #32
 8003526:	6193      	str	r3, [r2, #24]
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <enableClock+0xcc>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000044 	.word	0x20000044
 8003544:	40010800 	.word	0x40010800
 8003548:	40021000 	.word	0x40021000
 800354c:	40010c00 	.word	0x40010c00
 8003550:	40011000 	.word	0x40011000
 8003554:	40011400 	.word	0x40011400

08003558 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	4b09      	ldr	r3, [pc, #36]	; (8003590 <setRowOffsets+0x38>)
 800356c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <setRowOffsets+0x38>)
 8003574:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <setRowOffsets+0x38>)
 800357c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b03      	ldr	r3, [pc, #12]	; (8003590 <setRowOffsets+0x38>)
 8003584:	70da      	strb	r2, [r3, #3]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	2000004c 	.word	0x2000004c

08003594 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8003598:	2001      	movs	r0, #1
 800359a:	f000 f878 	bl	800368e <command>
  HAL_Delay(2);  // this command takes a long time!
 800359e:	2002      	movs	r0, #2
 80035a0:	f7fc fe3e 	bl	8000220 <HAL_Delay>
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	460a      	mov	r2, r1
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80035b8:	2304      	movs	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80035bc:	79bb      	ldrb	r3, [r7, #6]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d803      	bhi.n	80035cc <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80035cc:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <setCursor+0x5c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	79ba      	ldrb	r2, [r7, #6]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d303      	bcc.n	80035de <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80035d6:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <setCursor+0x5c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80035de:	79bb      	ldrb	r3, [r7, #6]
 80035e0:	4a09      	ldr	r2, [pc, #36]	; (8003608 <setCursor+0x60>)
 80035e2:	5cd2      	ldrb	r2, [r2, r3]
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	4413      	add	r3, r2
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f84a 	bl	800368e <command>
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000004b 	.word	0x2000004b
 8003608:	2000004c 	.word	0x2000004c

0800360c <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <display+0x28>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <display+0x28>)
 800361c:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <display+0x28>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	f043 0308 	orr.w	r3, r3, #8
 8003626:	b2db      	uxtb	r3, r3
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f830 	bl	800368e <command>
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000049 	.word	0x20000049

08003638 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <print+0x12>
 8003646:	2300      	movs	r3, #0
 8003648:	e01d      	b.n	8003686 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fc fd7c 	bl	800014c <strlen>
 8003654:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800365a:	e00c      	b.n	8003676 <print+0x3e>
    if (write(*buffer++)) n++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	617a      	str	r2, [r7, #20]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f820 	bl	80036aa <write>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <print+0x4a>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	613a      	str	r2, [r7, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ed      	bne.n	800365c <print+0x24>
 8003680:	e000      	b.n	8003684 <print+0x4c>
    else break;
 8003682:	bf00      	nop
  }
  return n;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	4603      	mov	r3, r0
 8003696:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f813 	bl	80036c8 <send>
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <write>:

inline size_t write(uint8_t value) {
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	2101      	movs	r1, #1
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 f805 	bl	80036c8 <send>
  return 1; // assume sucess
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	460a      	mov	r2, r1
 80036d2:	71fb      	strb	r3, [r7, #7]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80036d8:	4b16      	ldr	r3, [pc, #88]	; (8003734 <send+0x6c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a16      	ldr	r2, [pc, #88]	; (8003738 <send+0x70>)
 80036de:	8811      	ldrh	r1, [r2, #0]
 80036e0:	79ba      	ldrb	r2, [r7, #6]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fd faff 	bl	8000ce6 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <send+0x74>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	2bff      	cmp	r3, #255	; 0xff
 80036ee:	d007      	beq.n	8003700 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <send+0x6c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <send+0x74>)
 80036f6:	8811      	ldrh	r1, [r2, #0]
 80036f8:	2200      	movs	r2, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fd faf3 	bl	8000ce6 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <send+0x78>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <send+0x4e>
    write8bits(value);
 800370c:	79fb      	ldrb	r3, [r7, #7]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f86c 	bl	80037ec <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8003714:	e009      	b.n	800372a <send+0x62>
    write4bits(value>>4);
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f83b 	bl	8003798 <write4bits>
    write4bits(value);
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f837 	bl	8003798 <write4bits>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000044 	.word	0x20000044
 8003738:	2000002e 	.word	0x2000002e
 800373c:	20000030 	.word	0x20000030
 8003740:	20000048 	.word	0x20000048

08003744 <pulseEnable>:

void pulseEnable(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <pulseEnable+0x4c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a11      	ldr	r2, [pc, #68]	; (8003794 <pulseEnable+0x50>)
 800374e:	8811      	ldrh	r1, [r2, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fac7 	bl	8000ce6 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003758:	2001      	movs	r0, #1
 800375a:	f7fc fd61 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <pulseEnable+0x4c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <pulseEnable+0x50>)
 8003764:	8811      	ldrh	r1, [r2, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fabc 	bl	8000ce6 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 800376e:	2001      	movs	r0, #1
 8003770:	f7fc fd56 	bl	8000220 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <pulseEnable+0x4c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <pulseEnable+0x50>)
 800377a:	8811      	ldrh	r1, [r2, #0]
 800377c:	2200      	movs	r2, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fab1 	bl	8000ce6 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8003784:	2001      	movs	r0, #1
 8003786:	f7fc fd4b 	bl	8000220 <HAL_Delay>
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000044 	.word	0x20000044
 8003794:	20000032 	.word	0x20000032

08003798 <write4bits>:

void write4bits(uint8_t value) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e013      	b.n	80037d0 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <write4bits+0x4c>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4a0e      	ldr	r2, [pc, #56]	; (80037e8 <write4bits+0x50>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	fa42 f303 	asr.w	r3, r2, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	f7fd fa8e 	bl	8000ce6 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	dde8      	ble.n	80037a8 <write4bits+0x10>
  }

  pulseEnable();
 80037d6:	f7ff ffb5 	bl	8003744 <pulseEnable>
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000044 	.word	0x20000044
 80037e8:	20000034 	.word	0x20000034

080037ec <write8bits>:

void write8bits(uint8_t value) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e013      	b.n	8003824 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <write8bits+0x4c>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	4a0e      	ldr	r2, [pc, #56]	; (800383c <write8bits+0x50>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003808:	79fa      	ldrb	r2, [r7, #7]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	fa42 f303 	asr.w	r3, r2, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	f7fd fa64 	bl	8000ce6 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b07      	cmp	r3, #7
 8003828:	dde8      	ble.n	80037fc <write8bits+0x10>
  }

  pulseEnable();
 800382a:	f7ff ff8b 	bl	8003744 <pulseEnable>
}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000044 	.word	0x20000044
 800383c:	20000034 	.word	0x20000034

08003840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003846:	f7fc fc89 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800384a:	f000 f8af 	bl	80039ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800384e:	f000 f93f 	bl	8003ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003852:	f000 f91f 	bl	8003a94 <MX_DMA_Init>
  MX_SPI1_Init();
 8003856:	f000 f8e9 	bl	8003a2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
LiquidCrystal(GPIOB, GPIO_PIN_9 ,GPIO_PIN_10,GPIO_PIN_11 ,GPIO_PIN_12,GPIO_PIN_13,GPIO_PIN_14,GPIO_PIN_15);
 800385a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385e:	9303      	str	r3, [sp, #12]
 8003860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003864:	9302      	str	r3, [sp, #8]
 8003866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800387a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800387e:	4841      	ldr	r0, [pc, #260]	; (8003984 <main+0x144>)
 8003880:	f7ff fc56 	bl	8003130 <LiquidCrystal>
begin(16,2);
 8003884:	2102      	movs	r1, #2
 8003886:	2010      	movs	r0, #16
 8003888:	f7ff fce8 	bl	800325c <begin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // Receive Polling MODE
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET)
 800388c:	2120      	movs	r1, #32
 800388e:	483d      	ldr	r0, [pc, #244]	; (8003984 <main+0x144>)
 8003890:	f7fd fa12 	bl	8000cb8 <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11b      	bne.n	80038d2 <main+0x92>
    {
      HAL_SPI_Receive(&hspi1, (uint8_t*)RX1, sizeof(RX1),5000);
 800389a:	f241 3388 	movw	r3, #5000	; 0x1388
 800389e:	2214      	movs	r2, #20
 80038a0:	4939      	ldr	r1, [pc, #228]	; (8003988 <main+0x148>)
 80038a2:	483a      	ldr	r0, [pc, #232]	; (800398c <main+0x14c>)
 80038a4:	f7fd fea4 	bl	80015f0 <HAL_SPI_Receive>
      setCursor(0, 0);
 80038a8:	2100      	movs	r1, #0
 80038aa:	2000      	movs	r0, #0
 80038ac:	f7ff fe7c 	bl	80035a8 <setCursor>
      print("SPI Polling Mode");
 80038b0:	4837      	ldr	r0, [pc, #220]	; (8003990 <main+0x150>)
 80038b2:	f7ff fec1 	bl	8003638 <print>
      setCursor(0, 1);
 80038b6:	2101      	movs	r1, #1
 80038b8:	2000      	movs	r0, #0
 80038ba:	f7ff fe75 	bl	80035a8 <setCursor>
      print(RX1);
 80038be:	4832      	ldr	r0, [pc, #200]	; (8003988 <main+0x148>)
 80038c0:	f7ff feba 	bl	8003638 <print>
      HAL_Delay(1000);
 80038c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038c8:	f7fc fcaa 	bl	8000220 <HAL_Delay>
      clear();
 80038cc:	f7ff fe62 	bl	8003594 <clear>
 80038d0:	e7dc      	b.n	800388c <main+0x4c>
    }
    //Receive IT MODE
    else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET)
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	482b      	ldr	r0, [pc, #172]	; (8003984 <main+0x144>)
 80038d6:	f7fd f9ef 	bl	8000cb8 <HAL_GPIO_ReadPin>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d112      	bne.n	8003906 <main+0xc6>
       {
         HAL_SPI_Receive_IT(&hspi1, &rxBuffer, 1);
 80038e0:	2201      	movs	r2, #1
 80038e2:	492c      	ldr	r1, [pc, #176]	; (8003994 <main+0x154>)
 80038e4:	4829      	ldr	r0, [pc, #164]	; (800398c <main+0x14c>)
 80038e6:	f7fe f937 	bl	8001b58 <HAL_SPI_Receive_IT>
         setCursor(0, 0);
 80038ea:	2100      	movs	r1, #0
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7ff fe5b 	bl	80035a8 <setCursor>
         print("SPI IT Mode");
 80038f2:	4829      	ldr	r0, [pc, #164]	; (8003998 <main+0x158>)
 80038f4:	f7ff fea0 	bl	8003638 <print>
         HAL_Delay(1000);
 80038f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038fc:	f7fc fc90 	bl	8000220 <HAL_Delay>
         clear();
 8003900:	f7ff fe48 	bl	8003594 <clear>
 8003904:	e7c2      	b.n	800388c <main+0x4c>
       }
    else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_SET)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	481e      	ldr	r0, [pc, #120]	; (8003984 <main+0x144>)
 800390a:	f7fd f9d5 	bl	8000cb8 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d119      	bne.n	8003948 <main+0x108>
           {
             HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)RX2,sizeof(RX2));
 8003914:	2214      	movs	r2, #20
 8003916:	4921      	ldr	r1, [pc, #132]	; (800399c <main+0x15c>)
 8003918:	481c      	ldr	r0, [pc, #112]	; (800398c <main+0x14c>)
 800391a:	f7fe fa4f 	bl	8001dbc <HAL_SPI_Receive_DMA>
             setCursor(0, 0);
 800391e:	2100      	movs	r1, #0
 8003920:	2000      	movs	r0, #0
 8003922:	f7ff fe41 	bl	80035a8 <setCursor>
             print("SPI DMA Mode");
 8003926:	481e      	ldr	r0, [pc, #120]	; (80039a0 <main+0x160>)
 8003928:	f7ff fe86 	bl	8003638 <print>
             setCursor(0, 1);
 800392c:	2101      	movs	r1, #1
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff fe3a 	bl	80035a8 <setCursor>
             print(RX2);
 8003934:	4819      	ldr	r0, [pc, #100]	; (800399c <main+0x15c>)
 8003936:	f7ff fe7f 	bl	8003638 <print>
             HAL_Delay(1000);
 800393a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800393e:	f7fc fc6f 	bl	8000220 <HAL_Delay>
             clear();
 8003942:	f7ff fe27 	bl	8003594 <clear>
 8003946:	e7a1      	b.n	800388c <main+0x4c>
           }
    else
    {
      setCursor(0, 0);
 8003948:	2100      	movs	r1, #0
 800394a:	2000      	movs	r0, #0
 800394c:	f7ff fe2c 	bl	80035a8 <setCursor>
      print("SLAVE Ready");
 8003950:	4814      	ldr	r0, [pc, #80]	; (80039a4 <main+0x164>)
 8003952:	f7ff fe71 	bl	8003638 <print>
      setCursor(0, 1);
 8003956:	2101      	movs	r1, #1
 8003958:	2000      	movs	r0, #0
 800395a:	f7ff fe25 	bl	80035a8 <setCursor>
      print("TO Receive");
 800395e:	4812      	ldr	r0, [pc, #72]	; (80039a8 <main+0x168>)
 8003960:	f7ff fe6a 	bl	8003638 <print>
      HAL_SPI_Abort(&hspi1);
 8003964:	4809      	ldr	r0, [pc, #36]	; (800398c <main+0x14c>)
 8003966:	f7fe fbf3 	bl	8002150 <HAL_SPI_Abort>
      HAL_SPI_Abort_IT(&hspi1);
 800396a:	4808      	ldr	r0, [pc, #32]	; (800398c <main+0x14c>)
 800396c:	f7fe fcd4 	bl	8002318 <HAL_SPI_Abort_IT>
      HAL_SPI_DMAStop(&hspi1);
 8003970:	4806      	ldr	r0, [pc, #24]	; (800398c <main+0x14c>)
 8003972:	f7fe fdc3 	bl	80024fc <HAL_SPI_DMAStop>
      HAL_Delay(1000);
 8003976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800397a:	f7fc fc51 	bl	8000220 <HAL_Delay>
      clear();
 800397e:	f7ff fe09 	bl	8003594 <clear>
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==GPIO_PIN_SET)
 8003982:	e783      	b.n	800388c <main+0x4c>
 8003984:	40010c00 	.word	0x40010c00
 8003988:	200000f0 	.word	0x200000f0
 800398c:	20000050 	.word	0x20000050
 8003990:	08003e64 	.word	0x08003e64
 8003994:	200000ec 	.word	0x200000ec
 8003998:	08003e78 	.word	0x08003e78
 800399c:	20000104 	.word	0x20000104
 80039a0:	08003e84 	.word	0x08003e84
 80039a4:	08003e94 	.word	0x08003e94
 80039a8:	08003ea0 	.word	0x08003ea0

080039ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b090      	sub	sp, #64	; 0x40
 80039b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039b2:	f107 0318 	add.w	r3, r7, #24
 80039b6:	2228      	movs	r2, #40	; 0x28
 80039b8:	2100      	movs	r1, #0
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 fa36 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	60da      	str	r2, [r3, #12]
 80039cc:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039ce:	2302      	movs	r3, #2
 80039d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039d6:	2310      	movs	r3, #16
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039da:	2302      	movs	r3, #2
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80039de:	2300      	movs	r3, #0
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80039e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e8:	f107 0318 	add.w	r3, r7, #24
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fd f993 	bl	8000d18 <HAL_RCC_OscConfig>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80039f8:	f000 f8b6 	bl	8003b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fc:	230f      	movs	r3, #15
 80039fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a00:	2302      	movs	r3, #2
 8003a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2100      	movs	r1, #0
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fd fc01 	bl	800121c <HAL_RCC_ClockConfig>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8003a20:	f000 f8a2 	bl	8003b68 <Error_Handler>
  }
}
 8003a24:	bf00      	nop
 8003a26:	3740      	adds	r7, #64	; 0x40
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a30:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <MX_SPI1_Init+0x64>)
 8003a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a3c:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a74:	220a      	movs	r2, #10
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a78:	4804      	ldr	r0, [pc, #16]	; (8003a8c <MX_SPI1_Init+0x60>)
 8003a7a:	f7fd fd35 	bl	80014e8 <HAL_SPI_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8003a84:	f000 f870 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000050 	.word	0x20000050
 8003a90:	40013000 	.word	0x40013000

08003a94 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <MX_DMA_Init+0x38>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <MX_DMA_Init+0x38>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6153      	str	r3, [r2, #20]
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <MX_DMA_Init+0x38>)
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	200c      	movs	r0, #12
 8003ab8:	f7fc fcad 	bl	8000416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003abc:	200c      	movs	r0, #12
 8003abe:	f7fc fcc6 	bl	800044e <HAL_NVIC_EnableIRQ>

}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000

08003ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	609a      	str	r2, [r3, #8]
 8003ae2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6193      	str	r3, [r2, #24]
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003b02:	f043 0308 	orr.w	r3, r3, #8
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <MX_GPIO_Init+0x90>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	603b      	str	r3, [r7, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8003b14:	2200      	movs	r2, #0
 8003b16:	f64f 6103 	movw	r1, #65027	; 0xfe03
 8003b1a:	4812      	ldr	r0, [pc, #72]	; (8003b64 <MX_GPIO_Init+0x94>)
 8003b1c:	f7fd f8e3 	bl	8000ce6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8003b20:	f64f 6303 	movw	r3, #65027	; 0xfe03
 8003b24:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b26:	2301      	movs	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b32:	f107 0308 	add.w	r3, r7, #8
 8003b36:	4619      	mov	r1, r3
 8003b38:	480a      	ldr	r0, [pc, #40]	; (8003b64 <MX_GPIO_Init+0x94>)
 8003b3a:	f7fc ff41 	bl	80009c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003b3e:	23e0      	movs	r3, #224	; 0xe0
 8003b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <MX_GPIO_Init+0x94>)
 8003b52:	f7fc ff35 	bl	80009c0 <HAL_GPIO_Init>

}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40010c00 	.word	0x40010c00

08003b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003b80:	f043 0301 	orr.w	r3, r3, #1
 8003b84:	6193      	str	r3, [r2, #24]
 8003b86:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	4a0e      	ldr	r2, [pc, #56]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	61d3      	str	r3, [r2, #28]
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <HAL_MspInit+0x5c>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HAL_MspInit+0x60>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_MspInit+0x60>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	40010000 	.word	0x40010000

08003bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0310 	add.w	r3, r7, #16
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a32      	ldr	r2, [pc, #200]	; (8003cbc <HAL_SPI_MspInit+0xe4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d15d      	bne.n	8003cb4 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bf8:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	4a30      	ldr	r2, [pc, #192]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c02:	6193      	str	r3, [r2, #24]
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c10:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6193      	str	r3, [r2, #24]
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <HAL_SPI_MspInit+0xe8>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8003c28:	23b0      	movs	r3, #176	; 0xb0
 8003c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c34:	f107 0310 	add.w	r3, r7, #16
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4822      	ldr	r0, [pc, #136]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c3c:	f7fc fec0 	bl	80009c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c40:	2340      	movs	r3, #64	; 0x40
 8003c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f107 0310 	add.w	r3, r7, #16
 8003c50:	4619      	mov	r1, r3
 8003c52:	481c      	ldr	r0, [pc, #112]	; (8003cc4 <HAL_SPI_MspInit+0xec>)
 8003c54:	f7fc feb4 	bl	80009c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8003c58:	4b1b      	ldr	r3, [pc, #108]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c5a:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <HAL_SPI_MspInit+0xf4>)
 8003c5c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c6c:	2280      	movs	r2, #128	; 0x80
 8003c6e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c70:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c76:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c82:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003c88:	480f      	ldr	r0, [pc, #60]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c8a:	f7fc fbfb 	bl	8000484 <HAL_DMA_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003c94:	f7ff ff68 	bl	8003b68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0b      	ldr	r2, [pc, #44]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003c9c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c9e:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <HAL_SPI_MspInit+0xf0>)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2023      	movs	r0, #35	; 0x23
 8003caa:	f7fc fbb4 	bl	8000416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003cae:	2023      	movs	r0, #35	; 0x23
 8003cb0:	f7fc fbcd 	bl	800044e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003cb4:	bf00      	nop
 8003cb6:	3720      	adds	r7, #32
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40013000 	.word	0x40013000
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	200000a8 	.word	0x200000a8
 8003ccc:	4002001c 	.word	0x4002001c

08003cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <HardFault_Handler+0x4>

08003ce2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce6:	e7fe      	b.n	8003ce6 <MemManage_Handler+0x4>

08003ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cec:	e7fe      	b.n	8003cec <BusFault_Handler+0x4>

08003cee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf2:	e7fe      	b.n	8003cf2 <UsageFault_Handler+0x4>

08003cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d1c:	f7fc fa64 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)==GPIO_PIN_SET)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	4808      	ldr	r0, [pc, #32]	; (8003d4c <DMA1_Channel2_IRQHandler+0x28>)
 8003d2c:	f7fc ffc4 	bl	8000cb8 <HAL_GPIO_ReadPin>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d104      	bne.n	8003d40 <DMA1_Channel2_IRQHandler+0x1c>
    {
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8003d36:	2201      	movs	r2, #1
 8003d38:	2102      	movs	r1, #2
 8003d3a:	4804      	ldr	r0, [pc, #16]	; (8003d4c <DMA1_Channel2_IRQHandler+0x28>)
 8003d3c:	f7fc ffd3 	bl	8000ce6 <HAL_GPIO_WritePin>
    }
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003d40:	4803      	ldr	r0, [pc, #12]	; (8003d50 <DMA1_Channel2_IRQHandler+0x2c>)
 8003d42:	f7fc fd09 	bl	8000758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40010c00 	.word	0x40010c00
 8003d50:	200000a8 	.word	0x200000a8

08003d54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */
  //rxBuffer = 0 or 1
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==GPIO_PIN_SET)
 8003d58:	2140      	movs	r1, #64	; 0x40
 8003d5a:	4809      	ldr	r0, [pc, #36]	; (8003d80 <SPI1_IRQHandler+0x2c>)
 8003d5c:	f7fc ffac 	bl	8000cb8 <HAL_GPIO_ReadPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d106      	bne.n	8003d74 <SPI1_IRQHandler+0x20>
             {
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, rxBuffer);
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <SPI1_IRQHandler+0x30>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4804      	ldr	r0, [pc, #16]	; (8003d80 <SPI1_IRQHandler+0x2c>)
 8003d70:	f7fc ffb9 	bl	8000ce6 <HAL_GPIO_WritePin>
             }
  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003d74:	4804      	ldr	r0, [pc, #16]	; (8003d88 <SPI1_IRQHandler+0x34>)
 8003d76:	f7fe fc01 	bl	800257c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	40010c00 	.word	0x40010c00
 8003d84:	200000ec 	.word	0x200000ec
 8003d88:	20000050 	.word	0x20000050

08003d8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d9a:	490d      	ldr	r1, [pc, #52]	; (8003dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	; (8003dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003da0:	e002      	b.n	8003da8 <LoopCopyDataInit>

08003da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003da6:	3304      	adds	r3, #4

08003da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dac:	d3f9      	bcc.n	8003da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003db0:	4c0a      	ldr	r4, [pc, #40]	; (8003ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003db4:	e001      	b.n	8003dba <LoopFillZerobss>

08003db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db8:	3204      	adds	r2, #4

08003dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dbc:	d3fb      	bcc.n	8003db6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003dbe:	f7ff ffe5 	bl	8003d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003dc2:	f000 f80f 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003dc6:	f7ff fd3b 	bl	8003840 <main>
  bx lr
 8003dca:	4770      	bx	lr
  ldr r0, =_sdata
 8003dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003dd4:	08003ec4 	.word	0x08003ec4
  ldr r2, =_sbss
 8003dd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003ddc:	20000118 	.word	0x20000118

08003de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003de0:	e7fe      	b.n	8003de0 <ADC1_2_IRQHandler>
	...

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	2600      	movs	r6, #0
 8003de8:	4d0c      	ldr	r5, [pc, #48]	; (8003e1c <__libc_init_array+0x38>)
 8003dea:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	f000 f822 	bl	8003e3c <_init>
 8003df8:	2600      	movs	r6, #0
 8003dfa:	4d0a      	ldr	r5, [pc, #40]	; (8003e24 <__libc_init_array+0x40>)
 8003dfc:	4c0a      	ldr	r4, [pc, #40]	; (8003e28 <__libc_init_array+0x44>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003ebc 	.word	0x08003ebc
 8003e20:	08003ebc 	.word	0x08003ebc
 8003e24:	08003ebc 	.word	0x08003ebc
 8003e28:	08003ec0 	.word	0x08003ec0

08003e2c <memset>:
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	4402      	add	r2, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
