
SPI TC72 Temperature Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800273c  0800273c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800273c  0800273c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800273c  0800273c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800273c  0800273c  0001273c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002750  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002750  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006980  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001418  00000000  00000000  000269b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00027dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  000285a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b64  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fb1  00000000  00000000  0003f86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081d26  00000000  00000000  0004781d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9543  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  000c9594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026e4 	.word	0x080026e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026e4 	.word	0x080026e4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 f92b 	bl	8000874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f001 ff14 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f935 	bl	80008c2 <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 f90b 	bl	800088a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000008 	.word	0x20000008
 800068c:	20000004 	.word	0x20000004
 8000690:	20000000 	.word	0x20000000

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000004 	.word	0x20000004
 80006b4:	20000028 	.word	0x20000028

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000028 	.word	0x20000028

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff0 	bl	80006b8 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffe0 	bl	80006b8 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000004 	.word	0x20000004

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000840:	d301      	bcc.n	8000846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000842:	2301      	movs	r3, #1
 8000844:	e00f      	b.n	8000866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <SysTick_Config+0x40>)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800084e:	210f      	movs	r1, #15
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f7ff ff90 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <SysTick_Config+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <SysTick_Config+0x40>)
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	e000e010 	.word	0xe000e010

08000874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff ff49 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088a:	b580      	push	{r7, lr}
 800088c:	b086      	sub	sp, #24
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800089c:	f7ff ff5e 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	6978      	ldr	r0, [r7, #20]
 80008a8:	f7ff ff90 	bl	80007cc <NVIC_EncodePriority>
 80008ac:	4602      	mov	r2, r0
 80008ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff5f 	bl	8000778 <__NVIC_SetPriority>
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffb0 	bl	8000830 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08b      	sub	sp, #44	; 0x2c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e161      	b.n	8000bb4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f0:	2201      	movs	r2, #1
 80008f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	4013      	ands	r3, r2
 8000902:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 8150 	bne.w	8000bae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a97      	ldr	r2, [pc, #604]	; (8000b70 <HAL_GPIO_Init+0x294>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d05e      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000918:	4a95      	ldr	r2, [pc, #596]	; (8000b70 <HAL_GPIO_Init+0x294>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d875      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800091e:	4a95      	ldr	r2, [pc, #596]	; (8000b74 <HAL_GPIO_Init+0x298>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d058      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000924:	4a93      	ldr	r2, [pc, #588]	; (8000b74 <HAL_GPIO_Init+0x298>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d86f      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800092a:	4a93      	ldr	r2, [pc, #588]	; (8000b78 <HAL_GPIO_Init+0x29c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d052      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000930:	4a91      	ldr	r2, [pc, #580]	; (8000b78 <HAL_GPIO_Init+0x29c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d869      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000936:	4a91      	ldr	r2, [pc, #580]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d04c      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 800093c:	4a8f      	ldr	r2, [pc, #572]	; (8000b7c <HAL_GPIO_Init+0x2a0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d863      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000942:	4a8f      	ldr	r2, [pc, #572]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d046      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
 8000948:	4a8d      	ldr	r2, [pc, #564]	; (8000b80 <HAL_GPIO_Init+0x2a4>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d85d      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 800094e:	2b12      	cmp	r3, #18
 8000950:	d82a      	bhi.n	80009a8 <HAL_GPIO_Init+0xcc>
 8000952:	2b12      	cmp	r3, #18
 8000954:	d859      	bhi.n	8000a0a <HAL_GPIO_Init+0x12e>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <HAL_GPIO_Init+0x80>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	080009d7 	.word	0x080009d7
 8000960:	080009b1 	.word	0x080009b1
 8000964:	080009c3 	.word	0x080009c3
 8000968:	08000a05 	.word	0x08000a05
 800096c:	08000a0b 	.word	0x08000a0b
 8000970:	08000a0b 	.word	0x08000a0b
 8000974:	08000a0b 	.word	0x08000a0b
 8000978:	08000a0b 	.word	0x08000a0b
 800097c:	08000a0b 	.word	0x08000a0b
 8000980:	08000a0b 	.word	0x08000a0b
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a0b 	.word	0x08000a0b
 800098c:	08000a0b 	.word	0x08000a0b
 8000990:	08000a0b 	.word	0x08000a0b
 8000994:	08000a0b 	.word	0x08000a0b
 8000998:	08000a0b 	.word	0x08000a0b
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	080009b9 	.word	0x080009b9
 80009a4:	080009cd 	.word	0x080009cd
 80009a8:	4a76      	ldr	r2, [pc, #472]	; (8000b84 <HAL_GPIO_Init+0x2a8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ae:	e02c      	b.n	8000a0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e029      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	3304      	adds	r3, #4
 80009be:	623b      	str	r3, [r7, #32]
          break;
 80009c0:	e024      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	3308      	adds	r3, #8
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e01f      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	330c      	adds	r3, #12
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e01a      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d102      	bne.n	80009e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009de:	2304      	movs	r3, #4
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e013      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d105      	bne.n	80009f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009ec:	2308      	movs	r3, #8
 80009ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	611a      	str	r2, [r3, #16]
          break;
 80009f6:	e009      	b.n	8000a0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f8:	2308      	movs	r3, #8
 80009fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	615a      	str	r2, [r3, #20]
          break;
 8000a02:	e003      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x130>
          break;
 8000a0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	2bff      	cmp	r3, #255	; 0xff
 8000a10:	d801      	bhi.n	8000a16 <HAL_GPIO_Init+0x13a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	e001      	b.n	8000a1a <HAL_GPIO_Init+0x13e>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2bff      	cmp	r3, #255	; 0xff
 8000a20:	d802      	bhi.n	8000a28 <HAL_GPIO_Init+0x14c>
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x152>
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	3b08      	subs	r3, #8
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	210f      	movs	r1, #15
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	401a      	ands	r2, r3
 8000a40:	6a39      	ldr	r1, [r7, #32]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f000 80a9 	beq.w	8000bae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5c:	4b4a      	ldr	r3, [pc, #296]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a49      	ldr	r2, [pc, #292]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b47      	ldr	r3, [pc, #284]	; (8000b88 <HAL_GPIO_Init+0x2ac>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a74:	4a45      	ldr	r2, [pc, #276]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	089b      	lsrs	r3, r3, #2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	220f      	movs	r2, #15
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <HAL_GPIO_Init+0x2b4>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d00d      	beq.n	8000abc <HAL_GPIO_Init+0x1e0>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a3c      	ldr	r2, [pc, #240]	; (8000b94 <HAL_GPIO_Init+0x2b8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d007      	beq.n	8000ab8 <HAL_GPIO_Init+0x1dc>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3b      	ldr	r2, [pc, #236]	; (8000b98 <HAL_GPIO_Init+0x2bc>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d101      	bne.n	8000ab4 <HAL_GPIO_Init+0x1d8>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e004      	b.n	8000abe <HAL_GPIO_Init+0x1e2>
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	e002      	b.n	8000abe <HAL_GPIO_Init+0x1e2>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e000      	b.n	8000abe <HAL_GPIO_Init+0x1e2>
 8000abc:	2300      	movs	r3, #0
 8000abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac0:	f002 0203 	and.w	r2, r2, #3
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	4093      	lsls	r3, r2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ace:	492f      	ldr	r1, [pc, #188]	; (8000b8c <HAL_GPIO_Init+0x2b0>)
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d006      	beq.n	8000af6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	492b      	ldr	r1, [pc, #172]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	600b      	str	r3, [r1, #0]
 8000af4:	e006      	b.n	8000b04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	4927      	ldr	r1, [pc, #156]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d006      	beq.n	8000b1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b12:	685a      	ldr	r2, [r3, #4]
 8000b14:	4921      	ldr	r1, [pc, #132]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	604b      	str	r3, [r1, #4]
 8000b1c:	e006      	b.n	8000b2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	491d      	ldr	r1, [pc, #116]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b28:	4013      	ands	r3, r2
 8000b2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d006      	beq.n	8000b46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b3a:	689a      	ldr	r2, [r3, #8]
 8000b3c:	4917      	ldr	r1, [pc, #92]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	608b      	str	r3, [r1, #8]
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	4913      	ldr	r1, [pc, #76]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01f      	beq.n	8000ba0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	490d      	ldr	r1, [pc, #52]	; (8000b9c <HAL_GPIO_Init+0x2c0>)
 8000b66:	69bb      	ldr	r3, [r7, #24]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	60cb      	str	r3, [r1, #12]
 8000b6c:	e01f      	b.n	8000bae <HAL_GPIO_Init+0x2d2>
 8000b6e:	bf00      	nop
 8000b70:	10320000 	.word	0x10320000
 8000b74:	10310000 	.word	0x10310000
 8000b78:	10220000 	.word	0x10220000
 8000b7c:	10210000 	.word	0x10210000
 8000b80:	10120000 	.word	0x10120000
 8000b84:	10110000 	.word	0x10110000
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40010000 	.word	0x40010000
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_GPIO_Init+0x2f4>)
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4909      	ldr	r1, [pc, #36]	; (8000bd0 <HAL_GPIO_Init+0x2f4>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f47f ae96 	bne.w	80008f0 <HAL_GPIO_Init+0x14>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	372c      	adds	r7, #44	; 0x2c
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bf0:	e003      	b.n	8000bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bf2:	887b      	ldrh	r3, [r7, #2]
 8000bf4:	041a      	lsls	r2, r3, #16
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	611a      	str	r2, [r3, #16]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d101      	bne.n	8000c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e272      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 8087 	beq.w	8000d32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c24:	4b92      	ldr	r3, [pc, #584]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 030c 	and.w	r3, r3, #12
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d00c      	beq.n	8000c4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c30:	4b8f      	ldr	r3, [pc, #572]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 030c 	and.w	r3, r3, #12
 8000c38:	2b08      	cmp	r3, #8
 8000c3a:	d112      	bne.n	8000c62 <HAL_RCC_OscConfig+0x5e>
 8000c3c:	4b8c      	ldr	r3, [pc, #560]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c48:	d10b      	bne.n	8000c62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4a:	4b89      	ldr	r3, [pc, #548]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d06c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x12c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d168      	bne.n	8000d30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e24c      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c6a:	d106      	bne.n	8000c7a <HAL_RCC_OscConfig+0x76>
 8000c6c:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c76:	6013      	str	r3, [r2, #0]
 8000c78:	e02e      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10c      	bne.n	8000c9c <HAL_RCC_OscConfig+0x98>
 8000c82:	4b7b      	ldr	r3, [pc, #492]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a7a      	ldr	r2, [pc, #488]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b78      	ldr	r3, [pc, #480]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a77      	ldr	r2, [pc, #476]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e01d      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0xbc>
 8000ca6:	4b72      	ldr	r3, [pc, #456]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a71      	ldr	r2, [pc, #452]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a6e      	ldr	r2, [pc, #440]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000cc0:	4b6b      	ldr	r3, [pc, #428]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a6a      	ldr	r2, [pc, #424]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b68      	ldr	r3, [pc, #416]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a67      	ldr	r2, [pc, #412]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d013      	beq.n	8000d08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fcea 	bl	80006b8 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fce6 	bl	80006b8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e200      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4b5d      	ldr	r3, [pc, #372]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f0      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xe4>
 8000d06:	e014      	b.n	8000d32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fcd6 	bl	80006b8 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fcd2 	bl	80006b8 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e1ec      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x10c>
 8000d2e:	e000      	b.n	8000d32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d063      	beq.n	8000e06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d3e:	4b4c      	ldr	r3, [pc, #304]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d4a:	4b49      	ldr	r3, [pc, #292]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d11c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x18c>
 8000d56:	4b46      	ldr	r3, [pc, #280]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d116      	bne.n	8000d90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <HAL_RCC_OscConfig+0x176>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d001      	beq.n	8000d7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e1c0      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4939      	ldr	r1, [pc, #228]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	e03a      	b.n	8000e06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d98:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fc8b 	bl	80006b8 <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da6:	f7ff fc87 	bl	80006b8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e1a1      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4927      	ldr	r1, [pc, #156]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_RCC_OscConfig+0x270>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de0:	f7ff fc6a 	bl	80006b8 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc66 	bl	80006b8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e180      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d03a      	beq.n	8000e88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d019      	beq.n	8000e4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_RCC_OscConfig+0x274>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e20:	f7ff fc4a 	bl	80006b8 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc46 	bl	80006b8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e160      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f000 fad8 	bl	80013fc <RCC_Delay>
 8000e4c:	e01c      	b.n	8000e88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_RCC_OscConfig+0x274>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e54:	f7ff fc30 	bl	80006b8 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5a:	e00f      	b.n	8000e7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fc2c 	bl	80006b8 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d908      	bls.n	8000e7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e146      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	42420000 	.word	0x42420000
 8000e78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	4b92      	ldr	r3, [pc, #584]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e9      	bne.n	8000e5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a6 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10d      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b88      	ldr	r3, [pc, #544]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a87      	ldr	r2, [pc, #540]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b85      	ldr	r3, [pc, #532]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec2:	4b82      	ldr	r3, [pc, #520]	; (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d118      	bne.n	8000f00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ece:	4b7f      	ldr	r3, [pc, #508]	; (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7e      	ldr	r2, [pc, #504]	; (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fbed 	bl	80006b8 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee2:	f7ff fbe9 	bl	80006b8 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	; 0x64
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e103      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef4:	4b75      	ldr	r3, [pc, #468]	; (80010cc <HAL_RCC_OscConfig+0x4c8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x312>
 8000f08:	4b6f      	ldr	r3, [pc, #444]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a6e      	ldr	r2, [pc, #440]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e02d      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d10c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x334>
 8000f1e:	4b6a      	ldr	r3, [pc, #424]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	4a69      	ldr	r2, [pc, #420]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	f023 0301 	bic.w	r3, r3, #1
 8000f28:	6213      	str	r3, [r2, #32]
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	4a66      	ldr	r2, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	f023 0304 	bic.w	r3, r3, #4
 8000f34:	6213      	str	r3, [r2, #32]
 8000f36:	e01c      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d10c      	bne.n	8000f5a <HAL_RCC_OscConfig+0x356>
 8000f40:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	6a1b      	ldr	r3, [r3, #32]
 8000f44:	4a60      	ldr	r2, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	6213      	str	r3, [r2, #32]
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a5d      	ldr	r2, [pc, #372]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	e00b      	b.n	8000f72 <HAL_RCC_OscConfig+0x36e>
 8000f5a:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a5a      	ldr	r2, [pc, #360]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0304 	bic.w	r3, r3, #4
 8000f70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d015      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fb9d 	bl	80006b8 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fb99 	bl	80006b8 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e0b1      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	4b4b      	ldr	r3, [pc, #300]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0ee      	beq.n	8000f82 <HAL_RCC_OscConfig+0x37e>
 8000fa4:	e014      	b.n	8000fd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb87 	bl	80006b8 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fac:	e00a      	b.n	8000fc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fae:	f7ff fb83 	bl	80006b8 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e09b      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc4:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1ee      	bne.n	8000fae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d105      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8087 	beq.w	80010fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d061      	beq.n	80010bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d146      	bne.n	800108e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fb57 	bl	80006b8 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fb53 	bl	80006b8 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e06d      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001034:	d108      	bne.n	8001048 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4921      	ldr	r1, [pc, #132]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a19      	ldr	r1, [r3, #32]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	430b      	orrs	r3, r1
 800105a:	491b      	ldr	r1, [pc, #108]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001066:	f7ff fb27 	bl	80006b8 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106e:	f7ff fb23 	bl	80006b8 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e03d      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x46a>
 800108c:	e035      	b.n	80010fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_RCC_OscConfig+0x4cc>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fb10 	bl	80006b8 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fb0c 	bl	80006b8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e026      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x498>
 80010ba:	e01e      	b.n	80010fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e019      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40007000 	.word	0x40007000
 80010d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <HAL_RCC_OscConfig+0x500>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0d0      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b6a      	ldr	r3, [pc, #424]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d910      	bls.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 0207 	bic.w	r2, r3, #7
 8001132:	4965      	ldr	r1, [pc, #404]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b8      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800116e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494d      	ldr	r1, [pc, #308]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d040      	beq.n	8001228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07f      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4b41      	ldr	r3, [pc, #260]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e073      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e06b      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e6:	4b39      	ldr	r3, [pc, #228]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0203 	bic.w	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4936      	ldr	r1, [pc, #216]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f8:	f7ff fa5e 	bl	80006b8 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff fa5a 	bl	80006b8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	; 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e053      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 020c 	and.w	r2, r3, #12
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1eb      	bne.n	8001200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d210      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 0207 	bic.w	r2, r3, #7
 800123e:	4922      	ldr	r1, [pc, #136]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e032      	b.n	80012be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4916      	ldr	r1, [pc, #88]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001296:	f000 f821 	bl	80012dc <HAL_RCC_GetSysClockFreq>
 800129a:	4602      	mov	r2, r0
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	490a      	ldr	r1, [pc, #40]	; (80012d0 <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_RCC_ClockConfig+0x1cc>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1d0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f9bc 	bl	8000634 <HAL_InitTick>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	08002724 	.word	0x08002724
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000

080012dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012dc:	b490      	push	{r4, r7}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012e2:	4b29      	ldr	r3, [pc, #164]	; (8001388 <HAL_RCC_GetSysClockFreq+0xac>)
 80012e4:	1d3c      	adds	r4, r7, #4
 80012e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ec:	f240 2301 	movw	r3, #513	; 0x201
 80012f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b04      	cmp	r3, #4
 8001314:	d002      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x40>
 8001316:	2b08      	cmp	r3, #8
 8001318:	d003      	beq.n	8001322 <HAL_RCC_GetSysClockFreq+0x46>
 800131a:	e02b      	b.n	8001374 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb4>)
 800131e:	623b      	str	r3, [r7, #32]
      break;
 8001320:	e02b      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	0c9b      	lsrs	r3, r3, #18
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3328      	adds	r3, #40	; 0x28
 800132c:	443b      	add	r3, r7
 800132e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001332:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d012      	beq.n	8001364 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	0c5b      	lsrs	r3, r3, #17
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	3328      	adds	r3, #40	; 0x28
 800134a:	443b      	add	r3, r7
 800134c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001350:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001356:	fb03 f202 	mul.w	r2, r3, r2
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
 8001362:	e004      	b.n	800136e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001368:	fb02 f303 	mul.w	r3, r2, r3
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	623b      	str	r3, [r7, #32]
      break;
 8001372:	e002      	b.n	800137a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001376:	623b      	str	r3, [r7, #32]
      break;
 8001378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800137a:	6a3b      	ldr	r3, [r7, #32]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3728      	adds	r7, #40	; 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bc90      	pop	{r4, r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	080026fc 	.word	0x080026fc
 800138c:	40021000 	.word	0x40021000
 8001390:	007a1200 	.word	0x007a1200
 8001394:	003d0900 	.word	0x003d0900

08001398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000008 	.word	0x20000008

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff2 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	08002734 	.word	0x08002734

080013d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d8:	f7ff ffde 	bl	8001398 <HAL_RCC_GetHCLKFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	0adb      	lsrs	r3, r3, #11
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	4903      	ldr	r1, [pc, #12]	; (80013f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	08002734 	.word	0x08002734

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000008 	.word	0x20000008
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e076      	b.n	8001538 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800145a:	d009      	beq.n	8001470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
 8001462:	e005      	b.n	8001470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f001 f812 	bl	80024b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f4:	ea42 0103 	orr.w	r1, r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	0c1a      	lsrs	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f002 0204 	and.w	r2, r2, #4
 8001516:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001526:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800155a:	2b01      	cmp	r3, #1
 800155c:	d101      	bne.n	8001562 <HAL_SPI_Transmit+0x22>
 800155e:	2302      	movs	r3, #2
 8001560:	e126      	b.n	80017b0 <HAL_SPI_Transmit+0x270>
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800156a:	f7ff f8a5 	bl	80006b8 <HAL_GetTick>
 800156e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d002      	beq.n	8001586 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001580:	2302      	movs	r3, #2
 8001582:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001584:	e10b      	b.n	800179e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_SPI_Transmit+0x52>
 800158c:	88fb      	ldrh	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001596:	e102      	b.n	800179e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2203      	movs	r2, #3
 800159c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	88fa      	ldrh	r2, [r7, #6]
 80015b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015de:	d10f      	bne.n	8001600 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800160a:	2b40      	cmp	r3, #64	; 0x40
 800160c:	d007      	beq.n	800161e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001626:	d14b      	bne.n	80016c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_SPI_Transmit+0xf6>
 8001630:	8afb      	ldrh	r3, [r7, #22]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d13e      	bne.n	80016b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	881a      	ldrh	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	1c9a      	adds	r2, r3, #2
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800165a:	e02b      	b.n	80016b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d112      	bne.n	8001690 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	1c9a      	adds	r2, r3, #2
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001684:	b29b      	uxth	r3, r3
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	86da      	strh	r2, [r3, #54]	; 0x36
 800168e:	e011      	b.n	80016b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001690:	f7ff f812 	bl	80006b8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d803      	bhi.n	80016a8 <HAL_SPI_Transmit+0x168>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a6:	d102      	bne.n	80016ae <HAL_SPI_Transmit+0x16e>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80016b2:	e074      	b.n	800179e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ce      	bne.n	800165c <HAL_SPI_Transmit+0x11c>
 80016be:	e04c      	b.n	800175a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_SPI_Transmit+0x18e>
 80016c8:	8afb      	ldrh	r3, [r7, #22]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d140      	bne.n	8001750 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	330c      	adds	r3, #12
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80016f4:	e02c      	b.n	8001750 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	d113      	bne.n	800172c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	330c      	adds	r3, #12
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	86da      	strh	r2, [r3, #54]	; 0x36
 800172a:	e011      	b.n	8001750 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800172c:	f7fe ffc4 	bl	80006b8 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d803      	bhi.n	8001744 <HAL_SPI_Transmit+0x204>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001742:	d102      	bne.n	800174a <HAL_SPI_Transmit+0x20a>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800174e:	e026      	b.n	800179e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1cd      	bne.n	80016f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 fa54 	bl	8001c0c <SPI_EndRxTxTransaction>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d002      	beq.n	8001770 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10a      	bne.n	800178e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
 800179a:	e000      	b.n	800179e <HAL_SPI_Transmit+0x25e>
  }

error:
 800179c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80017c6:	2301      	movs	r3, #1
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_SPI_TransmitReceive+0x26>
 80017da:	2302      	movs	r3, #2
 80017dc:	e18a      	b.n	8001af4 <HAL_SPI_TransmitReceive+0x33c>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80017e6:	f7fe ff67 	bl	80006b8 <HAL_GetTick>
 80017ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00f      	beq.n	8001828 <HAL_SPI_TransmitReceive+0x70>
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800180e:	d107      	bne.n	8001820 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <HAL_SPI_TransmitReceive+0x68>
 8001818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800181c:	2b04      	cmp	r3, #4
 800181e:	d003      	beq.n	8001828 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001820:	2302      	movs	r3, #2
 8001822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001826:	e15b      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_SPI_TransmitReceive+0x82>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_SPI_TransmitReceive+0x82>
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001840:	e14e      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b04      	cmp	r3, #4
 800184c:	d003      	beq.n	8001856 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2205      	movs	r2, #5
 8001852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2200      	movs	r2, #0
 800185a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	887a      	ldrh	r2, [r7, #2]
 8001866:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	887a      	ldrh	r2, [r7, #2]
 800187e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001896:	2b40      	cmp	r3, #64	; 0x40
 8001898:	d007      	beq.n	80018aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018b2:	d178      	bne.n	80019a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_SPI_TransmitReceive+0x10a>
 80018bc:	8b7b      	ldrh	r3, [r7, #26]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d166      	bne.n	8001990 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	1c9a      	adds	r2, r3, #2
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018e6:	e053      	b.n	8001990 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d11b      	bne.n	800192e <HAL_SPI_TransmitReceive+0x176>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d016      	beq.n	800192e <HAL_SPI_TransmitReceive+0x176>
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	2b01      	cmp	r3, #1
 8001904:	d113      	bne.n	800192e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	881a      	ldrh	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	1c9a      	adds	r2, r3, #2
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d119      	bne.n	8001970 <HAL_SPI_TransmitReceive+0x1b8>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001940:	b29b      	uxth	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001958:	1c9a      	adds	r2, r3, #2
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001962:	b29b      	uxth	r3, r3
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800196c:	2301      	movs	r3, #1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001970:	f7fe fea2 	bl	80006b8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800197c:	429a      	cmp	r2, r3
 800197e:	d807      	bhi.n	8001990 <HAL_SPI_TransmitReceive+0x1d8>
 8001980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001986:	d003      	beq.n	8001990 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800198e:	e0a7      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1a6      	bne.n	80018e8 <HAL_SPI_TransmitReceive+0x130>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1a1      	bne.n	80018e8 <HAL_SPI_TransmitReceive+0x130>
 80019a4:	e07c      	b.n	8001aa0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_SPI_TransmitReceive+0x1fc>
 80019ae:	8b7b      	ldrh	r3, [r7, #26]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d16b      	bne.n	8001a8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	330c      	adds	r3, #12
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019da:	e057      	b.n	8001a8c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d11c      	bne.n	8001a24 <HAL_SPI_TransmitReceive+0x26c>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d017      	beq.n	8001a24 <HAL_SPI_TransmitReceive+0x26c>
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d114      	bne.n	8001a24 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	330c      	adds	r3, #12
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d119      	bne.n	8001a66 <HAL_SPI_TransmitReceive+0x2ae>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d014      	beq.n	8001a66 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68da      	ldr	r2, [r3, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a62:	2301      	movs	r3, #1
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a66:	f7fe fe27 	bl	80006b8 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d803      	bhi.n	8001a7e <HAL_SPI_TransmitReceive+0x2c6>
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d102      	bne.n	8001a84 <HAL_SPI_TransmitReceive+0x2cc>
 8001a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001a8a:	e029      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1a2      	bne.n	80019dc <HAL_SPI_TransmitReceive+0x224>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d19d      	bne.n	80019dc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8b1 	bl	8001c0c <SPI_EndRxTxTransaction>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001abc:	e010      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10b      	bne.n	8001ade <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	e000      	b.n	8001ae0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001ade:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001b0c:	f7fe fdd4 	bl	80006b8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	4413      	add	r3, r2
 8001b1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001b1c:	f7fe fdcc 	bl	80006b8 <HAL_GetTick>
 8001b20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	015b      	lsls	r3, r3, #5
 8001b28:	0d1b      	lsrs	r3, r3, #20
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b32:	e054      	b.n	8001bde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3a:	d050      	beq.n	8001bde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b3c:	f7fe fdbc 	bl	80006b8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d902      	bls.n	8001b52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d13d      	bne.n	8001bce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b6a:	d111      	bne.n	8001b90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b74:	d004      	beq.n	8001b80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d107      	bne.n	8001b90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d10f      	bne.n	8001bba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e017      	b.n	8001bfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	bf0c      	ite	eq
 8001bee:	2301      	moveq	r3, #1
 8001bf0:	2300      	movne	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d19b      	bne.n	8001b34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008

08001c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ff6a 	bl	8001afc <SPI_WaitFlagStateUntilTimeout>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f043 0220 	orr.w	r2, r3, #32
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e000      	b.n	8001c40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e03f      	b.n	8001cda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fc6a 	bl	8002548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f905 	bl	8001e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08a      	sub	sp, #40	; 0x28
 8001ce6:	af02      	add	r7, sp, #8
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d17c      	bne.n	8001dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_UART_Transmit+0x2c>
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e075      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_UART_Transmit+0x3e>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e06e      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2221      	movs	r2, #33	; 0x21
 8001d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d36:	f7fe fcbf 	bl	80006b8 <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	88fa      	ldrh	r2, [r7, #6]
 8001d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	88fa      	ldrh	r2, [r7, #6]
 8001d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d50:	d108      	bne.n	8001d64 <HAL_UART_Transmit+0x82>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d104      	bne.n	8001d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	e003      	b.n	8001d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d74:	e02a      	b.n	8001dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f840 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e036      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10b      	bne.n	8001dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3302      	adds	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	e007      	b.n	8001dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1cf      	bne.n	8001d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f810 	bl	8001e06 <UART_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e006      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dfc:	2302      	movs	r3, #2
  }
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4613      	mov	r3, r2
 8001e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e16:	e02c      	b.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d028      	beq.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e26:	f7fe fc47 	bl	80006b8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d21d      	bcs.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e00f      	b.n	8001e92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d0c3      	beq.n	8001e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ed6:	f023 030c 	bic.w	r3, r3, #12
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <UART_SetConfig+0x114>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f04:	f7ff fa66 	bl	80013d4 <HAL_RCC_GetPCLK2Freq>
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	e002      	b.n	8001f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f0c:	f7ff fa4e 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8001f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009a      	lsls	r2, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	0119      	lsls	r1, r3, #4
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	009a      	lsls	r2, r3, #2
 8001f3c:	441a      	add	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2064      	movs	r0, #100	; 0x64
 8001f52:	fb00 f303 	mul.w	r3, r0, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	3332      	adds	r3, #50	; 0x32
 8001f5c:	4a15      	ldr	r2, [pc, #84]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f68:	4419      	add	r1, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f82:	fba3 0302 	umull	r0, r3, r3, r2
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2064      	movs	r0, #100	; 0x64
 8001f8a:	fb00 f303 	mul.w	r3, r0, r3
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	3332      	adds	r3, #50	; 0x32
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <UART_SetConfig+0x118>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	440a      	add	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	51eb851f 	.word	0x51eb851f

08001fb8 <floatToStr>:
  uint8_t msb_temp;
}tc72_t;


void floatToStr(float val , char data[])
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  if (val<0)
 8001fc2:	f04f 0100 	mov.w	r1, #0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fad0 	bl	800056c <__aeabi_fcmplt>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <floatToStr+0x2e>
  {
    *data='-';
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	222d      	movs	r2, #45	; 0x2d
 8001fd6:	701a      	strb	r2, [r3, #0]
    data++;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	603b      	str	r3, [r7, #0]
    val*=-1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001fe4:	607b      	str	r3, [r7, #4]
  }

  int intVal =val*100;
 8001fe6:	4949      	ldr	r1, [pc, #292]	; (800210c <floatToStr+0x154>)
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe f8af 	bl	800014c <__aeabi_fmul>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fae3 	bl	80005bc <__aeabi_f2iz>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60fb      	str	r3, [r7, #12]
  data[5] = (intVal %10) +'0';
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <floatToStr+0x158>)
 8001ffe:	fb83 1302 	smull	r1, r3, r3, r2
 8002002:	1099      	asrs	r1, r3, #2
 8002004:	17d3      	asrs	r3, r2, #31
 8002006:	1ac9      	subs	r1, r1, r3
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	1ad1      	subs	r1, r2, r3
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3305      	adds	r3, #5
 8002018:	3230      	adds	r2, #48	; 0x30
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]
  intVal /=10;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a3b      	ldr	r2, [pc, #236]	; (8002110 <floatToStr+0x158>)
 8002022:	fb82 1203 	smull	r1, r2, r2, r3
 8002026:	1092      	asrs	r2, r2, #2
 8002028:	17db      	asrs	r3, r3, #31
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	60fb      	str	r3, [r7, #12]
  data[4] = (intVal %10) +'0';
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4b37      	ldr	r3, [pc, #220]	; (8002110 <floatToStr+0x158>)
 8002032:	fb83 1302 	smull	r1, r3, r3, r2
 8002036:	1099      	asrs	r1, r3, #2
 8002038:	17d3      	asrs	r3, r2, #31
 800203a:	1ac9      	subs	r1, r1, r3
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	1ad1      	subs	r1, r2, r3
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	3304      	adds	r3, #4
 800204c:	3230      	adds	r2, #48	; 0x30
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
  data[3] = '.';
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3303      	adds	r3, #3
 8002056:	222e      	movs	r2, #46	; 0x2e
 8002058:	701a      	strb	r2, [r3, #0]
  intVal /=10;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <floatToStr+0x158>)
 800205e:	fb82 1203 	smull	r1, r2, r2, r3
 8002062:	1092      	asrs	r2, r2, #2
 8002064:	17db      	asrs	r3, r3, #31
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	60fb      	str	r3, [r7, #12]
  data[2] = (intVal %10) +'0';
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <floatToStr+0x158>)
 800206e:	fb83 1302 	smull	r1, r3, r3, r2
 8002072:	1099      	asrs	r1, r3, #2
 8002074:	17d3      	asrs	r3, r2, #31
 8002076:	1ac9      	subs	r1, r1, r3
 8002078:	460b      	mov	r3, r1
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	1ad1      	subs	r1, r2, r3
 8002082:	b2ca      	uxtb	r2, r1
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3302      	adds	r3, #2
 8002088:	3230      	adds	r2, #48	; 0x30
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]
  intVal /=10;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <floatToStr+0x158>)
 8002092:	fb82 1203 	smull	r1, r2, r2, r3
 8002096:	1092      	asrs	r2, r2, #2
 8002098:	17db      	asrs	r3, r3, #31
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	60fb      	str	r3, [r7, #12]
  data[1] = (intVal %10) +'0';
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <floatToStr+0x158>)
 80020a2:	fb83 1302 	smull	r1, r3, r3, r2
 80020a6:	1099      	asrs	r1, r3, #2
 80020a8:	17d3      	asrs	r3, r2, #31
 80020aa:	1ac9      	subs	r1, r1, r3
 80020ac:	460b      	mov	r3, r1
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	1ad1      	subs	r1, r2, r3
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	3230      	adds	r2, #48	; 0x30
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	701a      	strb	r2, [r3, #0]
  intVal /=10;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <floatToStr+0x158>)
 80020c6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ca:	1092      	asrs	r2, r2, #2
 80020cc:	17db      	asrs	r3, r3, #31
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	60fb      	str	r3, [r7, #12]
  data[0] = (intVal %10) +'0';
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <floatToStr+0x158>)
 80020d6:	fb83 1302 	smull	r1, r3, r3, r2
 80020da:	1099      	asrs	r1, r3, #2
 80020dc:	17d3      	asrs	r3, r2, #31
 80020de:	1ac9      	subs	r1, r1, r3
 80020e0:	460b      	mov	r3, r1
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	1ad1      	subs	r1, r2, r3
 80020ea:	b2cb      	uxtb	r3, r1
 80020ec:	3330      	adds	r3, #48	; 0x30
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	701a      	strb	r2, [r3, #0]
  intVal /=10;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a06      	ldr	r2, [pc, #24]	; (8002110 <floatToStr+0x158>)
 80020f8:	fb82 1203 	smull	r1, r2, r2, r3
 80020fc:	1092      	asrs	r2, r2, #2
 80020fe:	17db      	asrs	r3, r3, #31
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	60fb      	str	r3, [r7, #12]
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	42c80000 	.word	0x42c80000
 8002110:	66666667 	.word	0x66666667

08002114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b097      	sub	sp, #92	; 0x5c
 8002118:	af02      	add	r7, sp, #8
  tc72_t  tc72;
  uint8_t TxBuf[10];
  uint8_t RxBuf[10];

      char  str [20];
      char  str2[20] ="temperature = ";
 800211a:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <main+0x180>)
 800211c:	463c      	mov	r4, r7
 800211e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002120:	c407      	stmia	r4!, {r0, r1, r2}
 8002122:	8023      	strh	r3, [r4, #0]
 8002124:	3402      	adds	r4, #2
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	7023      	strb	r3, [r4, #0]
 800212a:	f107 030f 	add.w	r3, r7, #15
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	711a      	strb	r2, [r3, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002134:	f7fe fa68 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002138:	f000 f8b6 	bl	80022a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800213c:	f000 f950 	bl	80023e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002140:	f000 f8ee 	bl	8002320 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002144:	f000 f922 	bl	800238c <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    TxBuf[0]=0x80;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    TxBuf[1]=0x00;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    ASSERT_CS();
 8002154:	2201      	movs	r2, #1
 8002156:	2110      	movs	r1, #16
 8002158:	484f      	ldr	r0, [pc, #316]	; (8002298 <main+0x184>)
 800215a:	f7fe fd3b 	bl	8000bd4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, TxBuf, 2, 100);
 800215e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002162:	2364      	movs	r3, #100	; 0x64
 8002164:	2202      	movs	r2, #2
 8002166:	484d      	ldr	r0, [pc, #308]	; (800229c <main+0x188>)
 8002168:	f7ff f9ea 	bl	8001540 <HAL_SPI_Transmit>
    DEASSERT_CS();
 800216c:	2200      	movs	r2, #0
 800216e:	2110      	movs	r1, #16
 8002170:	4849      	ldr	r0, [pc, #292]	; (8002298 <main+0x184>)
 8002172:	f7fe fd2f 	bl	8000bd4 <HAL_GPIO_WritePin>

    TxBuf[0]=0x01;
 8002176:	2301      	movs	r3, #1
 8002178:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    temp = 0.0f;
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	64fb      	str	r3, [r7, #76]	; 0x4c

    ASSERT_CS();
 8002182:	2201      	movs	r2, #1
 8002184:	2110      	movs	r1, #16
 8002186:	4844      	ldr	r0, [pc, #272]	; (8002298 <main+0x184>)
 8002188:	f7fe fd24 	bl	8000bd4 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, 4, 100);
 800218c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002190:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002194:	2364      	movs	r3, #100	; 0x64
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2304      	movs	r3, #4
 800219a:	4840      	ldr	r0, [pc, #256]	; (800229c <main+0x188>)
 800219c:	f7ff fb0c 	bl	80017b8 <HAL_SPI_TransmitReceive>
    DEASSERT_CS();
 80021a0:	2200      	movs	r2, #0
 80021a2:	2110      	movs	r1, #16
 80021a4:	483c      	ldr	r0, [pc, #240]	; (8002298 <main+0x184>)
 80021a6:	f7fe fd15 	bl	8000bd4 <HAL_GPIO_WritePin>
          if(RxBuf[1]& (1<<6))
 80021aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <main+0xb2>
          {
            temp+=0.5f;
 80021b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80021bc:	f7fe f880 	bl	80002c0 <__addsf3>
 80021c0:	4603      	mov	r3, r0
 80021c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021c4:	e00b      	b.n	80021de <main+0xca>
          }
          else if(RxBuf[1]& (1<<7))
 80021c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da06      	bge.n	80021de <main+0xca>
          {
            temp+=0.25f;
 80021d0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80021d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80021d6:	f7fe f873 	bl	80002c0 <__addsf3>
 80021da:	4603      	mov	r3, r0
 80021dc:	64fb      	str	r3, [r7, #76]	; 0x4c
          }

      TxBuf[0]=0x02;
 80021de:	2302      	movs	r3, #2
 80021e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   ASSERT_CS();
 80021e4:	2201      	movs	r2, #1
 80021e6:	2110      	movs	r1, #16
 80021e8:	482b      	ldr	r0, [pc, #172]	; (8002298 <main+0x184>)
 80021ea:	f7fe fcf3 	bl	8000bd4 <HAL_GPIO_WritePin>
   HAL_SPI_TransmitReceive(&hspi1, TxBuf, RxBuf, 4, 100);
 80021ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80021f6:	2364      	movs	r3, #100	; 0x64
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2304      	movs	r3, #4
 80021fc:	4827      	ldr	r0, [pc, #156]	; (800229c <main+0x188>)
 80021fe:	f7ff fadb 	bl	80017b8 <HAL_SPI_TransmitReceive>
   DEASSERT_CS();
 8002202:	2200      	movs	r2, #0
 8002204:	2110      	movs	r1, #16
 8002206:	4824      	ldr	r0, [pc, #144]	; (8002298 <main+0x184>)
 8002208:	f7fe fce4 	bl	8000bd4 <HAL_GPIO_WritePin>

   tc72.msb_temp = RxBuf[1];
 800220c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002210:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
   tc72.lsb_temp = RxBuf[2];
 8002214:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002218:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

   int16_t Temp_reg = tc72.msb_temp <<8 | tc72.lsb_temp;
 800221c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   Temp_reg >>=7;
 8002230:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002234:	11db      	asrs	r3, r3, #7
 8002236:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   x= ((signed char)(Temp_reg));
 800223a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800223e:	b25b      	sxtb	r3, r3
 8002240:	647b      	str	r3, [r7, #68]	; 0x44
   temp+=x;
 8002242:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002244:	f7fe f8f0 	bl	8000428 <__aeabi_i2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4619      	mov	r1, r3
 800224c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800224e:	f7fe f837 	bl	80002c0 <__addsf3>
 8002252:	4603      	mov	r3, r0
 8002254:	64fb      	str	r3, [r7, #76]	; 0x4c

   floatToStr(temp,str);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800225e:	f7ff feab 	bl	8001fb8 <floatToStr>

   HAL_UART_Transmit(&huart1, (uint8_t*)str2, sizeof(str2), 100);
 8002262:	4639      	mov	r1, r7
 8002264:	2364      	movs	r3, #100	; 0x64
 8002266:	2214      	movs	r2, #20
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <main+0x18c>)
 800226a:	f7ff fd3a 	bl	8001ce2 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str), 100);
 800226e:	f107 0114 	add.w	r1, r7, #20
 8002272:	2364      	movs	r3, #100	; 0x64
 8002274:	2214      	movs	r2, #20
 8002276:	480a      	ldr	r0, [pc, #40]	; (80022a0 <main+0x18c>)
 8002278:	f7ff fd33 	bl	8001ce2 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart1, (uint8_t*)&"\n\r",2, 2);
 800227c:	2302      	movs	r3, #2
 800227e:	2202      	movs	r2, #2
 8002280:	4908      	ldr	r1, [pc, #32]	; (80022a4 <main+0x190>)
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <main+0x18c>)
 8002284:	f7ff fd2d 	bl	8001ce2 <HAL_UART_Transmit>
   HAL_Delay(1000);
 8002288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228c:	f7fe fa1e 	bl	80006cc <HAL_Delay>
  {
 8002290:	e75a      	b.n	8002148 <main+0x34>
 8002292:	bf00      	nop
 8002294:	08002710 	.word	0x08002710
 8002298:	40010800 	.word	0x40010800
 800229c:	2000002c 	.word	0x2000002c
 80022a0:	20000084 	.word	0x20000084
 80022a4:	0800270c 	.word	0x0800270c

080022a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b090      	sub	sp, #64	; 0x40
 80022ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ae:	f107 0318 	add.w	r3, r7, #24
 80022b2:	2228      	movs	r2, #40	; 0x28
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fa0c 	bl	80026d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ca:	2302      	movs	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022ce:	2301      	movs	r3, #1
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d2:	2310      	movs	r3, #16
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fc90 	bl	8000c04 <HAL_RCC_OscConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80022ea:	f000 f8ab 	bl	8002444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ee:	230f      	movs	r3, #15
 80022f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fefe 	bl	8001108 <HAL_RCC_ClockConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002312:	f000 f897 	bl	8002444 <Error_Handler>
  }
}
 8002316:	bf00      	nop
 8002318:	3740      	adds	r7, #64	; 0x40
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <MX_SPI1_Init+0x64>)
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <MX_SPI1_Init+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <MX_SPI1_Init+0x64>)
 800232c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002330:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <MX_SPI1_Init+0x64>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_SPI1_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_SPI1_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_SPI1_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_SPI1_Init+0x64>)
 800234c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002350:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_SPI1_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <MX_SPI1_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_SPI1_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <MX_SPI1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_SPI1_Init+0x64>)
 800236c:	220a      	movs	r2, #10
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_SPI1_Init+0x64>)
 8002372:	f7ff f861 	bl	8001438 <HAL_SPI_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800237c:	f000 f862 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000002c 	.word	0x2000002c
 8002388:	40013000 	.word	0x40013000

0800238c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_USART1_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f7ff fc40 	bl	8001c48 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f000 f839 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000084 	.word	0x20000084
 80023dc:	40013800 	.word	0x40013800

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_GPIO_Init+0x5c>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	4a10      	ldr	r2, [pc, #64]	; (800243c <MX_GPIO_Init+0x5c>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6193      	str	r3, [r2, #24]
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_GPIO_Init+0x5c>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2110      	movs	r1, #16
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <MX_GPIO_Init+0x60>)
 8002412:	f7fe fbdf 	bl	8000bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002416:	2310      	movs	r3, #16
 8002418:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2302      	movs	r3, #2
 8002424:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0308 	add.w	r3, r7, #8
 800242a:	4619      	mov	r1, r3
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_GPIO_Init+0x60>)
 800242e:	f7fe fa55 	bl	80008dc <HAL_GPIO_Init>

}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <HAL_MspInit+0x5c>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a14      	ldr	r2, [pc, #80]	; (80024ac <HAL_MspInit+0x5c>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_MspInit+0x5c>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_MspInit+0x5c>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_MspInit+0x5c>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	61d3      	str	r3, [r2, #28]
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <HAL_MspInit+0x5c>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	607b      	str	r3, [r7, #4]
 8002484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_MspInit+0x60>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_MspInit+0x60>)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010000 	.word	0x40010000

080024b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_SPI_MspInit+0x88>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d12f      	bne.n	8002534 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_SPI_MspInit+0x8c>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002504:	23a0      	movs	r3, #160	; 0xa0
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	480b      	ldr	r0, [pc, #44]	; (8002544 <HAL_SPI_MspInit+0x90>)
 8002518:	f7fe f9e0 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800251c:	2340      	movs	r3, #64	; 0x40
 800251e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002528:	f107 0310 	add.w	r3, r7, #16
 800252c:	4619      	mov	r1, r3
 800252e:	4805      	ldr	r0, [pc, #20]	; (8002544 <HAL_SPI_MspInit+0x90>)
 8002530:	f7fe f9d4 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002534:	bf00      	nop
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40013000 	.word	0x40013000
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800

08002548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1c      	ldr	r2, [pc, #112]	; (80025d4 <HAL_UART_MspInit+0x8c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d131      	bne.n	80025cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_UART_MspInit+0x90>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_UART_MspInit+0x90>)
 800256e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0x90>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800259c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	4619      	mov	r1, r3
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <HAL_UART_MspInit+0x94>)
 80025ae:	f7fe f995 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	4619      	mov	r1, r3
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_UART_MspInit+0x94>)
 80025c8:	f7fe f988 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40010800 	.word	0x40010800

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <HardFault_Handler+0x4>

080025f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <MemManage_Handler+0x4>

080025f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <BusFault_Handler+0x4>

080025fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <UsageFault_Handler+0x4>

08002604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262c:	f7fe f832 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}

08002634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff ffe5 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f000 f80f 	bl	800268c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266e:	f7ff fd51 	bl	8002114 <main>
  bx lr
 8002672:	4770      	bx	lr
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800267c:	08002744 	.word	0x08002744
  ldr r2, =_sbss
 8002680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002684:	200000c8 	.word	0x200000c8

08002688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC1_2_IRQHandler>
	...

0800268c <__libc_init_array>:
 800268c:	b570      	push	{r4, r5, r6, lr}
 800268e:	2600      	movs	r6, #0
 8002690:	4d0c      	ldr	r5, [pc, #48]	; (80026c4 <__libc_init_array+0x38>)
 8002692:	4c0d      	ldr	r4, [pc, #52]	; (80026c8 <__libc_init_array+0x3c>)
 8002694:	1b64      	subs	r4, r4, r5
 8002696:	10a4      	asrs	r4, r4, #2
 8002698:	42a6      	cmp	r6, r4
 800269a:	d109      	bne.n	80026b0 <__libc_init_array+0x24>
 800269c:	f000 f822 	bl	80026e4 <_init>
 80026a0:	2600      	movs	r6, #0
 80026a2:	4d0a      	ldr	r5, [pc, #40]	; (80026cc <__libc_init_array+0x40>)
 80026a4:	4c0a      	ldr	r4, [pc, #40]	; (80026d0 <__libc_init_array+0x44>)
 80026a6:	1b64      	subs	r4, r4, r5
 80026a8:	10a4      	asrs	r4, r4, #2
 80026aa:	42a6      	cmp	r6, r4
 80026ac:	d105      	bne.n	80026ba <__libc_init_array+0x2e>
 80026ae:	bd70      	pop	{r4, r5, r6, pc}
 80026b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b4:	4798      	blx	r3
 80026b6:	3601      	adds	r6, #1
 80026b8:	e7ee      	b.n	8002698 <__libc_init_array+0xc>
 80026ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80026be:	4798      	blx	r3
 80026c0:	3601      	adds	r6, #1
 80026c2:	e7f2      	b.n	80026aa <__libc_init_array+0x1e>
 80026c4:	0800273c 	.word	0x0800273c
 80026c8:	0800273c 	.word	0x0800273c
 80026cc:	0800273c 	.word	0x0800273c
 80026d0:	08002740 	.word	0x08002740

080026d4 <memset>:
 80026d4:	4603      	mov	r3, r0
 80026d6:	4402      	add	r2, r0
 80026d8:	4293      	cmp	r3, r2
 80026da:	d100      	bne.n	80026de <memset+0xa>
 80026dc:	4770      	bx	lr
 80026de:	f803 1b01 	strb.w	r1, [r3], #1
 80026e2:	e7f9      	b.n	80026d8 <memset+0x4>

080026e4 <_init>:
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e6:	bf00      	nop
 80026e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ea:	bc08      	pop	{r3}
 80026ec:	469e      	mov	lr, r3
 80026ee:	4770      	bx	lr

080026f0 <_fini>:
 80026f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f2:	bf00      	nop
 80026f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026f6:	bc08      	pop	{r3}
 80026f8:	469e      	mov	lr, r3
 80026fa:	4770      	bx	lr
